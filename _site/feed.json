{
    "version": "https://jsonfeed.org/version/1",
    "title": "Swiftjective-C",
    "description": "Swiftjective-C is a periodical over modern iOS software engineering. It houses tactful discussions over Swift, Objective-C and developing high quality apps while peering into various frameworks to see what makes them tick.\n",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "author": {
        "name": "Jordan Morgan", "avatar": "/assets/images/about/headshot.jpeg"},
    "items": [
      {
            "id": "http://localhost:4000/Its-Okay-To-Do-Nothing",
            "url": "http://localhost:4000/Its-Okay-To-Do-Nothing/",
            "title": "It’s Okay to Do Nothing",
            "content_html": "<p>If there is one thing I don’t like doing - it’s nothing.</p>\n\n<p>I’ve never been good at it. While I’m miles away from the “hustle porn” ways that are unfortunately pervasive within the tech industry, I’ve always had a natural work ethic and a desire to do more. My near-anathema towards inaction, no goals being set forth or something to solve has served me well in my career.</p>\n\n<p>But right now, I just can’t. And if you can’t either, you should know that you don’t have to.</p>\n\n<p>It’s something I’ve been having to remind myself. Not even a few hours ago, I retreated to my bathroom, closed the door and buried my head in my hands. I felt defeated - it was 9:00 a.m. and <em>just couldn’t get anything started</em>.</p>\n\n<p>Typically, my work day would’ve started hours ago. But between (literally) spilled milk, a diaper change, breaking up a fight over a kickball, making another bowl of cereal because a sibling got jealous his brother had one and he didn’t while also getting myself dressed and somewhat fed - I found no ounce of down time.</p>\n\n<h3 id=\"detour\">Detour</h3>\n\n<p>When I look at my goals for the year, they stick out like a sore thumb and, now, produce a stark juxtaposition of priorities and unrealistic expectations when faced with the current world wide pandemic. I’m dutifully staying home, as I’m sure most of you are, and within these walls are my entire life:</p>\n\n<p>My wife, Bennett (age 6), Remy (age 3) and Baylor (1 year old).</p>\n\n<p>Our days are spent almost entirely spent in our 1100 square foot home with three bedrooms. In many ways, I feel thankful and lucky to have this extra time with the people I care most about it.</p>\n\n<p>But when it comes to work, and getting things done - I nearly can’t. And it bothers me, but I’ve come to accept that this is simply where things are at. Even more so, it’s the definition of “out of my control”. Either Remy is banging on my bedroom door screaming because he doesn’t understand why I can’t come out to play, or Bennett wants help with school work or Baylor wants me to hold her - I’ve come to realize that parenthood doesn’t give you a pass just because the world is on fire.</p>\n\n<p>So, I’m doing the best that I can. And some days, it’s nearly nothing. On those days, I continually count my blessings to offset my mood. I work for an amazing company and team who truly are sympathetic to not only my situation, but everyone across the team. They’ve got my back, and I’m truly grateful for it. My wife, who does this every day (pandemic or not) keeps us all together and chugging along.</p>\n\n<p>And, in between these moments, I find time to write code. And someday (who knows when) I’ll have time to write more of it.</p>\n\n<p>But right now, Xcode is getting a breather more often than not. And while it does, I’m going to take my own deep breath, be a great Dad and husband - and give me company all I can, when I can. Some days that’s not a lot, some days it’s a little bit more than yesterday and very rarely it’s quite a bit.</p>\n\n<p>So if your productivity is  taking a hit, and you’re a little stressed about it - please know that there are many of us feeling that burn along with you. Spend Stack can wait, blog posts can wait, learning new things can wait - it all can wait. Your employer will hopefully know that some work will have to wait, too. But taking care of myself, my kids and wife cannot.</p>\n\n<p>This is nothing that Twitter hasn’t already said, but maybe you needed a reminder today. We will put COVID-19 in our rear view mirror someday. Humanity has defeated several forms of sickness before, and we will do it again. But this is not normal, and your throughput won’t be normal.</p>\n\n<h3 id=\"final-thoughts\">Final Thoughts</h3>\n<p>Just a take a breather, know that better days are on the way and please remember; it’s OK to do nothing. Right now, some days it’s all you can do.</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "If there is one thing I don’t like doing - it’s nothing.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2020-04-10T00:00:00-05:00",
            "date_modified": "2020-04-10T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["The Indie Dev Diaries"]},{
            "id": "http://localhost:4000/Keyboard-and-Combine",
            "url": "http://localhost:4000/Keyboard-and-Combine/",
            "title": "Keyboard and Combine",
            "content_html": "<p>While toiling about with some keyboard handling code in Spend Stack, I started to remember one import choice I made several months ago:</p>\n\n<p>Spend Stack’s minimum build target is iOS 13.</p>\n\n<p>Which means my cup runneth over with Combine. So, today I’m sharing a little utility I wrote which brings the convenience of Combine into the world of <code class=\"highlighter-rouge\">UIKeyboard</code>.</p>\n\n<p>Normally, the flow to handle the keyboard looks a little like this, give or take:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">keyboardNotifications</span><span class=\"p\">:[</span><span class=\"kt\">NSNotification</span><span class=\"o\">.</span><span class=\"kt\">Name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"n\">keyboardWillShowNotification</span><span class=\"p\">,</span>\n<span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"n\">keyboardDidShowNotification</span><span class=\"p\">,</span>\n<span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"n\">keyboardWillHideNotification</span><span class=\"p\">,</span>\n<span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"n\">keyboardDidHideNotification</span><span class=\"p\">]</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">kbSelector</span> <span class=\"o\">=</span> <span class=\"kd\">#selector(</span><span class=\"nf\">receivedKeyboardNotification(notification:)</span><span class=\"kd\">)</span>\n<span class=\"n\">keyboardNotifications</span><span class=\"o\">.</span><span class=\"n\">forEach</span> <span class=\"p\">{</span>\n    <span class=\"kt\">NotificationCenter</span><span class=\"o\">.</span><span class=\"k\">default</span><span class=\"o\">.</span><span class=\"nf\">addObserver</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"p\">,</span>\n                                           <span class=\"nv\">selector</span><span class=\"p\">:</span> <span class=\"n\">kbSelector</span><span class=\"p\">,</span>\n                                           <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"nv\">$0</span><span class=\"p\">,</span>\n                                           <span class=\"nv\">object</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">@objc</span> <span class=\"kd\">func</span> <span class=\"nf\">receivedKeyboardNotification</span><span class=\"p\">(</span><span class=\"nv\">notification</span><span class=\"p\">:</span> <span class=\"kt\">Notification</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Get animation curve, rect or whatever else...</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The two things I wanted to clean up were that:</p>\n\n<p><strong>1)</strong> That’s a lot of code to just know when the keyboard is doing stuff and <br />\n<strong>2)</strong> It would be nice to centralize getting all of the information about what’s going on out of the <code class=\"highlighter-rouge\">userInfo</code> dictionary into something tidier.</p>\n\n<h3 id=\"unify-keyboard-information\">Unify Keyboard Information</h3>\n<p>The latter part is easy enough. A little struct can go a long ways here:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">enum</span> <span class=\"kt\">KeyboardTransitionState</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">unset</span><span class=\"p\">,</span> <span class=\"n\">willShow</span><span class=\"p\">,</span> <span class=\"n\">didShow</span><span class=\"p\">,</span> <span class=\"n\">willHide</span><span class=\"p\">,</span> <span class=\"n\">didHide</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">struct</span> <span class=\"kt\">KeyboardState</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">state</span><span class=\"p\">:</span><span class=\"kt\">KeyboardTransitionState</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">unset</span>\n    <span class=\"k\">var</span> <span class=\"nv\">height</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n    <span class=\"k\">var</span> <span class=\"nv\">isVisible</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n    <span class=\"k\">var</span> <span class=\"nv\">frame</span><span class=\"p\">:</span><span class=\"kt\">CGRect</span> <span class=\"o\">=</span> <span class=\"kt\">CGRect</span><span class=\"o\">.</span><span class=\"n\">zero</span>\n    <span class=\"k\">var</span> <span class=\"nv\">animationDuration</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n\n    <span class=\"c1\">// MARK: Private </span>\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">frameEnd</span> <span class=\"o\">=</span> <span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"n\">keyboardFrameEndUserInfoKey</span>\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">animEnd</span> <span class=\"o\">=</span> <span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"n\">keyboardAnimationDurationUserInfoKey</span>\n\n    <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">with</span> <span class=\"nv\">note</span><span class=\"p\">:</span><span class=\"kt\">Notification</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">switch</span> <span class=\"n\">note</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"nv\">keyboardWillShowNotification</span><span class=\"p\">:</span>\n            <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">willShow</span>\n            <span class=\"k\">let</span> <span class=\"nv\">keyboardEndFrame</span> <span class=\"o\">=</span> <span class=\"n\">note</span><span class=\"o\">.</span><span class=\"n\">userInfo</span><span class=\"p\">?[</span><span class=\"n\">frameEnd</span><span class=\"p\">]</span> <span class=\"k\">as!</span> <span class=\"kt\">CGRect</span>\n            <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"kt\">Double</span><span class=\"p\">(</span><span class=\"n\">keyboardEndFrame</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">)</span>\n            \n            <span class=\"k\">let</span> <span class=\"nv\">animationDurationValue</span> <span class=\"o\">=</span> <span class=\"n\">note</span><span class=\"o\">.</span><span class=\"n\">userInfo</span><span class=\"p\">?[</span><span class=\"n\">animEnd</span><span class=\"p\">]</span> <span class=\"k\">as!</span> <span class=\"kt\">NSNumber</span>\n            <span class=\"n\">animationDuration</span> <span class=\"o\">=</span> <span class=\"n\">animationDurationValue</span><span class=\"o\">.</span><span class=\"n\">doubleValue</span>\n        <span class=\"k\">break</span>\n        <span class=\"k\">case</span> <span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"nv\">keyboardDidShowNotification</span><span class=\"p\">:</span>\n            <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">didShow</span>\n            <span class=\"n\">isVisible</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n            \n            <span class=\"k\">let</span> <span class=\"nv\">keyboardEndFrame</span> <span class=\"o\">=</span> <span class=\"n\">note</span><span class=\"o\">.</span><span class=\"n\">userInfo</span><span class=\"p\">?[</span><span class=\"n\">frameEnd</span><span class=\"p\">]</span> <span class=\"k\">as!</span> <span class=\"kt\">CGRect</span>\n            <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"kt\">Double</span><span class=\"p\">(</span><span class=\"n\">keyboardEndFrame</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">)</span>\n        <span class=\"k\">break</span>\n        <span class=\"k\">case</span> <span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"nv\">keyboardWillHideNotification</span><span class=\"p\">:</span>\n            <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">willHide</span>\n            <span class=\"k\">let</span> <span class=\"nv\">animationDurationValue</span> <span class=\"o\">=</span> <span class=\"n\">note</span><span class=\"o\">.</span><span class=\"n\">userInfo</span><span class=\"p\">?[</span><span class=\"n\">animEnd</span><span class=\"p\">]</span> <span class=\"k\">as!</span> <span class=\"kt\">NSNumber</span>\n            <span class=\"n\">animationDuration</span> <span class=\"o\">=</span> <span class=\"n\">animationDurationValue</span><span class=\"o\">.</span><span class=\"n\">doubleValue</span>\n        <span class=\"k\">break</span>\n        <span class=\"k\">case</span> <span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"nv\">keyboardDidHideNotification</span><span class=\"p\">:</span>\n            <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">didHide</span>\n        <span class=\"k\">break</span>\n        <span class=\"k\">default</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</code></pre></div></div>\n\n<p>It’s a smidge dirty and needs a bit of refactoring, but it’s more than enough to try out a new approach with Combine.</p>\n\n<h3 id=\"combine-it\">Combine It</h3>\n<p>In what’s become a weekly practice for me, I had a problem and threw Combine at it. I’m not sure if that’s a great sign or malpractice, regardless - here’s how it shaped up (with a backport option for iOS 12):</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">KeyboardHandler</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">onChange</span><span class=\"p\">:((</span><span class=\"kt\">KeyboardState</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)</span>\n    <span class=\"kd\">private(set)</span> <span class=\"k\">var</span> <span class=\"nv\">currentState</span><span class=\"p\">:</span><span class=\"kt\">KeyboardState</span><span class=\"p\">?</span>\n    \n    <span class=\"kd\">@available</span><span class=\"p\">(</span><span class=\"n\">iOS</span> <span class=\"mf\">13.0</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">)</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">lazy</span> <span class=\"k\">var</span> <span class=\"nv\">kbSub</span><span class=\"p\">:</span><span class=\"kt\">AnyCancellable</span><span class=\"p\">?</span> <span class=\"o\">=</span> <span class=\"kt\">AnyCancellable</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">keyboardNotifications</span><span class=\"p\">:[</span><span class=\"kt\">NSNotification</span><span class=\"o\">.</span><span class=\"kt\">Name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"n\">keyboardWillShowNotification</span><span class=\"p\">,</span>\n        <span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"n\">keyboardDidShowNotification</span><span class=\"p\">,</span>\n        <span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"n\">keyboardWillHideNotification</span><span class=\"p\">,</span>\n        <span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"n\">keyboardDidHideNotification</span><span class=\"p\">]</span>\n    \n    <span class=\"c1\">// MARK: Initializer</span>\n\n    <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">with</span> <span class=\"nv\">changeHandler</span><span class=\"p\">:</span><span class=\"kd\">@escaping</span> <span class=\"p\">((</span><span class=\"kt\">KeyboardState</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"n\">onChange</span> <span class=\"o\">=</span> <span class=\"n\">changeHandler</span>\n        \n        <span class=\"k\">if</span> <span class=\"kd\">#available(iOS 13.0, *)</span> <span class=\"p\">{</span>\n            <span class=\"k\">let</span> <span class=\"nv\">nc</span> <span class=\"o\">=</span> <span class=\"kt\">NotificationCenter</span><span class=\"o\">.</span><span class=\"k\">default</span>\n            <span class=\"n\">kbSub</span> <span class=\"o\">=</span> <span class=\"kt\">Publishers</span><span class=\"o\">.</span><span class=\"kt\">MergeMany</span><span class=\"p\">(</span>\n                <span class=\"n\">keyboardNotifications</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"n\">nc</span><span class=\"o\">.</span><span class=\"nf\">publisher</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"nv\">$0</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n            <span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">sink</span><span class=\"p\">(</span><span class=\"nv\">receiveValue</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">note</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">currentState</span> <span class=\"o\">=</span> <span class=\"kt\">KeyboardState</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">note</span><span class=\"p\">)</span>\n                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">onChange</span><span class=\"p\">(</span><span class=\"kt\">KeyboardState</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">note</span><span class=\"p\">))</span>\n            <span class=\"p\">})</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">let</span> <span class=\"nv\">kbSelector</span> <span class=\"o\">=</span> <span class=\"kd\">#selector(</span><span class=\"nf\">receivedKeyboardNotification(notification:)</span><span class=\"kd\">)</span>\n            <span class=\"n\">keyboardNotifications</span><span class=\"o\">.</span><span class=\"n\">forEach</span> <span class=\"p\">{</span>\n                <span class=\"kt\">NotificationCenter</span><span class=\"o\">.</span><span class=\"k\">default</span><span class=\"o\">.</span><span class=\"nf\">addObserver</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"p\">,</span>\n                                                       <span class=\"nv\">selector</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"n\">kbSelector</span><span class=\"p\">,</span>\n                                                       <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"nv\">$0</span><span class=\"p\">,</span>\n                                                       <span class=\"nv\">object</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"kd\">func</span> <span class=\"nf\">unsubscribe</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"kd\">#available(iOS 13.0, *)</span> <span class=\"p\">{</span>\n            <span class=\"n\">kbSub</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"nf\">cancel</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"kt\">NotificationCenter</span><span class=\"o\">.</span><span class=\"k\">default</span><span class=\"o\">.</span><span class=\"nf\">removeObserver</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"c1\">//MARK: Private Functions</span>\n\n    <span class=\"kd\">@objc</span> <span class=\"kd\">func</span> <span class=\"nf\">receivedKeyboardNotification</span><span class=\"p\">(</span><span class=\"nv\">notification</span><span class=\"p\">:</span> <span class=\"kt\">Notification</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">currentState</span> <span class=\"o\">=</span> <span class=\"kt\">KeyboardState</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">notification</span><span class=\"p\">)</span>\n        <span class=\"nf\">onChange</span><span class=\"p\">(</span><span class=\"kt\">KeyboardState</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">notification</span><span class=\"p\">))</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>There’s likely a prettier path to merging all of the notifications, but I accepted my Combine naïveté and moved on. Further, one might not need all of em’ either.</p>\n\n<blockquote>\n  <p>Update: Thanks to <a href=\"https://www.twitter.com/jasdev\">Jasdev Singh</a> for suggesting <code class=\"highlighter-rouge\">mergeMany</code>.</p>\n</blockquote>\n\n<h3 id=\"in-practice\">In Practice</h3>\n<p>So what’s that leave us with? Well, a tidy little object that’ll hide the messiness of keyboard handling away in a simple package:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">kbHandler</span><span class=\"p\">:</span><span class=\"kt\">KeyboardHandler</span><span class=\"p\">?</span>\n\n<span class=\"c1\">// Later on in viewDidLoad, or wherever appropriate...</span>\n<span class=\"n\">kbHandler</span> <span class=\"o\">=</span> <span class=\"kt\">KeyboardHandler</span> <span class=\"p\">{</span> <span class=\"n\">state</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"nv\">duration</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">animationDuration</span>\n    <span class=\"kt\">UIView</span><span class=\"o\">.</span><span class=\"nf\">animate</span><span class=\"p\">(</span><span class=\"nv\">withDuration</span><span class=\"p\">:</span> <span class=\"n\">duration</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Change table view offsets or whatever</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>What’s ironic is that after I had written this, I realized I could’ve done this approach years ago. In fact, Combine is abstracted away entirely to the caller.</p>\n\n<p>But, it’s just another example of how new API can make you look at age old problems in a new light. A problem well stated is a problem half solved I suppose.</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "While toiling about with some keyboard handling code in Spend Stack, I started to remember one import choice I made several months ago:",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2020-03-22T00:00:00-05:00",
            "date_modified": "2020-03-22T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Tech Notes"]},{
            "id": "http://localhost:4000/Creating-A-Retail-Demo",
            "url": "http://localhost:4000/Creating-A-Retail-Demo/",
            "title": "Creating a Retail Demo for Apple",
            "content_html": "<p>Through luck, determination and whatever other stereotypical noble quality you can conjure up, Apple selected <a href=\"https://www.spendstack.com\">Spend Stack</a> to take part in their retail demo program.</p>\n\n<p>Yay! Right!? Just look at it!</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/demoStore.jpeg\" role=\"presentation\" srcset=\"../assets/images/demoStore.jpeg\" /></p>\n\n<p>Well, yes. Of course yes!</p>\n\n<p>But, if you hit the Googles for past experiences with this, you’ll find quite a lot of tumbleweeds. This makes sense, because if you happen to scan the apps that are on retail iPhones and iPads at your local Best Buy, Apple Store, etc. - they tend to be apps that hail from Big Corp©. And rightfully so, they all are quality, well made apps with the team and budget to match.</p>\n\n<p>Though, the everyman doesn’t often appear there. And if they do, it typically tends to be in the form of a game. So today, I figured I’d spend this indie dev diary chronicling my experience with getting Spend Stack on iPhones and iPads across America 🇺🇸. Think of it as Spend Stack’s official road tour 🚌.</p>\n\n<p>Or, maybe more than America. I’m not really sure? I’ll get into that later, as we’ll see.</p>\n\n<h3 id=\"the-reach-out\">The Reach Out</h3>\n<p>During some Saturday in December when I was hacking away at Spend Stack at local coffee shop, I noticed an email that stuck out. Its subject line spoke about an incredible marketing opportunity.</p>\n\n<p>I thought it was spam 😅!</p>\n\n<p>Thankfully, I took a closer look and saw the sender had a bonafide Apple domain. The message was simple enough. Someone from developer relations introduced themselves and laid out how the process works.</p>\n\n<p>From there, you just dive into the ~15 page .pdf file they give you to point out the finer details. I will say, this guide was incredibly helpful. It had step-by-step pictures with call out glyphs to ensure you were getting logistical things done correctly (especially helpful when you get into the upload part of the process).</p>\n\n<h3 id=\"the-prep\">The Prep</h3>\n<p>With my requirements in hand, I got to work! Luckily, this occurred over my Christmas break, where I am fortunate enough to take about three weeks off each year. I had quite a large update to Spend Stack planned for this time (which I’m in the middle of now) but the opportunity cost was worth the trade.</p>\n\n<p>If you’ve spent any number of minutes with these demo apps at stores, you kind of know what to expect. A splash screen saying that’s it a demo, pre-populated data and some features that are either taken out or gated by an alert controller saying it’s unavailable.</p>\n\n<p>In Spend Stack, all of this was easy enough. Instead of going through my designs and taking things out, I opted to keep them in so users would be aware they existed. I’d rather they hit a “You can’t do this in the demo” alert than be none-the-wiser to some pretty great features that are core to Spend Stack (i.e. iCloud sharing and collaborating for lists).</p>\n\n<p>The splash screen was quick to whip up - I originally was using the one I have shipped now, but it was easier to rip it out to make a more “to the point” variation:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/compareSplash.png\" role=\"presentation\" srcset=\"../assets/images/compareSplash.png\" /></p>\n\n<p>If anything, I probably would’ve taken out the “Continue” button, as I noticed quite a few apps don’t even use one.</p>\n\n<h3 id=\"the-problems\">The Problems</h3>\n<p>I hit some issues along the way, though. The first and most challenging was around how I chose to tackle demo data. I need quite a bit of it. I wrote a list of lists (meta!) that I wanted to include to best showcase all of the things you can do with Spend Stack. I ended up with a solid line up, and each one was filled with relevant items, images, notes and more:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/listLists.png\" role=\"presentation\" srcset=\"../assets/images/listLists.png\" /></p>\n\n<p>The issue was, I created these all in code for my first go around. And, well - it took about 5 seconds to create the database, drop existing data and populate these on the fly. That’s a non-starter, obviously, as nobody except my Mom and (maybe) my wife would wait around for that. And even then, it would only be out of love 😅.</p>\n\n<p>I tried to turn some tricks with concurrency, but as is so often the case with programming - I stepped away from it and arrived at an answer. The epiphany came, and the solution was dead simple: simply ship the retail demo with a database. Spend Stack uses raw SQLite for data, and once I used the app and had a good set of dummy lists to work with - I simply found it within the file system on my mac and included it as part of the Xcode project.</p>\n\n<p>It booted lightning fast - done and done:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">databaseFilePath</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">NSFileManager</span> <span class=\"o\">*</span><span class=\"n\">fileManager</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSFileManager</span> <span class=\"n\">defaultManager</span><span class=\"p\">];</span>\n    <span class=\"kt\">NSArray</span> <span class=\"o\">*</span><span class=\"n\">directories</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">fileManager</span> <span class=\"kt\">URLsForDirectory</span><span class=\"p\">:</span><span class=\"kt\">NSDocumentDirectory</span> <span class=\"nv\">inDomains</span><span class=\"p\">:</span><span class=\"kt\">NSUserDomainMask</span><span class=\"p\">];</span>\n    <span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">documentPath</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">directories</span><span class=\"o\">.</span><span class=\"n\">firstObject</span> <span class=\"kt\">URLByAppendingPathComponent</span><span class=\"p\">:</span><span class=\"s\">@\"spendStack.db\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">;</span>\n    \n    <span class=\"k\">return</span> <span class=\"n\">documentPath</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The other hiccup has to do with multiple spaces on iPadOS. When you ship these retail apps, you’ve got to wipe any data entered on them when the user is “done” with them. Done is quite ambiguous, and there’s no concrete “when” defined. So, when a user backgrounds Spend Stack I reset everything:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">void</span><span class=\"p\">)</span><span class=\"nv\">sceneDidEnterBackground</span><span class=\"p\">:(</span><span class=\"kt\">UIScene</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">scene</span>\n<span class=\"p\">{</span>\n    <span class=\"p\">[</span><span class=\"k\">self</span> <span class=\"n\">initateSelfDestructSequence</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The only fun thing is that when you open a new window, iOS also calls the same delegate method while the window is being setup. You can see this quite easily, and it makes sense I guess - iOS puts up that blurry view while another window slides in. So, I’ve got some jank there that I won’t share publicly to help avoid any deleterious state bugs 😅 (spoiler, it’s <em>totally</em> not a simple GCD delay, no way).</p>\n\n<p>Aside from that - uploading it App Store Connect gave me some fits. Try to hide your surprise 😜. It’s a bit of a different flow, but again - the .pdf guide they give you really helped out here.</p>\n\n<h3 id=\"the-uncertainty\">The Uncertainty</h3>\n<p>Once it was uploaded, all that was left to do was wait. I didn’t really get much information on when and where it would be. Was this like App Store promo art, where you supply it and it might be lost to the dark ether of the App Store editorial team (still waiting for mine to be used 🤞😭🙃) or show up next week? I had no idea, so I figured I’d just point blank ask them.</p>\n\n<p>The response?</p>\n\n<p>An email telling me to gate one more feature with an alert 🤣. But, I guess that did mean they were going to use it! Shoot your shot, right?</p>\n\n<p>Getting responses was a little difficult to be honest, and in some ways frustrating, because to smaller indies like me - this is a <strong>big</strong> deal! This is getting Apple’s stamp of approval for your app! It’s marketing! Validation! The list goes on. I wanted to know I was doing everything they needed.</p>\n\n<p>Look, there could be a million reasons for why things work the way they do on the App Store and these kind of things. It could be out of certain individual’s control. It’s always easy to bemoan X or Y on the outside.</p>\n\n<p>I do know this - the rep I worked with was always kind when I chatted with them, and we cracked a few jokes back and forth. Plus, each person I’ve meet at W.W.D.C. on the App Store team was delightful, and the labs with them were a highlight. It feels like the key here is like anything else, you just need to build relationships to get things moving and I’m still working on that with the App Store folks.</p>\n\n<p>All that to say - the reason for this tweet was half because I wanted to share the news with my fellows devs, and half because I wanted to get the word out:</p>\n\n<div class=\"jekyll-twitter-plugin\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">🤩<br /><br />About that Spend Stack news...<br /><br />I’ve always said that my main goal was to make an app I’m truly proud of. While I’ve got a lot left to do, having Apple want <a href=\"https://twitter.com/SpendStackApp?ref_src=twsrc%5Etfw\">@SpendStackApp</a> on iPhones to demo their product is a huge honor for me and validation that I’m on the right track. <a href=\"https://t.co/uSGhEbv8YL\">pic.twitter.com/uSGhEbv8YL</a></p>&mdash; Jordan Morgan (@JordanMorgan10) <a href=\"https://twitter.com/JordanMorgan10/status/1224478409423716353?ref_src=twsrc%5Etfw\">February 3, 2020</a></blockquote>\n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div>\n\n<p>If someone saw Spend Stack at the stores, maybe they would tell me and that would be how I found out it released. Thankfully, that wasn’t necessary.</p>\n\n<p>Why? Because I straight up walked into Best Buy a few times a week to check (there’s no Apple Store by me, unfortunately). And, well - one day it was there!</p>\n\n<h3 id=\"the-payoff\">The Payoff</h3>\n<p>There is nothing quite like walking into a brick and mortar store and seeing your own app sitting there on an iPhone. It really is one of those career moments that I’ll never forget. As someone who tends to be extremely critical of their work and a slight perfectionist, I find that being “proud” or feeling “finished” is always <em>just</em> another milestone away.</p>\n\n<p>But as my wife noted, when I walked in there and saw it - I was unmistakably proud and fulfilled. She said my face lit up, and she caught some convert, candid pics to prove it:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/proud.jpg\" role=\"presentation\" srcset=\"../assets/images/proud.jpg\" /></p>\n\n<p>It was a lot of fun chatting it up with the Best Buy employees too:</p>\n\n<blockquote>\n  <p>Best Buy Person: Hey! Any questions about that iPhone?<br />\n Me: No, but dude - my app is on here!<br />\n Best Buy Person: Wait, what? Which one?<br />\n Me: This one!<br />\n Best Buy Person: No way! How? When? So many questions!</p>\n</blockquote>\n\n<p>They all were genuinely interested, and who knows - maybe I inadvertently created the first Spend Stack sales team 😎. On our way out, my wife and I decided to take a picture to commemorate the occasion. A kind gentleman walking by offered to take it for us:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/wifeyCakes.jpg\" role=\"presentation\" srcset=\"../assets/images/wifeyCakes.jpg\" /></p>\n\n<p>Why is that funny? Well, we’re obviously very happy in that picture. So another couple walking by asked, with a beaming expression:</p>\n\n<blockquote>\n  <p>Them: Oh my goodness, did you all just get engaged!?<br />\nMe: No, but Spend Stack got selected as a retail demo on the iPhones…<br />\nThem: &lt; They cut me off, looked at me weird and walked away confused before I could finish &gt;</p>\n</blockquote>\n\n<p>We still laugh about that 😜.</p>\n\n<h3 id=\"other-random-insights\">Other Random Insights</h3>\n\n<ul>\n  <li>I’ve noticed that there are about 3-4 different retail demo “line ups”.</li>\n  <li>…though some are very similar. For example, Spend Stack and Lifesum are mutually exclusive. They show up in the same spot (3rd page, 3rd row, 1st item I think) and if one is there, the other won’t be.</li>\n  <li>Most employees didn’t recall when their retail demo line up refreshed. It appears to be an over the air thing, which makes sense.</li>\n  <li>The timeline from start to finish was about two and a half months.</li>\n  <li>If it’s not already obvious from the article, you don’t apply for the retail demo - Apple proactively reaches out to you.</li>\n  <li>Sales wise it’s been a huge help, as Spend Stack tends to consistently chart since its retail demo release. Before, it tends to dip in and out throughout the month.</li>\n  <li>I go fairly in-depth on all of this, and talk about how my <a href=\"http://localhost:4000/A-Best-in-Class-App\">Best in Class</a> ideals may have helped Spend Stack get selected on an episode of <a href=\"https://podcasts.apple.com/us/podcast/launched/id1491582246#episodeGuid=47cc2b57-c99a-4ced-8609-74270d651bb9\">Launched.fm</a>.</li>\n  <li>Lastly, here’s a <a href=\"https://www.reddit.com/r/apple/comments/f7ugww/apple_selected_my_app_spend_stack_to_be_in_its/?utm_source=share&amp;utm_medium=i\">Reddit</a> post on <code class=\"highlighter-rouge\">r/Apple</code> where I chat about it some more while answering some questions others had.</li>\n</ul>\n\n<h3 id=\"final-thoughts\">Final Thoughts</h3>\n<p>You never know where our little creations will end up. While you toil away night after late night, it’s too easy to end up in that phase of doubt:</p>\n\n<ul>\n  <li>“Will this even matter at all?”</li>\n  <li>“Will it get a few downloads on launch and meekly wither away?”</li>\n</ul>\n\n<p>I’m telling you, I’ve been there. And I have a season pass too, apparently. I revisit that space probably a little too often. You start to look at other apps and their success thinking that your own are always just a day late and a dollar short.</p>\n\n<p>But hey! <strong>Sometimes you get the win!</strong> And when you do, be sure to stop and enjoy it. You never what’s around the corner, who’s paying attention to your app or when you’ll get a random email in December from Apple asking you to put your creation on thousands of iPhones with other carefully curated apps hand picked by them.</p>\n\n<p>So keep on truckin’ on that next great app 💪!</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "Through luck, determination and whatever other stereotypical noble quality you can conjure up, Apple selected Spend Stack to take part in their retail demo program.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2020-03-10T00:00:00-05:00",
            "date_modified": "2020-03-10T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["The Indie Dev Diaries"]},{
            "id": "http://localhost:4000/Master-Detail-Styling",
            "url": "http://localhost:4000/Master-Detail-Styling/",
            "title": "Dynamic Master Detail View Background Colors",
            "content_html": "<p>One of my goals for the next update for Spend Stack was to tighten up the design of master detail scenarios, which are prevalent on macOS and iPadOS:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/mdv_things.png\" role=\"presentation\" srcset=\"../assets/images/mdv_things.png\" /></p>\n\n<p>I’ve noticed that these apps typically have a subtle contrast between the master view and the detail view (though not all, as we’ll see). I decided to follow a similar pattern as well, so I started poking around to see what other apps in the wild did for this kind of thing.</p>\n\n<h3 id=\"the-examples\">The Examples</h3>\n<p>Let’s take a quick tour of how Apple’s stock apps handle the situation:</p>\n\n<p><strong>Notes</strong><br />\n<img class=\"lozad rounded center-img\" data-src=\"../assets/images/mdv_notes.png\" role=\"presentation\" srcset=\"../assets/images/mdv_notes.png\" /></p>\n\n<p><strong>Files</strong><br />\n<img class=\"lozad rounded center-img\" data-src=\"../assets/images/mdv_files.png\" role=\"presentation\" srcset=\"../assets/images/mdv_files.png\" /></p>\n\n<p><strong>News</strong><br />\n<img class=\"lozad rounded center-img\" data-src=\"../assets/images/mdv_news.png\" role=\"presentation\" srcset=\"../assets/images/mdv_news.png\" /></p>\n\n<p><strong>Mail</strong><br />\n<img class=\"lozad rounded center-img\" data-src=\"../assets/images/mdv_mail.png\" role=\"presentation\" srcset=\"../assets/images/mdv_mail.png\" /></p>\n\n<p><strong>Messages</strong><br />\n<img class=\"lozad rounded center-img\" data-src=\"../assets/images/mdv_messages.png\" role=\"presentation\" srcset=\"../assets/images/mdv_messages.png\" /></p>\n\n<p><strong>Reminders</strong><br />\n<img class=\"lozad rounded center-img\" data-src=\"../assets/images/mdv_reminders.png\" role=\"presentation\" srcset=\"../assets/images/mdv_reminders.png\" /></p>\n\n<p>I was surprised to see that quite a few of Cupertino &amp; Friends’© apps tend to use the same background color. Still, Spend Stack’s white on white in this scenario feels a little too jarring.</p>\n\n<h3 id=\"the-implementation\">The Implementation</h3>\n<p>It turns out, this is exactly the kind of task that really eats at you on updates. It was a fleeting thought I had (to address this) and I figured it wouldn’t take more than thirty minutes. In software development, that and similar phrases are always famous last words.</p>\n\n<p>But as someone who took five years to release an app, I figured another shot of feature creep wouldn’t hurt 🤠.</p>\n\n<p>After looking at Xcode’s default master-detail view template (which has no accordances for this kind of thing), I quickly tested things out using <code class=\"highlighter-rouge\">.secondaryBackground</code> for the master view - while keeping the detail view with <code class=\"highlighter-rouge\">.primaryBackground</code>. This is similar to what Mail and Reminders do.</p>\n\n<blockquote>\n  <p>If you aren’t using SwiftUI and want this process to be forty times less painless - trying using the helpful utility app <a href=\"https://apps.apple.com/us/app/adaptivity-a/id1054670022\">Adaptivity</a> to quickly reference colors.</p>\n</blockquote>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">void</span><span class=\"p\">)</span><span class=\"nv\">traitCollectionDidChange</span><span class=\"p\">:(</span><span class=\"kt\">UITraitCollection</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">previousTraitCollection</span>\n<span class=\"p\">{</span>\n    <span class=\"p\">[</span><span class=\"k\">super</span> <span class=\"nv\">traitCollectionDidChange</span><span class=\"p\">:</span><span class=\"n\">previousTraitCollection</span><span class=\"p\">];</span>\n    \n    <span class=\"k\">if</span> <span class=\"p\">([</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">traitCollection</span> <span class=\"nv\">isDifferentThanTraitCollection</span><span class=\"p\">:</span><span class=\"n\">previousTraitCollection</span><span class=\"p\">])</span>\n    <span class=\"p\">{</span>\n        <span class=\"p\">[[</span><span class=\"kt\">NSNotificationCenter</span> <span class=\"n\">defaultCenter</span><span class=\"p\">]</span> <span class=\"nv\">postNotificationName</span><span class=\"p\">:</span><span class=\"kt\">SS_TRAIT_COLLECTION_CHANGED</span> <span class=\"nv\">object</span><span class=\"p\">:</span><span class=\"kc\">nil</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"kt\">UIColor</span> <span class=\"o\">*</span><span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">UIColor</span> <span class=\"n\">systemBackgroundColor</span><span class=\"p\">];</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">traitCollection</span><span class=\"o\">.</span><span class=\"n\">horizontalSizeClass</span> <span class=\"o\">==</span> <span class=\"kt\">UIUserInterfaceSizeClassRegular</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">UIColor</span> <span class=\"n\">secondarySystemBackgroundColor</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">backgroundColor</span> <span class=\"o\">=</span> <span class=\"n\">color</span><span class=\"p\">;</span>\n    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">tableView</span><span class=\"o\">.</span><span class=\"n\">backgroundColor</span> <span class=\"o\">=</span> <span class=\"n\">color</span><span class=\"p\">;</span>\n    <span class=\"c1\">// These methods do pretty much the same as above</span>\n    <span class=\"p\">[</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">toolbar</span> <span class=\"n\">updateBackgroundColor</span><span class=\"p\">];</span>\n    <span class=\"p\">[</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">navigationController</span> <span class=\"n\">updateBackgroundColor</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Which gets me half way there:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/mdv_firstPass.png\" role=\"presentation\" srcset=\"../assets/images/mdv_firstPass.png\" /></p>\n\n<p>Not bad - but the subtleties start to creep in.</p>\n\n<ul>\n  <li>I have to update the table view cells, easier said than done. They look okay in dark mode, but there isn’t enough contrast in light mode.</li>\n  <li>I also have to tackle both the navigation and tool bars (one of which has been busted since iOS 13, throwing me into several apoplectic fits).</li>\n  <li>And, I have to dynamically switch out styles according to trait collection changes.</li>\n</ul>\n\n<p>That last one can be a bit of a sticker. On iPadOS, you can quickly swap between a regular to compact horizontal trait collection for a number of reasons (namely, multitasking scenarios). In this case, I need to swap back and forth between the “old” style and the master view one:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/mdv_switch.png\" role=\"presentation\" srcset=\"../assets/images/mdv_switch.png\" /></p>\n\n<p>This means my navigation, tool bars and master view all need to a get little bit smarter, more configurable or use any other of the other platter of patterns available (delegates, dependency injections, blocks or what have you). These controllers are, as you may have surmised, still written in Objective-C. Regrettably, my new favorite toy, Combine is out of the question.</p>\n\n<p>Alas, as with most of these kinds of tasks within <code class=\"highlighter-rouge\">UIKit</code>, it’s always a hop, skip and a step away from being as simple as checking the device idiom:</p>\n\n<div class=\"language-objc highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">UIColor</span> <span class=\"o\">*</span><span class=\"n\">fill</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">UIColor</span> <span class=\"nf\">systemBackgroundColor</span><span class=\"p\">];</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">view</span><span class=\"p\">.</span><span class=\"n\">window</span><span class=\"p\">.</span><span class=\"n\">traitCollection</span><span class=\"p\">.</span><span class=\"n\">horizontalSizeClass</span> <span class=\"o\">==</span> <span class=\"n\">UIUserInterfaceSizeClassRegular</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">fill</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">UIColor</span> <span class=\"nf\">secondarySystemBackgroundColor</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">UINavigationBarAppearance</span> <span class=\"o\">*</span><span class=\"n\">navBarAppearance</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">UINavigationBarAppearance</span> <span class=\"nf\">new</span><span class=\"p\">];</span>\n<span class=\"p\">[</span><span class=\"n\">navBarAppearance</span> <span class=\"nf\">configureWithOpaqueBackground</span><span class=\"p\">];</span>\n<span class=\"n\">navBarAppearance</span><span class=\"p\">.</span><span class=\"n\">backgroundColor</span> <span class=\"o\">=</span> <span class=\"n\">fill</span><span class=\"p\">;</span>\n<span class=\"n\">navBarAppearance</span><span class=\"p\">.</span><span class=\"n\">largeTitleTextAttributes</span> <span class=\"o\">=</span> <span class=\"p\">@{</span><span class=\"n\">NSForegroundColorAttributeName</span><span class=\"o\">:</span><span class=\"p\">[</span><span class=\"n\">UIColor</span> <span class=\"nf\">ssMainFontColor</span><span class=\"p\">]};</span>\n<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">navigationBar</span><span class=\"p\">.</span><span class=\"n\">standardAppearance</span> <span class=\"o\">=</span> <span class=\"n\">navBarAppearance</span><span class=\"p\">;</span>\n<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">navigationBar</span><span class=\"p\">.</span><span class=\"n\">compactAppearance</span> <span class=\"o\">=</span> <span class=\"n\">navBarAppearance</span><span class=\"p\">;</span>\n<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">navigationBar</span><span class=\"p\">.</span><span class=\"n\">scrollEdgeAppearance</span> <span class=\"o\">=</span> <span class=\"n\">navBarAppearance</span><span class=\"p\">;</span>\n\n<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">navigationBar</span><span class=\"p\">.</span><span class=\"n\">barTintColor</span> <span class=\"o\">=</span> <span class=\"n\">fill</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Avoid bleed on push/pop</span>\n<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">view</span><span class=\"p\">.</span><span class=\"n\">backgroundColor</span> <span class=\"o\">=</span> <span class=\"n\">navBarAppearance</span><span class=\"p\">.</span><span class=\"n\">backgroundColor</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>That gets me closer, but I either have to propagate those changes to the table cell or check in their trait collection change events as well (the latter seems to be more appropriate, though I’ve yet to get that far yet).</p>\n\n<p>There are many places where I don’t want to occur, such as modals:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/mdv_modal.png\" role=\"presentation\" srcset=\"../assets/images/mdv_modal.png\" /></p>\n\n<p>Worse yet, my navigation and toolbars are all jank-town now. That’s to be expected (as to this point, I’ve just hardcoded a new color in) but I feel like navigation bar’s new API never quite does what I expect it to. For the life of me, I can’t quite get my navigation bar to respect my <code class=\"highlighter-rouge\">UINavigationBarAppearance</code> choices until it lays out its subviews.</p>\n\n<p>Here, I purposely want the navigation bar to reflect the “old” styling, yet it doesn’t update until it does another layout pass:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/mdv_nav.gif\" role=\"presentation\" srcset=\"../assets/images/mdv_nav.gif\" /></p>\n\n<p>I use a subclassed <code class=\"highlighter-rouge\">UINavigationBar</code> throughout Spend Stack (same for the toolbar) and I won’t always want this behavior, so it’s not as simple as trait collection bookkeeping. For now, I’m leaning towards a simple <code class=\"highlighter-rouge\">bool</code> flag to pipe right into the initializer since I style each of them there, far earlier than any trait collection change might occur.</p>\n\n<p>We’ll see what happens, and of course - I’ll have the final product in the next version of Spend Stack, version 1.2.</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "One of my goals for the next update for Spend Stack was to tighten up the design of master detail scenarios, which are prevalent on macOS and iPadOS:",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2020-02-05T00:00:00-06:00",
            "date_modified": "2020-02-05T00:00:00-06:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Tech Notes"]},{
            "id": "http://localhost:4000/CollectionDifference",
            "url": "http://localhost:4000/CollectionDifference/",
            "title": "CollectionDifference",
            "content_html": "<p>In the not so distant past, it was a foregone conclusion that developers would eventually fall back to the jackhammer when it came to table or collection views: <code class=\"highlighter-rouge\">reloadData</code>.</p>\n\n<p>The reasons why were simple:</p>\n\n<p>1) Getting a diff of what’s changed in your data was hard, and <br />\n2) Mapping that with the right index paths was even harder.</p>\n\n<p>But the payoff was always worth it, a buttery smooth batch reload in your interface. And hey - you can’t make an omelet without crackin’ a few eggs.</p>\n\n<p>Fast forward to today, and we can thankfully say that WWDC 2019 mercifully addressed both pain points. Today, let’s take a look at <code class=\"highlighter-rouge\">CollectionDifference</code>, a lightweight way to calculate the once elusive diff mentioned in reason #1 above.</p>\n\n<h3 id=\"the-little-struct-that-could\">The Little Struct That Could</h3>\n<p><code class=\"highlighter-rouge\">CollectionDifference</code> arrived in Swift 5.1 by way of <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0240-ordered-collection-diffing.md\">SE-0240</a>. Authors Scott Perry and Kyle Macomber wanted a way to “provide an interchange format for diffs as well as diffing/patching functionality for appropriate collection types.”</p>\n\n<p>Perhaps the most telling part of their proposal, though, is where they state the following:</p>\n\n<blockquote>\n  <p>“Representing, manufacturing, and applying transactions between states today requires writing a lot of error-prone code.”</p>\n</blockquote>\n\n<p>You don’t say.</p>\n\n<p>Thankfully, they took the problem to task and what we arrive at is <code class=\"highlighter-rouge\">CollectionDifference</code> - a struct that houses insertions and removals that describe the delta between two ordered collections:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">CollectionDifference</span><span class=\"o\">&lt;</span><span class=\"kt\">ChangeElement</span><span class=\"o\">&gt;</span>\n</code></pre></div></div>\n\n<p>Perhaps the highest compliment I can extend it is that the API is easy on the eyes (uncommon for diffing libraries). As we’ll see, it’s typically a one or two line affair to get a diff and apply it, context depending.</p>\n\n<blockquote>\n  <p>Keep in mind this diffing capability is for <em>ordered</em> collections only. In Swift, this is any collection conforming <a href=\"https://developer.apple.com/documentation/swift/bidirectionalcollection\"><code class=\"highlighter-rouge\">BidirectionalCollection</code></a>.</p>\n</blockquote>\n\n<p>Performance-wise, the worst you can expect is O(n * m) - where <em>n</em> represents the count of the first collection, and <em>m</em> the other. You do have some influence here. If your elements conform to <code class=\"highlighter-rouge\">Hashable</code> (and why the heck wouldn’t they - we got diffable data source this year which requires it) or the collection share many common elements, expect the diff to perform better.</p>\n\n<p>Either way, since Swift is an ever-mutating project, the diffing performance has <a href=\"https://github.com/apple/swift/pull/25808\">already been improved</a> from its first incarnation by utilizing the <a href=\"http://www.xmailserver.org/diff2.pdf\">Myers algorithm</a>.</p>\n\n<h3 id=\"diffin\">Diffin’</h3>\n<p>As an API consumer, if one simply needs to diff something and move about their day, then there are two essential functions to know about which are invoked from the collections themselves:</p>\n\n<p><code class=\"highlighter-rouge\">difference(from:)</code></p>\n\n<p>and</p>\n\n<p><code class=\"highlighter-rouge\">applying(_)</code></p>\n\n<p>One to generate a diff (giving us a <code class=\"highlighter-rouge\">CollectionDifference</code>) and one to get the result of the diff by passing it in as a parameter:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">firstDraft</span> <span class=\"o\">=</span> <span class=\"s\">\"It was the best of times...\"</span>\n<span class=\"k\">let</span> <span class=\"nv\">secondDraft</span> <span class=\"o\">=</span> <span class=\"s\">\"It was the worst of times...\"</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">diff</span> <span class=\"o\">=</span> <span class=\"n\">secondDraft</span><span class=\"o\">.</span><span class=\"nf\">difference</span><span class=\"p\">(</span><span class=\"nv\">from</span><span class=\"p\">:</span><span class=\"n\">firstDraft</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">finalDraft</span> <span class=\"o\">=</span> <span class=\"n\">firstDraft</span><span class=\"o\">.</span><span class=\"nf\">applying</span><span class=\"p\">(</span><span class=\"n\">diff</span><span class=\"p\">)</span> <span class=\"c1\">// \"It was the worst of times...\"</span>\n\n<span class=\"c1\">// Or, reverse that</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">diff</span> <span class=\"o\">=</span> <span class=\"n\">firstDraft</span><span class=\"o\">.</span><span class=\"nf\">difference</span><span class=\"p\">(</span><span class=\"nv\">from</span><span class=\"p\">:</span><span class=\"n\">secondDraft</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">finalDraft</span> <span class=\"o\">=</span> <span class=\"n\">secondDraft</span><span class=\"o\">.</span><span class=\"nf\">applying</span><span class=\"p\">(</span><span class=\"n\">diff</span><span class=\"p\">)</span> <span class=\"c1\">// \"It was the best of times...\"</span>\n</code></pre></div></div>\n<p>Also note that if you need to finely tune the diff, you can also supply a closure to return a boolean based on your own equality standards:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">foo</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"k\">let</span> <span class=\"nv\">bar</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">diff</span> <span class=\"o\">=</span> <span class=\"n\">bar</span><span class=\"o\">.</span><span class=\"nf\">difference</span><span class=\"p\">(</span><span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"n\">foo</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">oldNum</span><span class=\"p\">,</span> <span class=\"n\">newNum</span> <span class=\"k\">in</span>\n    <span class=\"nf\">return</span> <span class=\"p\">(</span><span class=\"n\">oldNum</span> <span class=\"o\">+</span> <span class=\"n\">newNum</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The flow is identifying what you want to compare, and then getting the results of the diff into a data structure to operate on. If that’s all you need from <code class=\"highlighter-rouge\">CollectionDifference</code>, then you can hang it up and call it a day. For the curious among us, let’s look a little deeper.</p>\n\n<h3 id=\"change-enum\">Change Enum</h3>\n<p>A <code class=\"highlighter-rouge\">CollectionDifference</code> houses changes as represented by the <code class=\"highlighter-rouge\">Change</code> enum. And, since Swift’s enums are drunk with power, they house three important parts of the diff:</p>\n\n<p>1) An <code class=\"highlighter-rouge\">offset</code> Int. <br />\n2) The <code class=\"highlighter-rouge\">element</code> itself. <br />\n3) An optional Int, <code class=\"highlighter-rouge\">associatedWith</code>, that helps you track moves.</p>\n\n<p>The last one is both interesting and important. In the diff, if it moved an existing element - that’s actually a two-step dance. It’s first a removal, and then an insertion. What <code class=\"highlighter-rouge\">associatedWith</code> does it track the relationship between the two. This opens up some very nice UIKit-y scenarios.</p>\n\n<p>This, however, requires a bit more work from a performance standpoint - thus the optional Int. We don’t get very many free lunches in programming, and doubly so when it comes to diffing. So, if we want the associations, we ask for them by invoking <code class=\"highlighter-rouge\">inferringMoves</code>.</p>\n\n<p>For example, notice the association (represented by <code class=\"highlighter-rouge\">move</code>) is nil in the following print statements:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">foo</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"A\"</span><span class=\"p\">,</span> <span class=\"s\">\"B\"</span><span class=\"p\">,</span> <span class=\"s\">\"D\"</span><span class=\"p\">]</span>\n<span class=\"k\">let</span> <span class=\"nv\">bar</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"B\"</span><span class=\"p\">,</span> <span class=\"s\">\"A\"</span><span class=\"p\">,</span> <span class=\"s\">\"D\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">diff</span> <span class=\"o\">=</span> <span class=\"n\">bar</span><span class=\"o\">.</span><span class=\"nf\">difference</span><span class=\"p\">(</span><span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"n\">foo</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">update</span> <span class=\"k\">in</span> <span class=\"n\">diff</span> <span class=\"p\">{</span>\n    <span class=\"k\">switch</span> <span class=\"n\">update</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"nv\">offset</span><span class=\"p\">,</span> <span class=\"k\">let</span> <span class=\"nv\">letter</span><span class=\"p\">,</span> <span class=\"k\">let</span> <span class=\"nv\">move</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Removed </span><span class=\"se\">\\(</span><span class=\"n\">letter</span><span class=\"se\">)</span><span class=\"s\"> at idx </span><span class=\"se\">\\(</span><span class=\"n\">offset</span><span class=\"se\">)</span><span class=\"s\"> and moved to </span><span class=\"se\">\\(</span><span class=\"kt\">String</span><span class=\"p\">(</span><span class=\"nv\">describing</span><span class=\"p\">:</span> <span class=\"n\">move</span><span class=\"p\">)</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"nv\">offset</span><span class=\"p\">,</span> <span class=\"k\">let</span> <span class=\"nv\">letter</span><span class=\"p\">,</span> <span class=\"k\">let</span> <span class=\"nv\">move</span><span class=\"p\">):</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Inserted </span><span class=\"se\">\\(</span><span class=\"n\">letter</span><span class=\"se\">)</span><span class=\"s\"> at idx </span><span class=\"se\">\\(</span><span class=\"n\">offset</span><span class=\"se\">)</span><span class=\"s\"> from </span><span class=\"se\">\\(</span><span class=\"kt\">String</span><span class=\"p\">(</span><span class=\"nv\">describing</span><span class=\"p\">:</span> <span class=\"n\">move</span><span class=\"p\">)</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"cm\">/* Prints\nRemoved A at idx 0 and moved to nil\nInserted A at idx 1 from nil\n*/</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">baz</span> <span class=\"o\">=</span> <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"nf\">applying</span><span class=\"p\">(</span><span class=\"n\">diff</span><span class=\"p\">)</span> <span class=\"c1\">// [\"Z\", \"A\", \"C\"]</span>\n</code></pre></div></div>\n<p>The diff simply tells us that “A” at index 0 was removed, and “A” was inserted at index 1. But it doesn’t tell us about any potential moves, just the end result. This makes sense because we’re left with the true, and accurate, diff - so from an API perspective we shouldn’t opt in to that extra work if it’s not needed.</p>\n\n<p>If we do need it, notice how we get the associations by way of <code class=\"highlighter-rouge\">inferringMoves</code>. Consider the exact code above, just with one changes in the for-loop:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">update</span> <span class=\"k\">in</span> <span class=\"n\">diff</span><span class=\"o\">.</span><span class=\"n\">inferringMoves</span> <span class=\"p\">{</span> <span class=\"cm\">/* code */</span> <span class=\"p\">}</span>\n\n<span class=\"cm\">/* Now prints\nRemoved A at idx 0 and moved to 1\nInserted A at idx 1 from 0\n*/</span>\n</code></pre></div></div>\n<p>Now, we can safely program against the moves.</p>\n\n<h3 id=\"applications\">Applications</h3>\n<p>While playing around with diffing, I toyed with a few applications for UIKit.</p>\n\n<p><strong>Batch Updates</strong><br />\nIf you’re unable to move to <a href=\"http://localhost:4000/Diffable-Datasource-Empty-View\">diffable data source</a>, or you’re just a complete glutton for pain - you can reasonably backport a diffing function with a little legwork for table and collection views. Since we know a non-nil association represents a move, we can map these over to index paths.</p>\n\n<p>For a single section table view, something like this works to produce a batch update:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">var</span> <span class=\"nv\">deletes</span><span class=\"p\">:[</span><span class=\"kt\">IndexPath</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">var</span> <span class=\"nv\">inserts</span><span class=\"p\">:[</span><span class=\"kt\">IndexPath</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">var</span> <span class=\"nv\">moves</span><span class=\"p\">:[(</span><span class=\"nv\">from</span><span class=\"p\">:</span><span class=\"kt\">IndexPath</span><span class=\"p\">,</span> <span class=\"nv\">to</span><span class=\"p\">:</span><span class=\"kt\">IndexPath</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">update</span> <span class=\"k\">in</span> <span class=\"n\">diff</span><span class=\"o\">.</span><span class=\"nf\">inferringMoves</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">switch</span> <span class=\"n\">update</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"nv\">offset</span><span class=\"p\">,</span> <span class=\"k\">let</span> <span class=\"nv\">element</span><span class=\"p\">,</span> <span class=\"k\">let</span> <span class=\"nv\">move</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">m</span> <span class=\"o\">=</span> <span class=\"n\">move</span> <span class=\"p\">{</span>\n            <span class=\"n\">moves</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">((</span><span class=\"kt\">IndexPath</span><span class=\"p\">(</span><span class=\"nv\">row</span><span class=\"p\">:</span> <span class=\"n\">offset</span><span class=\"p\">,</span> <span class=\"nv\">section</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"kt\">IndexPath</span><span class=\"p\">(</span><span class=\"nv\">row</span><span class=\"p\">:</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"nv\">section</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">deletes</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"kt\">IndexPath</span><span class=\"p\">(</span><span class=\"nv\">row</span><span class=\"p\">:</span> <span class=\"n\">offset</span><span class=\"p\">,</span> <span class=\"nv\">section</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n        <span class=\"p\">}</span>\n    <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"nv\">offset</span><span class=\"p\">,</span> <span class=\"k\">let</span> <span class=\"nv\">element</span><span class=\"p\">,</span> <span class=\"k\">let</span> <span class=\"nv\">move</span><span class=\"p\">):</span>\n        <span class=\"c1\">// If there's no move, it's a true insertion and not the result of a move.</span>\n        <span class=\"k\">if</span> <span class=\"n\">move</span> <span class=\"o\">==</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n            <span class=\"n\">inserts</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"kt\">IndexPath</span><span class=\"p\">(</span><span class=\"nv\">row</span><span class=\"p\">:</span> <span class=\"n\">offset</span><span class=\"p\">,</span> <span class=\"nv\">section</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">tableView</span><span class=\"o\">.</span><span class=\"nf\">performBatchUpdates</span><span class=\"p\">({</span>\n    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">myData</span> <span class=\"o\">=</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">myData</span><span class=\"o\">.</span><span class=\"nf\">applying</span><span class=\"p\">(</span><span class=\"n\">diff</span><span class=\"p\">)</span> <span class=\"p\">??</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">tableView</span><span class=\"o\">.</span><span class=\"nf\">deleteRows</span><span class=\"p\">(</span><span class=\"nv\">at</span><span class=\"p\">:</span> <span class=\"n\">deletes</span><span class=\"p\">,</span> <span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">)</span>\n    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">tableView</span><span class=\"o\">.</span><span class=\"nf\">insertRows</span><span class=\"p\">(</span><span class=\"nv\">at</span><span class=\"p\">:</span> <span class=\"n\">inserts</span><span class=\"p\">,</span> <span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">)</span>\n    \n    <span class=\"n\">moves</span><span class=\"o\">.</span><span class=\"n\">forEach</span> <span class=\"p\">{</span> <span class=\"n\">move</span> <span class=\"k\">in</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">tableView</span><span class=\"o\">.</span><span class=\"nf\">moveRow</span><span class=\"p\">(</span><span class=\"nv\">at</span><span class=\"p\">:</span> <span class=\"n\">move</span><span class=\"o\">.</span><span class=\"n\">from</span><span class=\"p\">,</span> <span class=\"nv\">to</span><span class=\"p\">:</span> <span class=\"n\">move</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    \n<span class=\"p\">},</span> <span class=\"nv\">completion</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Trying that out on a little demo app, sure enough - I was treated to batch reloads. This process was painless compared to the hoops you had to ceremoniously jump through before, and then crash on edges cases while devolving back into our burn-it-all-down ways of <code class=\"highlighter-rouge\">reloadData</code>:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/batch.gif\" role=\"presentation\" srcset=\"../assets/images/batch.gif\" /></p>\n\n<p><strong>Fresh Interfaces</strong><br />\nAnother way to give your interface a dash of that <em>je ne sais quoi</em> is to accurately represent the changes occuring with interface data. Think of an inbox type scenario where the user has seen X items, but Y items just came in from a network hit:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">currentItems</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"k\">let</span> <span class=\"nv\">newItems</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">diff</span> <span class=\"o\">=</span> <span class=\"n\">newItems</span><span class=\"o\">.</span><span class=\"nf\">difference</span><span class=\"p\">(</span><span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"n\">currentItems</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">newCount</span> <span class=\"o\">=</span> <span class=\"n\">diff</span><span class=\"o\">.</span><span class=\"n\">insertions</span><span class=\"o\">.</span><span class=\"n\">count</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\(</span><span class=\"n\">newCount</span><span class=\"se\">)</span><span class=\"s\"> new items.\"</span><span class=\"p\">)</span> <span class=\"c1\">// 3 new items</span>\n\n<span class=\"n\">label</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s\">\"</span><span class=\"se\">\\(</span><span class=\"n\">newCount</span><span class=\"se\">)</span><span class=\"s\"> new items to view.\"</span>\n</code></pre></div></div>\n\n<h3 id=\"final-thoughts\">Final Thoughts</h3>\n<p>Swift continues to benefit from a lot of talented engineers lending their handy work to the language. There is no denying that Cupertino &amp; Friends’© open-source initiative has led to brilliant work from engineers outside their walls to be enjoyed by the masses. <code class=\"highlighter-rouge\">CollectionDifference</code> is a textbook example.</p>\n\n<p>Now, go forth and serve up diffs with a newfound level of equanimity as you do so.</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "In the not so distant past, it was a foregone conclusion that developers would eventually fall back to the jackhammer when it came to table or collection views: reloadData.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2020-01-29T00:00:00-06:00",
            "date_modified": "2020-01-29T00:00:00-06:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Swift"]},{
            "id": "http://localhost:4000/Diffable-Datasource-Empty-View",
            "url": "http://localhost:4000/Diffable-Datasource-Empty-View/",
            "title": "Empty View With Diffable Datasource",
            "content_html": "<p>Among my favorite APIs introduced at W.W.D.C. is without a doubt the new diffable data source for both <a href=\"https://developer.apple.com/documentation/uikit/views_and_controls/collection_views/\" target=\"_blank\">table and collection views</a>. Replacing a decade old protocol, it brings about a robust way of expressing what should show when, where the truth is and, <em>finally</em>, a way to forgo the death trap that is batch updates.</p>\n\n<p>While rewriting the list view of Spend Stack, I immediately become aware of its benefits:</p>\n\n<div class=\"jekyll-twitter-plugin\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Diffable data source is just bonkers. Literally ripping out 100s of lines of code I had to do batch updates.<br /><br />Just look at the before and after code, look at it 😆! Free beers for <a href=\"https://twitter.com/_breeno?ref_src=twsrc%5Etfw\">@_breeno</a> and friends next dub dub 🍻 <a href=\"https://t.co/Du17rdxM3t\">pic.twitter.com/Du17rdxM3t</a></p>&mdash; Jordan Morgan (@JordanMorgan10) <a href=\"https://twitter.com/JordanMorgan10/status/1217622139718774784?ref_src=twsrc%5Etfw\">January 16, 2020</a></blockquote>\n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div>\n\n<p>As far as user experience, batch updates are far superior to the sledgehammer approach of <code class=\"highlighter-rouge\">reloadData</code>, so this is a needed step forward. But, that’s only part of it. I’m personally a believer in showing “empty view” states, and if you peek into Apple’s stock apps - they are too. Here’s an example of a bag with no items in the Apple Store app:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/empty.jpeg\" role=\"presentation\" srcset=\"../assets/images/empty.jpeg\" /></p>\n\n<p>Previously, I used associated objects and the <a href=\"https://gist.github.com/DreamingInBinary/e4218c00dbeff815e26426af402ca2ad\" target=\"_blank\">Objective-C Funtime to do the same thing</a> in Spend Stack:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/emptySS.jpeg\" role=\"presentation\" srcset=\"../assets/images/emptySS.jpeg\" /></p>\n\n<p>But hey - I’m being all <em>swifty</em> now, right? So I’ve been thinking about how to do the same with my new bestie, diffable data source while forgoing swizzling. Here’s what I’ve got so far:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">createSubscriptions</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">nc</span> <span class=\"o\">=</span> <span class=\"kt\">NotificationCenter</span><span class=\"o\">.</span><span class=\"k\">default</span>\n\n    <span class=\"c1\">// Other subs..</span>\n\n    <span class=\"c1\">// The one when a list is mutated</span>\n    <span class=\"k\">let</span> <span class=\"nv\">tvAnim</span> <span class=\"o\">=</span> <span class=\"kt\">Int</span><span class=\"p\">(</span><span class=\"kt\">SSTableViewBatchUpdateAnimation</span><span class=\"p\">)</span>\n    <span class=\"k\">let</span> <span class=\"nv\">listCRUD</span> <span class=\"o\">=</span> <span class=\"n\">nc</span><span class=\"o\">.</span><span class=\"nf\">publisher</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">listCRUD</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">compactMap</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">object</span> <span class=\"k\">as?</span> <span class=\"kt\">SSList</span> <span class=\"p\">}</span>\n    <span class=\"o\">.</span><span class=\"nf\">debounce</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">milliseconds</span><span class=\"p\">(</span><span class=\"n\">tvAnim</span><span class=\"p\">),</span> <span class=\"nv\">scheduler</span><span class=\"p\">:</span> <span class=\"kt\">RunLoop</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">sink</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"k\">unowned</span> <span class=\"k\">self</span><span class=\"p\">]</span> <span class=\"n\">list</span> <span class=\"k\">in</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">showEmptyViewIfNeeded</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"n\">subscriptions</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">listCRUD</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This function runs when I initialize my subclassed diffable data source (to provide for things like <code class=\"highlighter-rouge\">tableView(_ tableView: UITableView, moveRowAt sourceIndexPath:, to:)</code>). When Combine fires off the closure, I simply check if the data is empty:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">showEmptyViewIfNeeded</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">view</span> <span class=\"o\">=</span> <span class=\"n\">emptyView</span><span class=\"p\">,</span> <span class=\"k\">let</span> <span class=\"nv\">tv</span> <span class=\"o\">=</span> <span class=\"n\">tableView</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"p\">}</span>\n    <span class=\"k\">let</span> <span class=\"nv\">shouldShow</span> <span class=\"o\">=</span> <span class=\"nf\">snapshot</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">itemIdentifiers</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">superview</span> <span class=\"o\">==</span> <span class=\"kc\">nil</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">shouldShow</span> <span class=\"p\">{</span>\n        <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">vc</span> <span class=\"o\">=</span> <span class=\"n\">tv</span><span class=\"o\">.</span><span class=\"nf\">closestViewController</span><span class=\"p\">()</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"p\">}</span>\n        <span class=\"n\">vc</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"nf\">addSubview</span><span class=\"p\">(</span><span class=\"n\">view</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">constraints</span> <span class=\"o\">=</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">emptyViewConstraints</span> <span class=\"p\">{</span>\n            <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">snp</span><span class=\"o\">.</span><span class=\"n\">remakeConstraints</span> <span class=\"p\">{</span> <span class=\"n\">make</span> <span class=\"k\">in</span>\n                <span class=\"nf\">constraints</span><span class=\"p\">(</span><span class=\"n\">make</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"nf\">removeFromSuperview</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This all works, but there are some things that need to improve. Notably, there are two core properties on my data source that need to be abstracted out in some fashion:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Properties on data source object</span>\n<span class=\"k\">var</span> <span class=\"nv\">emptyView</span><span class=\"p\">:</span><span class=\"kt\">UIView</span><span class=\"p\">?</span>\n<span class=\"k\">var</span> <span class=\"nv\">emptyViewConstraints</span><span class=\"p\">:((</span><span class=\"n\">_</span> <span class=\"nv\">make</span><span class=\"p\">:</span> <span class=\"kt\">ConstraintMaker</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)?</span>\n\n<span class=\"c1\">// Then later on, when initializing in a view controller or something similar</span>\n<span class=\"n\">dataSource</span><span class=\"o\">.</span><span class=\"n\">emptyView</span> <span class=\"o\">=</span> <span class=\"kt\">SSEmptyStateView</span><span class=\"p\">(</span><span class=\"nv\">stateText</span><span class=\"p\">:</span> <span class=\"nf\">ss_Localized</span><span class=\"p\">(</span><span class=\"s\">\"list.vc.empty\"</span><span class=\"p\">))</span>\n<span class=\"n\">dataSource</span><span class=\"o\">.</span><span class=\"n\">emptyViewConstraints</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"k\">unowned</span> <span class=\"k\">self</span><span class=\"p\">]</span> <span class=\"n\">make</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"nv\">lg</span> <span class=\"o\">=</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">safeAreaLayoutGuide</span>\n    <span class=\"n\">make</span><span class=\"o\">.</span><span class=\"n\">top</span><span class=\"o\">.</span><span class=\"nf\">equalTo</span><span class=\"p\">(</span><span class=\"n\">lg</span><span class=\"o\">.</span><span class=\"n\">snp</span><span class=\"o\">.</span><span class=\"n\">top</span><span class=\"p\">)</span>\n    <span class=\"n\">make</span><span class=\"o\">.</span><span class=\"n\">bottom</span><span class=\"o\">.</span><span class=\"nf\">equalTo</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">toolBar</span><span class=\"o\">.</span><span class=\"n\">snp</span><span class=\"o\">.</span><span class=\"n\">top</span><span class=\"p\">)</span>\n    <span class=\"n\">make</span><span class=\"o\">.</span><span class=\"n\">centerX</span><span class=\"o\">.</span><span class=\"nf\">equalTo</span><span class=\"p\">(</span><span class=\"n\">lg</span><span class=\"o\">.</span><span class=\"n\">snp</span><span class=\"o\">.</span><span class=\"n\">centerX</span><span class=\"p\">)</span>\n    <span class=\"n\">make</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">.</span><span class=\"nf\">equalTo</span><span class=\"p\">(</span><span class=\"n\">lg</span><span class=\"o\">.</span><span class=\"n\">snp</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Currently, the empty data view only works with this particular instance. I already know I’ll need it for the rest of the app, too. As I mentioned above, in Objective-C I have an <code class=\"highlighter-rouge\">EmptyDataSetDelegate</code> protocol which is tacked onto any collection or table view via associated objects.</p>\n\n<p>I <em>could</em> do something similar, I suppose. Here are some thoughts so far.</p>\n\n<p>I could use a protocol so other types could do something similar:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">protocol</span> <span class=\"kt\">EmptyDataViewProviding</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">emptyView</span><span class=\"p\">:</span><span class=\"kt\">UIView</span><span class=\"p\">?</span> <span class=\"p\">{</span> <span class=\"k\">get</span> <span class=\"k\">set</span> <span class=\"p\">}</span>\n    <span class=\"k\">var</span> <span class=\"nv\">emptyViewConstraints</span><span class=\"p\">:((</span><span class=\"n\">_</span> <span class=\"nv\">make</span><span class=\"p\">:</span> <span class=\"kt\">ConstraintMaker</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)?</span> <span class=\"p\">{</span> <span class=\"k\">get</span> <span class=\"k\">set</span> <span class=\"p\">}</span>\n    \n    <span class=\"kd\">func</span> <span class=\"nf\">showEmptyDataView</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>Plus, with protocol extensions I could vend a default implementation.</p>\n\n<p>Next, I could simply extend the type. But without associated objects, I’d lose the two properties I need that describe the view and how it should be constrained.</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">UITableViewDiffableDataSource</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">showEmptyView</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"nf\">snapshot</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">itemIdentifiers</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// Do stuff</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>At first, I attempted this route by trying to include the properties using a property wrapper implementation, but that’s not allowed in extensions as far as I can tell:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">UITableViewDiffableDataSource</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@AssociatedObject</span> <span class=\"nv\">var</span><span class=\"p\">:</span><span class=\"n\">emptyView</span><span class=\"p\">?</span>\n    <span class=\"kd\">@AssociatedObject</span> <span class=\"nv\">var</span><span class=\"p\">:</span><span class=\"nv\">emptyViewConstraints</span><span class=\"p\">:((</span><span class=\"n\">_</span> <span class=\"nv\">make</span><span class=\"p\">:</span> <span class=\"kt\">ConstraintMaker</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)?</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">showEmptyView</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"nf\">snapshot</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">itemIdentifiers</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// Do stuff</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Or, perhaps plain old object oriented programming is the answer? Simply a base type that others extend. <a href=\"https://developer.apple.com/videos/play/wwdc2015/408/\">Krusty</a> would be so disappointed in me though.</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">BaseDiffable</span> <span class=\"p\">:</span> <span class=\"kt\">UITableViewDiffableDataSource</span><span class=\"o\">&lt;</span><span class=\"kt\">SSListTag</span><span class=\"p\">,</span> <span class=\"kt\">SSListItem</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">emptyView</span><span class=\"p\">:</span><span class=\"kt\">UIView</span><span class=\"p\">?</span>\n    <span class=\"k\">var</span> <span class=\"nv\">emptyViewConstraints</span><span class=\"p\">:((</span><span class=\"n\">_</span> <span class=\"nv\">make</span><span class=\"p\">:</span> <span class=\"kt\">ConstraintMaker</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)?</span>\n    \n    <span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">snapshot</span><span class=\"p\">:</span> <span class=\"kt\">NSDiffableDataSourceSnapshot</span><span class=\"o\">&lt;</span><span class=\"kt\">SSListTag</span><span class=\"p\">,</span> <span class=\"kt\">SSListItem</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nv\">animatingDifferences</span><span class=\"p\">:</span> <span class=\"kt\">Bool</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nv\">completion</span><span class=\"p\">:</span> <span class=\"p\">(()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)?</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"n\">snapshot</span><span class=\"p\">,</span> <span class=\"nv\">animatingDifferences</span><span class=\"p\">:</span><span class=\"n\">animatingDifferences</span><span class=\"p\">,</span> <span class=\"nv\">completion</span><span class=\"p\">:</span> <span class=\"n\">completion</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">itemIdentifiers</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// Show empty view</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>I can’t decide which I like the most. In the end, my existing Objective-C solution bridges over fine, but if I can avoid swizzling batch updates, I will.</p>\n\n<p>I’ll follow up on Twitter with where I end up.</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "Among my favorite APIs introduced at W.W.D.C. is without a doubt the new diffable data source for both table and collection views. Replacing a decade old protocol, it brings about a robust way of expressing what should show when, where the truth is and, finally, a way to forgo the death trap that is batch updates.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2020-01-22T00:00:00-06:00",
            "date_modified": "2020-01-22T00:00:00-06:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Tech Notes"]},{
            "id": "http://localhost:4000/Spend-Stack-Best-In-Class",
            "url": "http://localhost:4000/Spend-Stack-Best-In-Class/",
            "title": "A Best In Class App: Spend Stack Checkup",
            "content_html": "<p>Previously, I’ve written about this notion of what it looks like to be a <a href=\"http://localhost:4000/A-Best-in-Class-App\" target=\"_blank\">best in class iOS app</a>. I wanted a tangible, written down list that I could reference to gauge whether or not I was being a good platform citizen with my own apps.</p>\n\n<p>Now, months later - how am I doing by my own definition? Let’s take a look at where I stand. The grades below have been pulled from the Best in Class post, but some have been altered, added or left out to only include items that can be answered with a yes or no answer as it pertains to Spend Stack.</p>\n\n<blockquote>\n  <p>With each subsequent release, I’ll be updating my progress.</p>\n</blockquote>\n\n<div class=\"infoContainer\">\n    <small>So far, Spend Stack is...</small>\n    <b style=\"font-size: calc(36px + 1.5vw);\">55%</b>\n    <small>...of the way towards a best in class app (48/87).</small>\n    <div class=\"centerFlex\">\n        <div class=\"smallInfoContainer\">\n            <b>Accessibility</b>\n            <small>47% (9/19)</small>\n        </div>\n        <div class=\"smallInfoContainer\">\n            <b>Platform</b>\n            <small>39% (11/28)</small>\n        </div>\n        <div class=\"smallInfoContainer\">\n            <b>U.X.</b>\n            <small>80% (16/20)</small>\n        </div>\n        <div class=\"smallInfoContainer\">\n            <b>Design</b>\n            <small>77% (10/13)</small>\n        </div>\n        <div class=\"smallInfoContainer\">\n            <b>App Store</b>\n            <small>50% (2/4)</small>\n        </div>\n    </div>\n</div>\n\n<h3 id=\"accessibility\">Accessibility</h3>\n<p>◎ Voice Over fully supported. <br />\n◎ Voice Control fully supported. <br />\n◎ Voice Over Gestures supported where needed (Magic tap, escape, etc.) <br />\n◎ <code class=\"highlighter-rouge\">accessibilityIgnoresInvertColors</code> where needed. <br />\n◉ Respects reduced motion and blurring where needed. <br />\n◉ Adaptive to all content sizes (i.e. dynamic type). <br />\n◉ Uses <code class=\"highlighter-rouge\">readableContentGuide</code> for view that are predominantly text based. <br />\n◎ Color contrast is 7:1 or better. <br />\n◉ Supported smart color inversion elegantly. <br />\n◉ Bar button items supply a crisp landscape and large content size image. <br />\n◉ Glyphs have their <code class=\"highlighter-rouge\">adjustsImageSizeForAccessibilityContentSizeCategory</code> set. <br />\n◉ Includes closed captions and audio descriptions, all images and icons have alternative text set. <br />\n◎ Leading and trailing margins are used for constraints to support left to right languages.  <br />\n◎ The User Interface appears flawlessly when tested using Double Length Pseudo-languages.  <br />\n◉ Using <code class=\"highlighter-rouge\">NSShowNonLocalizedStrings</code> yields no results.  <br />\n◎ If you support drag and drop, <code class=\"highlighter-rouge\">UIAccessibilityLocationDescriptors</code> are all set.  <br />\n◎ Magic taps are supported for the app’s most common functionality.  <br />\n◉ It uses <code class=\"highlighter-rouge\">CFBundleSpokenName</code> if the app’s name could potentially be mispronounced by the system (i..e CoolApp23 would be “CoolApp Twenty Three”).  <br />\n◎ Lastly, running the entire app through Accessibility Inspector produced no warnings and turning on Screen Curtain to navigate the app works flawlessly.  <br /></p>\n\n<p><strong>Accessibility: 9/19 - 47%</strong></p>\n\n<h3 id=\"platform-technology\">Platform Technology</h3>\n<p>◉ Contextual interactions supported (Control previews, home shortcuts, quick actions and interaction delegate for unique experiences). <br />\n◎ Spotlight search and indexing support. <br />\n◉ Effective energy management (i.e. supports low power mode and reacts to it) <br />\n◎ Keyboard shortcuts have been added. The app could be used almost, or completely, with solely the use of a keyboard. <br />\n◎ It supports handoff on Mac (if applicable). <br />\n◎ Meaningful extensions are included with the app, whether it’s via a share extension, action extension, etc.<br />\n◎ Callback urls are supplied and documented so other apps may integrate with it (x-callback-url)/. <br />\n◎ Siri Intent support, when plausible: <br />\n◎ Siri Shortcuts also include intent phrases to help coach users <br />\n◎ Alternate app names are included when appropriate <br />\n◎ Watchface support <br />\n◎ If it makes sense, document sharing is supported via the file provider. <br />\n◉ Drag and drop has first class support: <br />\n    ◎ A fully fleshed out NSItemProvider exists for custom objects. <br />\n    ◉ Purposeful external and internal app drag support. <br />\n    ◉ This is used for reordering, should the app support it. <br />\n◎ If it makes sense, data can be shared via AirDrop. <br />\n◉ All tab bar images are vector .pdf images or have each corresponding size included to ensure they adapt correctly and are vended to accessibility modals properly. <br />\n◎ Any displayed Live Photo will animate when force touched and utilize PHLivePhotoImageView for playback. <br />\n    ◎ Each image also shows their system badge if available (i.e. live photo badges). <br />\n◉ Supports printing via <code class=\"highlighter-rouge\">UIPrintInteractionController</code>. <br />\n◎ Has Siri Shortcuts supported or donated. <br />\n    ◎ Rich Siri Shortcuts support with parameters.\n◎ Running the Analyze function in Xcode yields no errors, warnings or suggestions. <br />\n◉ There are no calls to<code class=\"highlighter-rouge\"> UIGraphicsBeginImageContextWithOptions</code>, and <code class=\"highlighter-rouge\">UIGraphicsImageRenderer</code> is used instead. <br />\n◎ Universal Links are supported, especially if your app’s content is available online. <br />\n◉ Modern multitasking is supported (slide over, split view and PiP). <br />\n◉ Multiple windows is supported on iPadOS. <br />\n◉ If it can be dragged, it can make a new window. <br /></p>\n\n<p><strong>Platform Technology: 11/28 - 39%</strong></p>\n\n<h3 id=\"user-experience\">User Experience</h3>\n<p>◉ Supports native “undo” and “redo” actions, typically from shaking or from the iOS 13 gestures. <br />\n◉ The content type of all text views and text fields is included, and the correct keyboard type is used for the current context. \n◉ The keyboard’s language identifier is integrated correctly. <br />\n◎  Handles the keyboard being undocked on the iPad, if views are constrained to it via an inputAccessoryView. <br />\n◉ It’s localized and internationalized for all territories it’s released in. <br />\n◉ Text tends to not truncate and it never clips but rather it’s always readable. <br />\n◉ All tappable interface elements are at least 44 by 44 points. <br />\n◉ The entire app binary is under 30 megabytes. (No source here, this is based off a multitude of data points.) <br />\n◉ Delete actions always are followed by a confirmation prompt. <br />\n◎ If your app stores rich information files like a Keynote presentation, it uses the Quick Look API to preview it. <br />\n◎ State restoration is implemented via <code class=\"highlighter-rouge\">NSUserActivity</code> APIs for scenes. <br />\n◉ It uses the correct audio settings, if audio can be played at all within it. <br />\n◉ Custom edit options are supported when text or an image is selected, if appropriate. <br />\n◉ The user is provided ample time to form an opinion about your app before you request a rating for it. <br />\n◉ The launch screen is branding free and closely resembles the first screen of the app. <br />\n◎ Before opening a link that could lead to another app in a web view or <code class=\"highlighter-rouge\">SFSafariViewController</code>, try calling <code class=\"highlighter-rouge\">UIApplication’s openURL:</code> with the <code class=\"highlighter-rouge\">UIApplicationOpenURLOptionUniversalLinksOnlyoption</code> first. <br />\n◉ Table views deselect selected rows in <code class=\"highlighter-rouge\">viewDidAppear</code> when popping back to them.<br />\n◎ <code class=\"highlighter-rouge\">UITextInputAssistantItem</code> items are used to support common tasks on iPad that are at home within the shortcuts bar. <br />\n◉ When performing CRUD operations on a table or collection view, you opt to use <code class=\"highlighter-rouge\">performBatchUpdates:</code><code class=\"highlighter-rouge\"> instead of </code>reloadData`. <br />\n◉ Testing for leaks and freed memory is part of your workflow, as consuming an unnecessary amount of memory and power hampers everyone. <br />\n◉ Navigation is clear and foolproof: \n    - Modality is used sparingly, and clearly brings them back to where they were when dismissed.</p>\n\n<p><strong>User Experience: 16/20 - 74%</strong></p>\n\n<h3 id=\"design\">Design</h3>\n<p>◉ Correct system margins are used throughout the app, and no hard coded ones are used (i.e. layoutMarginsGuide, safeAreaLayoutGuide, etc.)  <br />\n◉ Haptic feedback is used throughout the system to complement user interactions, and they are not overdone.  <br />\n◉ Controller transitions feel natural and fluid. Great examples are Calendar and Photos.  <br />\n◉ You opt for vector assets to combat the differing resolutions and avoid any blurry assets.  <br />\n◉ Your content is always the focus, and you constantly challenge if that’s true throughout the development cycles.  <br />\n◉ No segment controls are used in toolbars.  <br />\n◉ There are no toolbars and tab bars in the same screen.  <br />\n◉ Destructive actions are the last choice in action sheets.  <br />\n◉ Alerts, if used, ideally have to two choices and titles have no punctuation.  <br />\n◎ Alerts avoid using Yes and No as choices.  <br />\n◉ Switches are exclusively used within a table row.  <br />\n◎ You aspire to ship on all of Apple’s platforms (iOS iPhone + iPad, watchOS, tvOS and macOS).  <br />\n◎ Lastly, your app is “jank” free. You know what this means for you.  <br /></p>\n\n<p><strong>Design: 10/13 - 77%</strong></p>\n\n<h3 id=\"app-store-presence\">App Store Presence</h3>\n<p>◎ An App Store preview video is used. <br />\n◎ Its keywords and category were carefully researched. <br />\n◉ The app icon follows the golden grid. <br />\n◉ The icon follows your brand’s primary color as well. <br /></p>\n\n<p><strong>App Store Presence: 2/4 - 50%</strong></p>\n\n<h3 id=\"final-thoughts\">Final Thoughts</h3>\n<p>No app is perfect, and no app can check off all of the boxes you want. But it’s motivating to have a goal to shoot for, and this list is mine. When it’s all done, I’ll feel extremely proud to have my name behind Spend Stack.</p>\n\n<p>Here’s to creating quality software, and this list being completely checked off sooner rather than later!</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "Previously, I’ve written about this notion of what it looks like to be a best in class iOS app. I wanted a tangible, written down list that I could reference to gauge whether or not I was being a good platform citizen with my own apps.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2020-01-15T00:00:00-06:00",
            "date_modified": "2020-01-15T00:00:00-06:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["The Indie Dev Diaries"]},{
            "id": "http://localhost:4000/Xcode-Preview-Snips",
            "url": "http://localhost:4000/Xcode-Preview-Snips/",
            "title": "Xcode Preview Snips",
            "content_html": "<p>For years, web developers have lamented how some of their workflows required them to hit two keys on macOS:</p>\n\n<p>Command + R</p>\n\n<p>And that was the only inconvenience in their path to see what the fruits of their labor would yield. Over on mobile, we’ve longed for such a minor roadblock to be the only thing in our path to refreshing our U.I. The pain was staggering - change one constraint in your layout code and then:</p>\n\n<p>1) Build <br />\n2) Run <br />\n3) Xcode says that your device is locked (it’s probably not) <br />\n4) Clean the project <br />\n5) You change the constant of the layout anchor, and Source Kit crashes <br />\n6) Throw your mac out the window <br />\n7) Pick your mac back up, apologize to it and start back at 1 <br /></p>\n\n<p>Look, you know where I’m going with this. If you’ve adopted SwiftUI (or even if you haven’t - view controllers apply here too) then you know Xcode Previews are more than a time saver. They are a fork in the road. There’s no going back once you get hooked on that instant feedback.</p>\n\n<p>Today, I’ll share a few quick snips of my go-to previews. Some of these are already well known, tweeted and blogged about - but my topic for this post is <em>my favorite</em> things to use with <code class=\"highlighter-rouge\">PreviewProvider</code>, so I’ve included them anyways for posterity’s sake. Let’s take a look.</p>\n\n<h3 id=\"previewlayout\">PreviewLayout</h3>\n<p><b>What does it do?</b> Force a size on the given container.<br />\n<b>What’s it good for?</b> Making your preview mimic a certain size that’s realistic for your view, such as in a List scenario (i.e. cells in <code class=\"highlighter-rouge\">UIKit</code> parlance). <br /></p>\n\n<p>For example, suppose we were crafting a cell type of <code class=\"highlighter-rouge\">View</code> for our app. SwiftUI will post it up on the selected device by default (a sensible choice for the majority of development) but we can leverage <code class=\"highlighter-rouge\">PreviewLayout</code> to put it into a more reasonable canvas size. Notice the left versus right:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/pl1.jpg\" role=\"presentation\" srcset=\"../assets/images/pl1.jpg\" /></p>\n\n<p>Further, one can impose a fixed size in addition to <code class=\"highlighter-rouge\">.sizeThatFits</code>, or just take the device. But since Xcode Previews is drunk with power, why not show them all?</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>\n    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">Group</span> <span class=\"p\">{</span>\n            <span class=\"kt\">ContentView</span><span class=\"p\">()</span>\n                <span class=\"o\">.</span><span class=\"nf\">previewLayout</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">sizeThatFits</span><span class=\"p\">)</span>\n                <span class=\"o\">.</span><span class=\"nf\">previewDisplayName</span><span class=\"p\">(</span><span class=\"s\">\".sizeThatFits\"</span><span class=\"p\">)</span>\n            <span class=\"kt\">ContentView</span><span class=\"p\">()</span>\n                <span class=\"o\">.</span><span class=\"nf\">previewLayout</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">fixed</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">320</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">44</span><span class=\"p\">))</span>\n                <span class=\"o\">.</span><span class=\"nf\">previewDisplayName</span><span class=\"p\">(</span><span class=\"s\">\".fixed(width: 320, height: 44)\"</span><span class=\"p\">)</span>\n            <span class=\"kt\">ContentView</span><span class=\"p\">()</span>\n                <span class=\"o\">.</span><span class=\"nf\">previewLayout</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">device</span><span class=\"p\">)</span>\n                <span class=\"o\">.</span><span class=\"nf\">previewDisplayName</span><span class=\"p\">(</span><span class=\"s\">\".device\"</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/pl2.png\" role=\"presentation\" srcset=\"../assets/images/pl2.png\" /></p>\n\n<blockquote>\n  <p>Why <code class=\"highlighter-rouge\">Group</code> here? <code class=\"highlighter-rouge\">PreviewLayout</code> doesn’t conform to <code class=\"highlighter-rouge\">CaseIterable</code> currently, which, as we’ll see, lends itself perfectly to <code class=\"highlighter-rouge\">ForEach</code>.</p>\n</blockquote>\n\n<p>Next, let’s hit on some pertinent environment values to preview against.</p>\n\n<h3 id=\"contentsizecategory\">ContentSizeCategory</h3>\n<p><b>What does it do?</b> Specifies a content size for the preview, which drives the system’s font sizes among other things. <br />\n<b>What’s it good for?</b> Ensuring your app shines with dynamic type settings. <br /></p>\n\n<p>Dynamic type, at this point, shouldn’t be a “nice to have” - I truly feel it’s a “need to have”. A cornerstone of an exceptional accessibility experience, testing for it used to be a chore - no more:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>\n    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"kt\">ContentSizeCategory</span><span class=\"o\">.</span><span class=\"n\">allCases</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">contentSize</span> <span class=\"k\">in</span>\n            <span class=\"kt\">ContentView</span><span class=\"p\">()</span>\n            <span class=\"o\">.</span><span class=\"nf\">previewLayout</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">sizeThatFits</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">previewDisplayName</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\(</span><span class=\"n\">contentSize</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">environment</span><span class=\"p\">(\\</span><span class=\"o\">.</span><span class=\"n\">sizeCategory</span><span class=\"p\">,</span> <span class=\"n\">contentSize</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n</code></pre></div></div>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/cs1.png\" role=\"presentation\" srcset=\"../assets/images/cs1.png\" /></p>\n\n<blockquote>\n  <p>Previews going a bit slow? Make sure you aren’t going crazy in <code class=\"highlighter-rouge\">didFinishLaunchingWithOptions</code> since Xcode will indeed invoke this when firing up Xcode Previews and kicking off the dynamic replacement dance.</p>\n</blockquote>\n\n<p>I haven’t found an elegant way to do this yet, but you can also ensure flipping from an <code class=\"highlighter-rouge\">HStack</code> to a <code class=\"highlighter-rouge\">VStack</code> in an accessibility setting (in terms of font size) looks fine, too:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">@Environment</span><span class=\"p\">(\\</span><span class=\"o\">.</span><span class=\"n\">sizeCategory</span><span class=\"p\">)</span> <span class=\"k\">var</span> <span class=\"nv\">sizeCat</span> <span class=\"c1\">//📏🐈 amirite?</span>\n    \n<span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"s\">\"</span><span class=\"se\">\\(</span><span class=\"n\">sizeCat</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"o\">.</span><span class=\"nf\">contains</span><span class=\"p\">(</span><span class=\"s\">\"accessibility\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// VStack</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// HStack</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"colorscheme\">ColorScheme</h3>\n<p><b>What does it do?</b> Reports the current system color scheme, or the overridden value. <br />\n<b>What’s it good for?</b> Your app either Dark Modes or it doesn’t Dark Mode, this is an easy way to confirm it. <br /></p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>\n    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"kt\">ColorScheme</span><span class=\"o\">.</span><span class=\"n\">allCases</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">color</span> <span class=\"k\">in</span>\n            <span class=\"kt\">ContentView</span><span class=\"p\">()</span>\n            <span class=\"o\">.</span><span class=\"nf\">previewLayout</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">sizeThatFits</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">previewDisplayName</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\(</span><span class=\"n\">color</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">environment</span><span class=\"p\">(\\</span><span class=\"o\">.</span><span class=\"n\">colorScheme</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/cscheme1.png\" role=\"presentation\" srcset=\"../assets/images/cscheme1.png\" /></p>\n\n<h3 id=\"layoutdirection\">LayoutDirection</h3>\n<p><b>What does it do?</b> Reports the system layout direction. <br />\n<b>What’s it good for?</b> Does your app act a fool in right-to-left languages? Find out by piping this environment value into a preview.<br /></p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>\n    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"kt\">LayoutDirection</span><span class=\"o\">.</span><span class=\"n\">allCases</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">direction</span> <span class=\"k\">in</span>\n            <span class=\"kt\">ContentView</span><span class=\"p\">()</span>\n            <span class=\"o\">.</span><span class=\"nf\">previewLayout</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">sizeThatFits</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">previewDisplayName</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\(</span><span class=\"n\">direction</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">environment</span><span class=\"p\">(\\</span><span class=\"o\">.</span><span class=\"n\">layoutDirection</span><span class=\"p\">,</span> <span class=\"n\">direction</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/ld1.png\" role=\"presentation\" srcset=\"../assets/images/ld1.png\" /></p>\n\n<p>Luckily, this one is trivial to get right if your app is mostly architected with SwiftUI. But, most aren’t. So it is in 2020, some of us forgot to constrain labels to their leading and trailing edges instead of their right or left sides.</p>\n\n<p>Being able to inject environment variables can claim back a mountain of previously lost productivity. This truly is a feedback loop that heretofore took one to many build and runs. So, in the name of Xcode, why not inject whatever outlandish requirement that might come your way.</p>\n\n<p>Need to know if your app works in Sri Lanka, with dark mode on and accessibility bold text enabled? In the stone age we’d take a few trip to Settings.app but in our new age of enlightenment it’s just a few quick lines of code:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>\n    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">ContentView</span><span class=\"p\">()</span>\n        <span class=\"o\">.</span><span class=\"nf\">previewLayout</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">sizeThatFits</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">environment</span><span class=\"p\">(\\</span><span class=\"o\">.</span><span class=\"n\">locale</span><span class=\"p\">,</span> <span class=\"kt\">Locale</span><span class=\"p\">(</span><span class=\"nv\">identifier</span><span class=\"p\">:</span> <span class=\"s\">\"si_LK\"</span><span class=\"p\">))</span>\n        <span class=\"o\">.</span><span class=\"nf\">environment</span><span class=\"p\">(\\</span><span class=\"o\">.</span><span class=\"n\">legibilityWeight</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"n\">bold</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">environment</span><span class=\"p\">(\\</span><span class=\"o\">.</span><span class=\"n\">colorScheme</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"n\">dark</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>Some accessibility traits can’t be overriden within previews as far as I know. For example, <code class=\"highlighter-rouge\">public var accessibilityInvertColors: Bool { get }</code> can’t be a writable key path due to its read only nature.</p>\n</blockquote>\n\n<h3 id=\"view-models\">View Models</h3>\n<p>View models can boost your workflow for all sorts of reasons. Separations of concerns, easier unit testing and in our case, an easy way to mock real data. We’ve all been bitten by our pixel perfect designs in Sketch that get trounced by the diversity in our user base once it’s out in the wild, so let Xcode Previews be a shield against it.</p>\n\n<p>Simply throw together a simple view model to reflect your actual data:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">MorganFamViewModel</span><span class=\"p\">:</span> <span class=\"kt\">Identifiable</span><span class=\"p\">,</span> <span class=\"kt\">Hashable</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">id</span><span class=\"p\">:</span><span class=\"kt\">String</span>\n    <span class=\"k\">var</span> <span class=\"nv\">name</span><span class=\"p\">:</span><span class=\"kt\">String</span>\n    <span class=\"k\">var</span> <span class=\"nv\">twitterHandle</span><span class=\"p\">:</span><span class=\"kt\">String</span>\n    <span class=\"k\">var</span> <span class=\"nv\">assetName</span><span class=\"p\">:</span><span class=\"kt\">String</span>\n    \n    <span class=\"kd\">static</span> <span class=\"kd\">func</span> <span class=\"kt\">TestData</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">MorganFamViewModel</span><span class=\"p\">]</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"cm\">/*View Model array from .plist, json, etc*/</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">struct</span> <span class=\"kt\">ContentView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>\n    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"kt\">MorganFamViewModel</span><span class=\"o\">.</span><span class=\"kt\">TestData</span><span class=\"p\">(),</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">morgan</span> <span class=\"k\">in</span>\n            <span class=\"kt\">ContentView</span><span class=\"p\">(</span><span class=\"nv\">model</span><span class=\"p\">:</span> <span class=\"n\">morgan</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">previewLayout</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">sizeThatFits</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/morgansxc.png\" role=\"presentation\" srcset=\"../assets/images/morgansxc.png\" /></p>\n\n<h3 id=\"bonus-round\">Bonus Round</h3>\n<p>Here are a few other possibilities that didn’t quite make it in, but are helpful in their own right:</p>\n\n<ul>\n  <li>Testing selection states.</li>\n  <li>Toggling edit mode.</li>\n  <li>Popping in your vanilla <code class=\"highlighter-rouge\">UIKit</code> views or controllers. (Mattt wrote an excellent <a href=\"https://nshipster.com/swiftui-previews/\">entry</a> on this.)</li>\n  <li>Or simply remembering that you can run the app itself within previews.</li>\n</ul>\n\n<p>Also, while perhaps tangentially related, remember that you can fire up <a href=\"https://twitter.com/JordanMorgan10/status/1185565237510070272?s=20\">SwiftUI within Playgrounds on your iPad</a>. The perfect cure for those late night spurts of creativity which used to require a trip to your mac.</p>\n\n<h3 id=\"final-thoughts\">Final Thoughts</h3>\n<p>If Xcode Previews were a car, it would be a Tesla Roadster. Blazingly efficient, fast and once you experience it you don’t want anything else. I mean, this the <em>the car</em>. But like any vehicle or tool, you learn the ins. You learn the outs. The quirks, the hacks.</p>\n\n<p>And Xcode Previews has all of those things.</p>\n\n<p>But the time investment is minuscule in comparison to the time you save. We can lament about how they fail to refresh every now and then, toss up a painfully ambiguous error or what have you but remember - almost all of those things take less time to fix than it does for more most mature projects to build. So, harness your favorite previewing workflows (or steal the ones I’ve mentioned) and profit.</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "For years, web developers have lamented how some of their workflows required them to hit two keys on macOS:",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2020-01-08T00:00:00-06:00",
            "date_modified": "2020-01-08T00:00:00-06:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["SwiftUI"]},{
            "id": "http://localhost:4000/On-Forming-Habits",
            "url": "http://localhost:4000/On-Forming-Habits/",
            "title": "On Forming Habits",
            "content_html": "<p>Ah, the New Year 🎉!</p>\n\n<p>I think <a href=\"https://www.youtube.com/watch?v=2MwhxdGAnic\">Death Cab for Cutie</a> put it best:</p>\n\n<blockquote>\n  <p>So this is the New Year / And I don’t feel any different.</p>\n</blockquote>\n\n<p>I’ve danced with the whole “new year, new you!” concept more times than I care to count. Now, at age 31, I feel like I’ve finally arrived at a point where I can actually reflect on my year and make changes to get things done that I want to accomplish.</p>\n\n<p>This is big as an indie dev, because without a system in place <a href=\"http://localhost:4000/Introducing-Spend-Stack\">Spend Stack</a> simply would not exist. Why? Because I have three kids under six, am married, have a full time job, an indie app, a blog and, well, my own hobbies. I used to think time was too short, or there simply wasn’t enough of it. However, with some tweaks, I truly believe there is enough time in the day to live the lives that we want if we have the right habits to support it.</p>\n\n<p>After many mistakes, I know that if my day doesn’t have structure produced by some recurring habits, it gets lost in life’s many responsibilities. Today, I’ll share the system I have in place, and the apps that help support it, that have helped me form good habits.</p>\n\n<h3 id=\"forgetting-goals\">Forgetting Goals</h3>\n<p>Years ago, if someone had told me to forget setting goals in the name of productivity, I’d call them mad. But I’ve since changed my thinking on them. As evidenced by books such as <a href=\"https://www.amazon.com/Irresistible-Addictive-Technology-Business-Keeping/dp/1594206643\">Irresistible</a>, <a href=\"https://www.amazon.com/Make-Time-Focus-Matters-Every/dp/0525572422\">Make Time</a> and <a href=\"https://jamesclear.com/atomic-habits\">Atomic Habits</a>, the problem I’ve found with goals is that you stay on the hamster wheel.</p>\n\n<p>Accomplish one, then another immediately follows.</p>\n\n<p>For me, I need a smooth, constant feeling of accomplishment, and goals give me peaks and valleys. I’ve certainly found I admire goals much more than I enjoy them, so I’ve taken their good aspects and tossed out the rest instead of following another hackneyed goal system I might come up with.</p>\n\n<p>These days, I’m all about forming a system in my life to become the person who would accomplish the goals I want to.</p>\n\n<p>👨🏻‍💻 Is shipping Spend Stack a goal? Then become an indie dev.<br />\n🏃🏻‍♂️ Is getting in shape a goal? Then become athletic.<br />\n📖 Is delivering conference talks a goal? Become a speaker.<br /></p>\n\n<p>And so on.</p>\n\n<p>But in 2020, talk is still cheap. I need concrete methods to carry out a plan because hearing it and doing it are two different things. To that end, I’ve found that if I discover who I want to be and what major themes I want to accomplish - I can then formulate smaller goals from that information.</p>\n\n<p>At that point, I mostly disregard them and come up with a system to help me become the person who would be likely to routinely do those things.</p>\n\n<p><strong>The TL;DR - For me it’s less about setting goals, and more about working backward from those goals to become the kind of person who would do those things by getting “1%” better as often as I can.</strong></p>\n\n<p>Here’s how it works for me.</p>\n\n<h3 id=\"the-journal-aspect\">The Journal Aspect</h3>\n<p>The first step is laying the foundation. Who am I, what am I about? What’s important to me, and what do I want to be known for? To help answer those kinds of things, I have an evergreen journal entry in Day One that I read each morning to set my frame of reference:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/dayone.png\" role=\"presentation\" srcset=\"../assets/images/dayone.png\" /></p>\n\n<p>The information in the rest of that entry simply states things I’d like to do at a more finite level. The key is that I may or may not do some of these things, as I’ve written a generous amount of tasks down. So, the idea here is that having them front and center will help me remember the person I’m trying to be. This way, I avoid only thinking in terms of arbitrary boxes I’m trying to tick off in 2020 which would only lead to yet another set of boxes to check off.</p>\n\n<p>To get to this quickly, I’ve set up a trivial Shortcut that opens its respective URL:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/dayoneURL.jpeg\" role=\"presentation\" srcset=\"../assets/images/dayoneURL.jpeg\" /></p>\n\n<p>If I read a simple document written by myself to give me that North Star (a concept I’ve talked a lot <a href=\"http://localhost:4000/Can-You-Learn-Design\">about</a>) for my life, I feel centered and my mind is a bit less cluttered.</p>\n\n<p>Once I’ve read the “big idea” though, it’s time to shift my focus to the day to day things.</p>\n\n<h3 id=\"foundational-habits\">Foundational Habits</h3>\n<p>Things I need to do every single day are what I call foundational habits. This is the part where it becomes easy to make things far too ambiguous, so I’ve sectioned off foundational habits on an app by app basis, each one representing different domains of my life.</p>\n\n<p>Streaks is what I use to remind myself to do certain things each day of my life. I even order them in the same way I typically go about my day:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/streaksFH.png\" role=\"presentation\" srcset=\"../assets/images/streaksFH.png\" /></p>\n\n<p>There’s a reason this has snagged one of the coveted Apple Design Awards - it’s simple to use, engaging and does one thing well. So I lean into it and try not to make it anything other than what it’s trying to do. An app that helps me do six things daily.</p>\n\n<p>So, ask yourself, based on the “big ideas” you have for your life - what things should you be doing, or want to do, daily?</p>\n\n<h3 id=\"highlight-tasks\">Highlight Tasks</h3>\n<p>However, daily tasks are stringent by nature. We all have those moon shot goals in mind. Or, we simply have a bigger highlight (a term coined by the aforementioned Make Time book) that we want to tackle over one or more days.</p>\n\n<p>For this, I turn to Things 3. Here are some examples of things I’ve recently put in Things (zing!):</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/things.png\" role=\"presentation\" srcset=\"../assets/images/things.png\" /></p>\n\n<p>Clean out the entry closet, take items to Good Will or shoot hoops with my son - these are all great things that support who I want to be but aren’t likely to repetitive daily items. So, that kind of item goes here.</p>\n\n<p>With daily tasks and highlights accounted for, we now get into the menial tasks.</p>\n\n<h3 id=\"familylifehusbanddadindie-tasks\">Family/Life/Husband/Dad/Indie Tasks</h3>\n<p>Life has so many responsibilities, and for the “remember to take out the trash” or “pay my personal property tax by December 31st” kind of things I use Reminders. The key here is that these kinds of entries are either family-related or just plain “adulting” tasks:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/reminders.png\" role=\"presentation\" srcset=\"../assets/images/reminders.png\" /></p>\n\n<p>Since its iOS 13 overhaul, I’ve found Reminders to be even more component. I’ve always been a fan, but with its new features (such as grouped tasks) I’ve been able to lean on it even more.</p>\n\n<p>Further, this is the <em>only</em> tool I use for side project or Spend Stack action items.</p>\n\n<p>Why?</p>\n\n<p>Because it’s beautifully limiting. With so much happening in life, I found that if I opened up super tools (such as Github Issues, Asana or something similar) I would write a novel and likely not ever return to read it again. But Reminders is short and unforgivably terse.</p>\n\n<p>This is a perfect set of restrictions for me, and I’d imagine it’s the same reason a lot of creative folks produce breakthroughs under a certain level of rigidity or constraints. It forces only important ideas out. For the higher-level stuff, I use Notion. For the Do X and Y stuff, I use Reminders and love it.</p>\n\n<h3 id=\"app-recap\">App Recap</h3>\n<p>For reference, here’s a recap of the apps I’ve mentioned:</p>\n\n<ul>\n  <li><a href=\"https://dayoneapp.com\">Day One</a>: Journaling and “big picture” stuff.</li>\n  <li><a href=\"https://streaksapp.com\">Streaks</a>: Foundational, every single day things.</li>\n  <li><a href=\"https://culturedcode.com/things/\">Things 3</a>: “Highlight”-esque tasks.</li>\n  <li>Reminders in iOS: Family, adulting or Spend Stack centric tasks.</li>\n  <li>Shortcuts: To quickly open Day One entries.</li>\n  <li><a href=\"https://www.notion.so\">Notion</a>: For big picture ideas and documents related to Spend Stack.</li>\n</ul>\n\n<p>Depending on your personality type, my system may sound like the most stressful thing since taking the ACT. That’s ok, my wife fits into this category. She’s a more of a “go with the flow” gal, and she balances me out in many ways.</p>\n\n<p>But, if you’re laughably Type-A like yours truly, having everything in its place and place for everything is simply invigorating and habit forming. While this may appear on the surface as too many tools to use - they each are serving a simple purpose. And that removes any ambiguity from my head, which helps me form the habits I want to.</p>\n\n<h3 id=\"final-thoughts\">Final Thoughts</h3>\n<p>Over the years, I’ve discovered one truth when it comes to habits and the likelihood that I’ll achieve them - it’s about the 1% wins. As James Clear noted, the same way that investing in your 20s leads to riches through the magic of compound interest, so to do 1% habits in your day to day lead to compounded results over time.</p>\n\n<p>In the end, that’s all my little system does. 1% wins help me learn from the past, produce in the present and prepare for the future. If my goal is to write a book, I don’t write that down as the thing I want to do. Instead, I need to figure out what to do to become a writer. May you have an amazing 2020 in accomplishing all of your aspirations, and heres to better habits 🍻!</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "Ah, the New Year 🎉!",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2020-01-01T00:00:00-06:00",
            "date_modified": "2020-01-01T00:00:00-06:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["The Indie Dev Diaries"]},{
            "id": "http://localhost:4000/Can-You-Learn-Design",
            "url": "http://localhost:4000/Can-You-Learn-Design/",
            "title": "Can You Learn Design?",
            "content_html": "<p>Did you know that the version of Spend Stack I released a few short months ago is actually… <em>not</em> the first version?</p>\n\n<p>It’s true that I did take <a href=\"http://localhost:4000/Introducing-Spend-Stack\" target=\"_blank\">many years to design and develop it</a>, and it’s also true that was due to a variety of reasons (having three kids, married, job - life stuff). But another important reason was that I was teaching myself design. If I had to guess, that’s where more than half of those years went.</p>\n\n<p>Why?</p>\n\n<p>Well, because <em>this thing</em> is how the first version of Spend Stack looked:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/fugly.png\" role=\"presentation\" srcset=\"../assets/images/fugly.png\" /></p>\n\n<p>For real - I’m dead serious! I even had a good friend whip up a promo trailer for it:</p>\n\n<style>\n.embed-container {\n    position: relative;\n    padding-bottom: 56.25%;\n    height: 0;\n    overflow: hidden;\n    max-width: 100%;\n}\n\n.embed-container iframe,\n.embed-container object,\n.embed-container embed {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n\n<div class=\"embed-container\">\n\t<iframe src=\"https://player.vimeo.com/video/101882671\" frameborder=\"0\" webkitallowfullscreen=\"\" mozallowfullscreen=\"\" allowfullscreen=\"\"></iframe>\n</div>\n<p><br /></p>\n\n<p>This might strike you as quite surprising if you’ve ever used or have seen Spend Stack, because this is how it looks today:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/headerSS.jpeg\" role=\"presentation\" srcset=\"../assets/images/headerSS.jpeg\" /></p>\n\n<p>Given that, the obvious question becomes:</p>\n\n<p><strong>How did I go from something that was objectively bad design, to making the design become a strength of the app?</strong></p>\n\n<p>Today, I’m going to lay out eight core lessons I learned over the years which helped me appreciate design. They each will help answer the question of “How can indie devs learn about design?”   While I still wouldn’t consider myself a designer, I’d submit to you that it’s nearly undeniable how much better Spend Stack looks, works and functions today in comparison to what it did five years ago.</p>\n\n<blockquote>\n  <p>A small sidebar before we continue - what follows below lays squarely in the “this is my opinion” category. Simply put, these are the things that helped me out. Design has objective truths, but can also have many subjective opinions. My goal here is to shed light on some design practices for those indie devs out there who might be stuck with it as I was. Let me tell you, I have not figured out design. I still see a million things wrong in Spend Stack today, but I’m getting there.</p>\n</blockquote>\n\n<p>That said, without further ado here are the lessons I’ve learned, and the order in which I learned them:</p>\n\n<ul>\n  <li><a href=\"#syci\">1. Something You Can’t Ignore</a></li>\n  <li><a href=\"#swams\">2. Start with a Mission Statement</a></li>\n  <li><a href=\"#wif\">3. Who’s It For?</a></li>\n  <li><a href=\"#nswt\">4. Never Start with Technology</a></li>\n  <li><a href=\"#fnsa\">5. Find North Star Apps</a></li>\n  <li><a href=\"#aay\">6. Always Ask Yourself</a></li>\n  <li><a href=\"#hdadt\">7. How Does Apple Do This?</a></li>\n  <li><a href=\"#dcm\">8. Design Centric Materials</a></li>\n</ul>\n\n<h3 id=\"syci\">Lesson 1: Something You Can’t Ignore</h3>\n<p>The first thing I realized about Spend Stack of yore was that the idea of the app was validated, but the design made your eyes bleed. As such, the app’s idea or functionality (which are intrinsically tied to its design) didn’t matter much.</p>\n\n<blockquote>\n  <p>In this lesson, when I say “design” I’m more pertaining to the “smell test”/judge-a-book-by-its-cover bits of design. Design is a function of many things - how it works, what it does and how it does it, not just how it looks. But in this lesson, it’s all about the looks.</p>\n</blockquote>\n\n<p>It could solve a problem, it could save you money. Nay, it could just <em>print</em> money. It could cure diseases!</p>\n\n<p>But if the design sucks, nobody will care. Because this is the App Store, and not really a B.2.B. market where a terminal U.I. can still win contracts. Realizing this, I had a little saying that was in my Notion workspace for all things Spend Stack, and it simply said the following:</p>\n\n<blockquote>\n  <p>“Design isn’t everything, but it is the only thing that matters.”</p>\n</blockquote>\n\n<p>And you can debate it however you want.</p>\n\n<p>Functionality and user experience are paramount. But to me, those are a byproduct of good design. Marketing, validating your idea, having an incredible app that does one thing well - all of those things matter. But if the app doesn’t look and feel right, people won’t give it a chance.</p>\n\n<p>Of course, nothing I am saying here is gospel. There are exceptions to every rule. But playing the averages, the numbers say that an ugly app that does a thing well will probably sell far less than a beautiful app that’s not really giving you much.</p>\n\n<p>You have to take design seriously, you have to learn things about it and you have to be critical of your own apps and figure out why or why not its design works.</p>\n\n<p>To make this abstract idea and make it more concrete, consider this view in the first Spend Stack that was used to create a list:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/fuglier.png\" role=\"presentation\" srcset=\"../assets/images/fuglier.png\" /></p>\n\n<p>Why do I consider it poor design? Here are a few reasons:</p>\n\n<p><strong>1)</strong> The hints at the top are already an issue. As they say, user interfaces are like a joke in that if you have to explain them, they aren’t funny (i.e. functional). <br />\n<strong>2)</strong> Those hints are there because to create the new list, you had to swipe down. The gesture was hidden. <br />\n<strong>3)</strong> Because of that, this view hides its main functionality - which is creating a new list. A button should have been used here. <br />\n<strong>4)</strong> The colors. <br />\n<strong>5)</strong> To input data for each option (such as the name, tax rate and more) you had to swipe within the middle box area. A list would easily convey the view’s affordances. <br />\n<strong>6)</strong> I firmly believe being a <a href=\"http://localhost:4000/A-Best-in-Class-App\" target=\"_blank\">best in class app</a> is part of design on iOS. Given that, this view ignores accessibility fonts, dark mode and much more.</p>\n\n<p>To contrast that view, here is what it looks like today:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/newList.png\" role=\"presentation\" srcset=\"../assets/images/newList.png\" /></p>\n\n<p>Much better. The process of redesigning Spend Stack made me appreciate how important design is. You’ve no other recourse but to consider it as much as we do software architecture or whether to use SwiftUI versus UIKit. I realized that design is something you can’t ignore. You have to think of it constantly, and users will know it when they see it.</p>\n\n<p>So as you go about your indie dev days, remember:</p>\n\n<p><strong>Lesson one: Design is something you can’t ignore.</strong></p>\n\n<h3 id=\"swams\">Lesson 2: Start with a Mission Statement</h3>\n<p>Much like a ship wouldn’t leave port without a destination in mind, so too should indie developers define what their app will do before putting code to compiler.</p>\n\n<p>And this is hard to grasp for a lot of us because all apps technically start with an idea. But an idea is dangerous! Why? Because an idea is an amorphous blob of several themes, problems, aspirations, and jobs - almost all of which should be shed in the beginning phases of your app’s inception. Conversely, a mission statement proudly proclaims in one sentence what your app will do and what problem it solves.</p>\n\n<p>For example, let’s say you had an idea to create a podcast player. Most of us will crack open Xcode and rock and roll. Months later, we might release something that isn’t differentiated in any meaningful way, does the same thing as most other podcast players and leaves no lasting reason for why anyone should let go of other established players such as Overcast, Castro or Apple’s built-in solution.</p>\n\n<p>To help mitigate such an outcome - I’ve found that it often helps to bottle that excitement stemming from your idea up, and hone it down into something tangible and zeroed in. Ask yourself a few questions to develop your idea into a mission statement. Following our podcasting example:</p>\n\n<ul>\n  <li>Why do I want to make a podcast player?</li>\n  <li>Can mine offer things that other podcast players do not? Even if it’s a better, or different, design that people would want?</li>\n  <li>If the answer is “not much”, what shortcomings do the current solutions have that I could make up for?</li>\n  <li>And if I can do either of these things, is it worth it to me to put the time in to see it through?</li>\n  <li>If it is, will it be a pet project or something I want to sell?</li>\n  <li>Given this information - can I make a mission statement for this app?</li>\n</ul>\n\n<p>A mission statement is powerful - it could literally save (or make you!) thousands of dollars while preventing wasted hours along with heartache and disappointment. If you’ve got a mission statement, you know what to make, what to cut and where to go next. Plus, users will have a much better idea of what they are buying - because they’ll simply <em>know what it is and the problem it will solve</em>.</p>\n\n<p>I think Dale Carnegie put it best:</p>\n\n<blockquote>\n  <p>“And if salespeople can show us how their services or merchandise will help us solve our problems, they won’t need to sell us. We’ll buy. And customers like to feel that they are buying—not being sold.”</p>\n</blockquote>\n\n<p>On a marketing document I often visit, I have my mission statement front and center to remind me to consider all of my upcoming decisions against it:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/statement.png\" role=\"presentation\" srcset=\"../assets/images/statement.png\" /></p>\n\n<p>It’s helped me cut features, know when to add features and so much more. You simply can’t leave home without it. Tonight, as you map out your next app or consider adding to your current one - remember:</p>\n\n<p><strong>Lesson two: Well designed apps stem from a focused mission statement.</strong></p>\n\n<h3 id=\"wif\">Lesson 3: Who’s It For?</h3>\n<p>If you’ve got a mission statement, you can hunt down a persona for the app. Personas are awesome. Straight up. I’ll be the first to admit I found them a bit cheesy, only suitable for corporate board room exercises. But I just didn’t see their value, and now that I have it’s hard to think about skipping out on them.</p>\n\n<p>Developing a persona for your app is simply the process of mapping who your user might be. And if you know who your use might be, you can surmise all sorts of important things:</p>\n\n<p><strong>1)</strong> What do you they value? <br />\n<strong>2)</strong> Where do they hang out, and what do they do? <br />\n<strong>3)</strong> Most importantly, does my mission statement solve problems that they currently have? <br /></p>\n\n<p>If you’ve got a target customer with a problem you can solve, that’s a huge first step. Considering it, you can consider if they might pay for your solution.</p>\n\n<blockquote>\n  <p>This lesson comes with an asterisk. Maybe you don’t care about making money on your app. If that’s the case, skip on to the next lesson. But even if you don’t, it’s still important to figure out who you’re making the app for - if only for people like yourself.</p>\n</blockquote>\n\n<p>This phase is especially difficult because iOS apps tend to have broad appeal. Given that, they often solve  “vitamin” problems. In his book <a href=\"https://www.goodreads.com/en/book/show/27250038-marketing-for-developers\">Marketing for Developers</a> Justin Jackson laid out a way to consider whether or not your target customer might be willing to buy your product. He did so with a pain tolerance concept, and I don’t remember it word for word but the gist of it really resonated with me.</p>\n\n<p>Is the problem you’re solving a major, game-changing issue your target customers are facing? It’s a life or death problem - they’ll be willing to pay handsomely for something to take this problem off of their hands. Or, maybe it’s a bone-breaking problem. It hurts pretty bad, but they’ve made due. Maybe there is a temporary stint they’ve applied to the problem, so they want it addressed and would likely pay for it to go away.</p>\n\n<p>The idea keeps going down until you reach a “vitamin” level problem. These are problems that are minor nuisances, and if a person simply takes their vitamins they go away. They will likely only pay for a solution to the problem if it really speaks to them, or it solves the issue extremely well and for a small price.</p>\n\n<p>In addition to knowing if your target customer might pay for it, knowing who they are defines a lot of other things, too. Every app has a voice, and your target customer helps define it. If a networking error occurs, you’ll know if they would enjoy copy in the error messaging U.I. that’s funny, or if they’d prefer a more formal tone. This concept flows throughout each part of your design.</p>\n\n<p>Before you crack open Sketch or tab over to Figma, remember:</p>\n\n<p><strong>Lesson three: To design well, you’ve got to have an idea of who you’re designing for.</strong></p>\n\n<h3 id=\"nswt\">Lesson 4: Never Start with Technology</h3>\n<p>And now we arrive at my most painful tendency as an indie dev. I’m talking, of course, about using a particular technology because it’s either new, fun or we just want to learn it.</p>\n\n<p>In the first version of Spend Stack, I had swipe to delete:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/swipeDelete.png\" role=\"presentation\" srcset=\"../assets/images/swipeDelete.png\" /></p>\n\n<p>And do you know why?</p>\n\n<p>Because six or seven years ago (before this UX was common and built right into iOS) I found a Github project that did it. And I thought it was cool. So, I jammed it into my app.</p>\n\n<p>I didn’t ask any other questions or stop to think about why I was doing what I was doing. That’s a sign-in of itself. You can see where I’m going with this, but I’ve made this mistake so many times and lost so many hours because of it - I might as well be writing a diary entry right now. And it would say only this:</p>\n\n<p>“Define the problems first, and work your way back with the technology that solves them. Don’t start with the technology, and look for problems to solve.”</p>\n\n<p>The famous Steve Job <a href=\"https://www.youtube.com/watch?v=FF-tKLISfPE\">rebuttle to some public criticism</a> demonstrated this point succinctly. In it, he said:</p>\n\n<p>“One of the things I’ve always found is that you’ve got to start with the customer experience and work backward to the technology, you can’t start with the technology and figure out where you’re going to try and sell it.”</p>\n\n<p>It’s so hard to do, too! As developers, we are naturally drawn to new APIs and frameworks. In fact, this very reason is why W.W.D.C. is my favorite time of year. Mountains of new API! I’d even argue that it’s a very healthy sign that you love doing what you do - learning new things and picking up new ways to solve architectural issues gives us a buzz. But don’t let it cloud the design part of your brain.</p>\n\n<p>To everyone else it’s obvious, for developers it’s difficult - but never start with the technology, start with what the user needs and work your way back towards the tech. Because if you don’t, you’ll end up with little edges of your app that don’t fit a central theme or support the mission statement. You’ll have things that feel out of place or the user experience may feel a bit scattered.</p>\n\n<p>Next time you feel the urge to add one more line to your podfile, remember:</p>\n\n<p><strong>Lesson four: Starting with technologies and looking for problems to solve in your app could hinder its design.</strong></p>\n\n<h3 id=\"fnsa\">Lesson 5: Find North Star Apps</h3>\n<p>You’ve likely heard the phrase, “Good artists copy, great artists steal” and it holds true in design. Much like I alluded to in my post about <a href=\"http://localhost:4000/On-Launching-Your-Indie-App\">releasing your indie app</a>, the concept of finding people you aspire to be like flows directly down into design and iOS apps.</p>\n\n<p>Find the apps that you love using, and then write down why you love them. It sounds obvious, but I hadn’t done this in the past. I had apps I loved using, but actually putting pen to paper and writing down at least three reasons why uncovered a lot of helpful direction I could use for Spend Stack.</p>\n\n<p>Beyond that - find the apps that Apple has given its seal of approval to. I have each Apple Design Award Winner bookmarked in Safari, and every now and then I poke around their apps just to see how they (deservedly so) got that ultimate award.</p>\n\n<p>Remember, it’s beyond just the looks here. A lot of apps may look good, but even less feel good. Further still, not many look <em>and</em> feel good. Here are some starter questions you might ask yourself about apps you enjoy:</p>\n\n<p><strong>1)</strong> Why does this app <em>feel</em> good to use? <br />\n<strong>2)</strong> If I wrote this app’s mission statement, what would it be and why does the app support it? <br />\n<strong>3)</strong> What have other people, whose opinion I respect, said about the app and why they do or do not like it? <br /></p>\n\n<p>For another example directly related to Spend Stack, I made it a point to often look at <a href=\"https://twitter.com/viticci\">Federico Viticci’s</a> feedback on iPad apps he enjoys. Since he knows the marketplace very well, and is a power user of the platform - he’s in a good position to uncover little things that apps do well to separate them from the rest of the pack.</p>\n\n<p>Recently, he made mention of how he could navigate an iPad app (I believe it was Things 3 maybe?) almost entirely from the keyboard, which inspired me to make that a bar I will eventually hit for Spend Stack. It sounds like a fairly “well yeah!” observation, but with a million things happening while developing Spend Stack, I sure didn’t think of it.</p>\n\n<p>Next time you’re short on inspiration, remember:</p>\n\n<p><strong>Lesson five: Reference apps that you enjoy using and figure out why you, and others, enjoy using them.</strong></p>\n\n<h3 id=\"aay\">Lesson 6: Always Ask Yourself</h3>\n<p>Much like having iOS apps that you aspire to be like, it also helps to have certain rules, or an ethos, to ascribe by as you develop indie apps. A north star framework, if you will. I’ve found that I often forget the simple things, and so I wrote them down and put them in a place where I’m sure to see them often.</p>\n\n<p>I call these little things “always ask yourself” tips. Almost all of the ones I have written down have to do with design. To me, design is like math. It doesn’t come naturally to me, but I <em>can</em> do it - I just really need to focus a bit harder on it. So plopped right in my app delegate file are these little tips that help me frame my mind for the work I’m about to do:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/aaySnips.png\" role=\"presentation\" srcset=\"../assets/images/aaySnips.png\" /></p>\n\n<p>It’s a little silly, and certainly not for everyone - but they’ve done wonders for me. It simply reminds me to focus on design, and before I chase a random thread that might lead down some rabbit hole, I should stop and consider if what I’m doing is worth it. Does X or Y help promote a cohesive design, or am I straying off the path a little?</p>\n\n<p>Expanding on this idea a little more, I also have fully formed documents that hold thoughts, ideas or things that I want my apps to be known for. In fact, the one I have in my Notion workspace is what my <a href=\"http://localhost:4000/A-Best-in-Class-App\">best in class iOS app post</a> came from:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/aayLarge.png\" role=\"presentation\" srcset=\"../assets/images/aayLarge.png\" /></p>\n\n<p>This idea is the same reason college stadiums have inspirational quotes sitting right outside of locker rooms, or offices have pictures with motivational quotes hanging on the walls. It’s because they offer a simple proposition: reminding us what we’re about, what we want to do or where we want to go.</p>\n\n<p>As you go about writing your Swift or Objective-C today, remember:</p>\n\n<p><strong>Lesson six: Always ask yourself if the work you are doing is enforcing a solid design and direction that’s been laid down for your app.</strong></p>\n\n<h3 id=\"hdadt\">Lesson 7: How Does Apple Do This?</h3>\n<p>This is my secret weapon hiding in plain sight. Whether you fall into the “Apple is amazing at design on iOS” or the “They lost their way on iOS 7” - I only know one thing: they are the ones who hand out A.D.A.’s, who have more context or data than anyone else, spend all day on the platform and are the subject matter experts.</p>\n\n<p>So look to their work when you are stuck, need inspiration or aren’t quite sure what to do. I’ve got two tips in this area:</p>\n\n<p><strong>Tip 1</strong> - Have their apps on your home screen. <br /></p>\n\n<p><strong>Tip 2</strong> - Recreate scenarios you’re stuck on in their apps. <br /></p>\n\n<p>Tip 1 is fairly self-explanatory, but I’d love to toss out an example of where tip 2 came into mind for Spend Stack. As I was developing its sharing functionality, I was struggling with coming up with copy for this scenario:</p>\n\n<ul>\n  <li>A user has shared a list of theirs with someone.</li>\n  <li>The owner deletes this list, but doing so will also delete it from the other share participant’s devices.</li>\n  <li>As such - how do I alert them of this?</li>\n</ul>\n\n<p>As I want back and forth, I realized that Notes on iOS could also have this same scenario. So, I grabbed a test device and my iPad and recreated it. Their copy had perfect messaging, and so I ended up with much of the same thing for Spend Stack. The only change I made was tweaking “ok” to a destructive “delete” (per Apple’s advice, I may add):</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/leaveShare.png\" role=\"presentation\" srcset=\"../assets/images/leaveShare.png\" /></p>\n\n<p>Borrowing liberally from Apple is a good thing, and I’ll tell you why; Aside from being experts of the platform, the biggest advantage is that users are already comfortable with the flows, copy and designs that they’ve established. As such, if a user has used Notes before, shared a note and then later deleted it - that user will know what to expect when they do the same thing in Spend Stack. It won’t make them think.</p>\n\n<p>As you question some assumptions today and aren’t quite sure what to do, remember:</p>\n\n<p><strong>Lesson seven: See how Apple has solved similar problems, designs or copy within their apps and consider using them yourself.</strong></p>\n\n<h3 id=\"dcm\">Lesson 8: Design Centric Materials</h3>\n<p>A common theme has hopefully emerged from the previous seven lessons, which is that these things are much less about how to use colors correctly, when to consider a certain font or what margin to use - it’s about cultivating a design mindset. By far and away, this has helped me the most.</p>\n\n<p>But, at the end of the day, you most certainly do need to learn about the more concrete truths and practices of design. For that purpose, I’ve found a few things that I reference quite often to develop those skills.</p>\n\n<p>First, the most important one. Consider it your design bible for Apple. I’m talking, of course, about the <a href=\"https://developer.apple.com/design/human-interface-guidelines/\">human interface guidelines</a>. If you haven’t done so yet, stop everything now and read the H.I.G. from beginning to end. Some of it, I admit, can be dry by nature - but the upside is too important to ignore.</p>\n\n<p>Following the H.I.G. simply means you’ll know what a great app looks and feels like, the technology available to you to make them possible and when to follow their advice to the letter and when to add a little personal spin on things. It’s simply the first and most important step to improving your iOS design skills</p>\n\n<p>Why does Spend Stack’s <a href=\"https://twitter.com/JordanMorgan10/status/1156618254447722499?s=20\">onboarding experience</a> offer three main advantages to the app, is quick to dismiss and doesn’t ask for inessential setup or configuration data upfront? Because I took cues from the H.I.G. on the matter:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/higOnboard.png\" role=\"presentation\" srcset=\"../assets/images/higOnboard.png\" /></p>\n\n<p>Further, here are the design resources I often visit to learn more:</p>\n\n<ul>\n  <li><a href=\"https://refactoringui.com\">Refactoring UI</a></li>\n  <li><a href=\"https://designcode.io\">Design+Code</a></li>\n</ul>\n\n<p>These may or may not help you, but find the resources that do and study them often. So before you wireframe your next view, remember:</p>\n\n<p><strong>Lesson eight: Keep design resources close by to learn from, and keep the H.I.G. at the top of the pile.</strong></p>\n\n<h3 id=\"recap-or-tldr\">Recap or TL;DR</h3>\n<p>Here’s each lesson mapped out for your reference:</p>\n\n<p><strong>Lesson one:</strong> Design is something you can’t ignore.<br />\n<strong>Lesson two:</strong> Well designed apps stem from a focused mission statement.<br />\n<strong>Lesson three:</strong> To design well, you’ve got to have an idea of who you’re designing for.<br />\n<strong>Lesson four:</strong> Starting with technologies and looking for problems to solve in your app could hinder its design.<br />\n<strong>Lesson five:</strong> Reference apps that you enjoy using and figure out why you, and others, enjoy using them.<br />\n<strong>Lesson six:</strong> Always ask yourself if the work you are doing is enforcing a solid design and direction that’s been laid down for your app.<br />\n<strong>Lesson seven:</strong> See how Apple has solved similar problems, designs or copy within their apps and consider using them yourself.<br />\n<strong>Lesson eight:</strong> Keep design resources close by to learn from, and keep the H.I.G. at the top of the pile.</p>\n\n<h3 id=\"final-thoughts\">Final Thoughts</h3>\n<p>As indie developers, we’re forced to wear many hats. And the one of design might be the most important of them all. But years ago, I foolishly resigned to the notion that I had boxed myself into being purely a developer, a code junkie - someone who could implement the good looking thing, but who would never design it.</p>\n\n<p>Being at the other end of the tunnel now, I think Spend Stack is a living testament that <em>anyone</em> can learn design to some degree. Sure, many are just “born with it”, institutions can teach it and millions of other talented people have their careers built off of mastering it - but what about <em>us</em>? The common indie dev who learned all about retain cycles and pointers instead of color theory and typography? Can we?</p>\n\n<p>The answer, is of course, yes.</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "Did you know that the version of Spend Stack I released a few short months ago is actually… not the first version?",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2019-12-07T00:00:00-06:00",
            "date_modified": "2019-12-07T00:00:00-06:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["The Indie Dev Diaries"]}]
}