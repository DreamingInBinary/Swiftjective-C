{
    "version": "https://jsonfeed.org/version/1",
    "title": "Swiftjective-C",
    "description": "Swiftjective-C is a periodical over modern iOS software engineering. It houses tactful discussions over Swift, Objective-C and developing high quality apps while peering into various frameworks to see what makes them tick.\n",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "author": {
        "name": "Jordan Morgan", "avatar": "/assets/images/about/headshot.jpeg"},
    "items": [
      {
            "id": "http://localhost:4000/A-New-Home-For-Spend-Stack",
            "url": "http://localhost:4000/A-New-Home-For-Spend-Stack/",
            "title": "A New Home for Spend Stack",
            "content_html": "<p>CHANGE DATE</p>\n\n<p>TWEET COPY\n<em>Deep breath</em></p>\n\n<p>It‚Äôs with a wide range of emotions, but the biggest one being excitement, that I‚Äôve got some personal news to share:</p>\n\n<p>Spend Stack has been acquired.\nEND TWEET COPY</p>\n\n<p>So, where do I even start with this one?</p>\n\n<p>Spend Stack, and my LLC which sells it (Dreaming In Binary LLC), has been acquired, effective today.</p>\n\n<p>First things first. If you‚Äôre a Spend Stack user, this is a very, very good thing. Spend Stack now has an <em>entire</em> team dedicated to it. I‚Äôve spent hours sharing my vision, feature roadmap, where it is now, where it needs to go and more with the people who will now be working on it and they‚Äôre pumped to get started.</p>\n\n<p>I‚Äôll get to how we got here in a second, but know this: Spend Stack finally has a group of talent to foster it which it so rightfully deserves. Engineers, a product manager, designers and more. I‚Äôm very excited for its future.</p>\n\n<p>Further, now that the app is no longer mine I feel like I can be more blunt without sounding super self serving by saying this: <br /></p>\n\n<p><strong>The app is great!</strong> <br /></p>\n\n<p>It is! It‚Äôs in a position to take that next leap. It‚Äôs well-built, easy to use and makes itself home on iOS. But none of that was ever the issue. It‚Äôs biggest issue was, admittedly, well‚Ä¶<em>me</em> üòÖ.</p>\n\n<p>I don‚Äôt think like a product owner most of the time with Spend Stack, by my own admittance. One of the core reasons I made it was to see if I could make something that would completely fulfill my <a href=\"http://localhost:4000/A-Best-In-Class-App\">Best in Class</a> list. But it‚Äôs a product now, and it needs to be treated like one.</p>\n\n<h3 id=\"the-why\">The Why</h3>\n<p>That said, for the past year Spend Stack has done something pesky on me; grown! Thousands use it daily to get things done in their financial life. I‚Äôd wager that it‚Äôs done, by any measure, what a lot of us want our side projects to do: Be used, liked by those use it all while increasing its user base.</p>\n\n<p>Facing the music made me realize that in some ways, I was oddly being selfish. I released my toy pet project without much thought to the responsibility you have when you make something. It‚Äôs a wonderful arrangement, to give people something they find useful and then they pay you for that thing - but you need to meet your end of the bargain.</p>\n\n<p>I want to honor that. So four months ago, I sat down and answered some questions like:</p>\n\n<ul>\n  <li>What does Spend Stack need to do to make more money to justify more work on it?</li>\n  <li>What features is it missing to compete on a larger scale? Of those, which make sense to do and further its mission statement?</li>\n</ul>\n\n<p>Answering those was illuminating. I realized that making the ‚Äúperfect‚Äù app, while a worthwhile mission that I still want to pursue, had to take a bit less of my time than making the app go towards its user‚Äôs needs more.</p>\n\n<p>The long and short of it is - there is a mountain of work ahead of me. Worthwhile, good work - but a lot of it. Not a small feature. Not just a design tweak. More than that. Essentially, I‚Äôve built a solid base of a product. Now, it needs to put on its grown up pants.</p>\n\n<p>I accepted this and made up my mind to start breaking down these tasks to get on it. And then, life stuff happened:</p>\n\n<ul>\n  <li>We sold our house</li>\n  <li>We started building another one</li>\n  <li>COVID-19 happened, and complicated both of those things financially and logistically</li>\n</ul>\n\n<p>‚Ä¶and through it all the unthinkable happened: my passion to keep this Spend Stack train chuggin‚Äô started waning üöÉ.</p>\n\n<p>And I hated that. So much üòî. I wanted to <em>want</em> to complete that work I set out for myself, knowing the pay off would be worth it. But other competing thoughts came up when weighing the time investment. I can sum it up into two, distinct points:</p>\n\n<ul>\n  <li>I miss writing on this blog about not only indie stuff, but Apple APIs, Swift, etc.</li>\n  <li>I keep thinking about the apps I‚Äôm <em>not</em> making more than the one I was making.</li>\n</ul>\n\n<p>Ah, but the App gods realized this too! Around this same time, a mutual connection introduced me to Spend Stack‚Äôs eventual acquirer.</p>\n\n<h3 id=\"the-how\">The How</h3>\n<p>This is where things started to go off the rails a bit. I‚Äôve never sold an app, let alone an entire LLC. After an introductory chat that was supposed to last 30 minutes go on for hours, I realized that Spend Stack had found a better place to grow - and it was no longer with me.</p>\n\n<p>I adore this app, though. I would never, ever give it away. My name is on it, and I think that really means something. So I did my due diligence beforehand. I talked with close friends who had been through this, I found out what Spend Stack‚Äôs fair market value was and reached out to a few folks to get an idea of what I was in for.</p>\n\n<blockquote>\n  <p>Sidebar. So I talk about being a best in class app quite a bit. And from a monetization standpoint, that literally paid off. Spend Stack was worth more than other apps with similar numbers due to its quality, and I was really proud of that. That‚Äôs not me talking either, that‚Äôs from a valuation from a third party and from getting the same feedback from suitors. So, work towards that mark! I know I always will with whatever I make.</p>\n</blockquote>\n\n<p>After a few weeks of this, I ended up with some clarity. I felt great, but only about one option. I don‚Äôt know if this is how things always work, but once I put a few feelers out some offers started cropping up. The dealings weren‚Äôt ever made public and the whole thing was behind closed doors.</p>\n\n<p>From that, there were a few interesting roads to consider, but I never made an off the cuff decision. I slept on it. I declined to take on any sort of funding or acquihire opportunities. All of those were on the table, but in the end I didn‚Äôt think they were right for me. I‚Äôm 32, and while I feel all nice and young - I‚Äôm definitely not in my early 20s. Grinding it out on a start up does not sound as appealing to me as it once did. I love my <a href=\"https://twitter.com/JordanMorgan10/status/1333480583490625537?s=20\">day job at Buffer</a>, and the people I work with. I‚Äôd much prefer lower risk, lower reward at this point in my life and more importantly when it comes to taking care of my family.</p>\n\n<p>Thankfully, I found someone who thinks as much of Spend Stack as I do. So, if you‚Äôre looking for a post about how I sold my app for a gazillion dollars to a silicon valley titan, well - this is not that. This is about a well intentioned company taking over an app that‚Äôs simply outgrown its original developer.</p>\n\n<p>And I am, in fact, putting my money where my mouth is quite literally. There were at least two other companies who wanted to acquire Spend Stack for <em>more</em> than what I sold it for, but the fit was best here. The future and nourishment of Spend Stack means more to me than making a lot of money - and I can‚Äôt prove it anymore than through the actions I‚Äôve taken.</p>\n\n<h3 id=\"and-spend-stack-today\">And Spend Stack Today</h3>\n<p>To most of you, Spend Stack is quite young - <a href=\"http://localhost:4000/Introducing-Spend-Stack\">only releasing last July</a>. For me, it‚Äôs much different. Spend Stack has been a big part of my life longer than my oldest child, who is about to turn 7!</p>\n\n<p>I started on Spend Stack right out of college in 2013, and the first version (<a href=\"https://twitter.com/JordanMorgan10/status/1265663472425205762?s=20\">which was not a success</a>) shipped that year. After I pulled it off the App Store, I started work and design on the version you see today - around 2015.</p>\n\n<p>Put simply - Spend Stack has been what I‚Äôve done for a long time. So, I don‚Äôt take any decision to part with it lightly. But I do want it to expand and grow. It feels good knowing it has the best chance to do that now.</p>\n\n<p>And I do too, but just in new ways and different directions.</p>\n\n<h3 id=\"quick-questions\">Quick Questions</h3>\n\n<p><strong>What if they make a million dollars from it!?</strong><br />\nThis is one of the first things my sister said when I broke the news to her. My response?</p>\n\n<p><em>I hope they do!</em></p>\n\n<p>I hope Spend Stack becomes their (Prometheus Interactive) largest property and it takes over the entire world, nothing would make me happier.</p>\n\n<p>Why?</p>\n\n<p>Because I arrived at a genuine place where I gave Spend Stack all I had to give it. I feel accomplished, at peace with it - I did all I could for it.</p>\n\n<p>It charts all the time, has hit and stayed at #1 several times, was part of the Apple Retail Demo program, had multiple banner features (and <em>just</em> got pinged from another huge one that I will unfortunately miss), written about and more. It‚Äôs kinda like if you lost a championship game, but knew you gave it all you had. Except, in this scenario - nobody is losing.</p>\n\n<p><strong>Wait, your entire LLC was sold? Why?</strong><br />\nAh, iCloud. You slick willy.</p>\n\n<p>The fact that I use CloudKit to sync data in Spend Stack is the only reason why this happened. Spend Stack is glued to Dreaming In Binary LLC, and I can‚Äôt simply transfer the app to a new owner. So, the entire LLC was absorbed. It made the acquisition a bit trickier than it should‚Äôve been, but we navigated it. It extended the process much longer than usual, and I so, so dearly hope Apple addresses this in the future.</p>\n\n<p>Aside from the logistical hurdles - who doesn‚Äôt want to provide a good sync experience on Apple platforms? We all do. Their API is there to get it done. But we‚Äôre left with having to make an LLC per app if we do, which isn‚Äôt great. Further, indies (like myself) want to use the money we make from our apps getting acquired to invest back into the ecosystem with new apps, while the acquired ones get even more attention. It‚Äôs a win-win to fix, so here‚Äôs hoping.</p>\n\n<p><strong>Are you still going to make stuff?</strong><br />\n1,000%, absolutely, without a doubt. As my wife Jansyn put it, ‚ÄúI think a piece of you would die inside if you weren‚Äôt making something‚Äù and she is absolutely right.</p>\n\n<p>For now, I‚Äôm going to enjoy a nice break. I plan on taking a few months off from side projects of any kind to just relax a little bit. Then, I want to dust off some stuff I haven‚Äôt been able to do since I‚Äôve always been working on Spend Stack. Here are some ideas:</p>\n\n<ul>\n  <li>Revamp my website design. Add in some tool tips.</li>\n  <li>Write more technical blog posts, as I used to before Spend Stack shipped.</li>\n  <li>Maybe do a book over Indie Development I‚Äôve worked on off and on for the last few months.</li>\n  <li>Release a fully in-depth .pdf guide of my best in class post with code samples.</li>\n</ul>\n\n<p>But hey, I was put on this earth to eat pizza, slam back espresso and write software. So when I do get back to apps, smaller utility based ones excite me. Spend Stack is simple on the surface, but the world of finances and the way people use software geared towards it are incredibly complex and require a lot of care. Doing something a bit ‚Äúsimpler‚Äù sounds like a lot of fun, and I want to ship more apps this time around too, whenever I get to that point.</p>\n\n<p>That said, there are several ‚Äúbigger‚Äù app ideas that I‚Äôm really excited to explore. What I‚Äôm finding is that I simply adore the Apple platforms indie space (no surprise if you follow me on Twitter or read this blog) and I want to do stuff for <em>them</em>. Be it writing, <a href=\"https://twitter.com/JordanMorgan10/status/1266372003084161027?s=20\">making software</a> or something else.</p>\n\n<p>In short, this is a new, exciting chapter for me. But in practice today, I‚Äôm just taking a breather for now and playing a lot of Call of Duty currently (MP5 still needs a nerf).</p>\n\n<p><strong>How much did it get acquired for?</strong><br />\nThat‚Äôs NDA‚Äôd ü§ê. But, I‚Äôm very happy too üòÑ. My new house went from being a bit stressful to, well, not being stressful and I‚Äôm very thankful for that.</p>\n\n<h3 id=\"my-last-spend-stack-thoughts\">My Last Spend Stack Thoughts</h3>\n<p>This feels like a good time to close a chapter. It wasn‚Äôt easy to do, as many who go through this kind of thing typically say. You have some doubts and similar hesitations:</p>\n\n<ul>\n  <li>What if I just stick it out a bit and do what I need to do to monetize more?</li>\n  <li>What if I don‚Äôt make anything this good again?</li>\n  <li>What if I don‚Äôt find the time for another app?</li>\n</ul>\n\n<p>You can what-if yourself to death or until Xcode finishes indexing your project, whichever comes first. The thing is, I‚Äôm happy. Really, the only thing I didn‚Äôt accomplish was winning and Apple Design Award and finishing out my Best in Class list. But there‚Äôs always tomorrow for that.</p>\n\n<p>So now, I look back at it as a job well done. For a long time, it was a huge passion of mine. I couldn‚Äôt wait to wake up and work on it. Each new part that I finally got right after tweaking it over and over would make my heart sing.</p>\n\n<p>People like to say that programming is very utilitarian- and in some ways, that‚Äôs true. But we forget the poetry in it too. It‚Äôs definitely there, if you look hard enough. We often tout artistic works and awe at their beauty when it comes to things like paintings or sculptures - why don‚Äôt we do the same with software?</p>\n\n<p>That was Spend Stack for me. Each part I poured into to make happen, it all brought true joy to me. Because if we aren‚Äôt spending our days working on things that truly make us proud and reflect a little bit of who we are into the world, then really - what are we even doing?</p>\n\n<h3 id=\"final-thoughts\">Final Thoughts</h3>\n<p>It‚Äôs absolutely surreal to think that these very words are some of the last I‚Äôll ever type about Spend Stack on this blog. I think it‚Äôs enough now. On to the next!</p>\n\n<p>For everyone who followed along, from the bottom of my heart - thank you ‚ù§Ô∏è. It‚Äôs so stereotypical to say it, but this is also the start of a lot of new things from me too, so be on the lookout.</p>\n\n<p>Oh, and here‚Äôs a picture we snapped of our new home. We‚Äôre excited:\n<img class=\"lozad rounded center-img\" data-src=\"../assets/images/houseHouse.jpg\" role=\"presentation\" srcset=\"../assets/images/houseHouse.jpg\" /></p>\n\n<p>Until next time ‚úåÔ∏è.</p>",
            "summary": "CHANGE DATE",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2020-11-29T00:00:00-06:00",
            "date_modified": "2020-11-29T00:00:00-06:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["The Indie Dev Diaries"]},{
            "id": "http://localhost:4000/Happy-When",
            "url": "http://localhost:4000/Happy-When/",
            "title": "Happy When?",
            "content_html": "<p>Early this year, my youngest daughter was bed-ridden in the hospital. As her (already tiny) body tried to fight off some mysterious infection that nobody could quite peg, I just sat around anxiously feeling powerless. If you‚Äôre a parent, you know nothing comes close to your children being sick. It brings waves of emotions, worry and reflection.</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/baytown.png\" role=\"presentation\" srcset=\"../assets/images/baytown.png\" /></p>\n\n<p>During our first night, as I lounged in a stiff, plastic covered chair beside her bed, I tried to occupy my mind on something other than the current situation to relax (which actually led to this <a href=\"http://localhost:4000/Xcode-Preview-Snips\">post</a>). As I wrote those words, my mind attempted to reconcile the situation and find some sense in it. As it did, I began to feel embarrassed at the way I had been framing my joy and happiness just days before.</p>\n\n<p>While I looked at my daughter sleeping peacefully, albeit tired and exhausted, I was given a very terse reminder of a lesson I‚Äôve learned several times before but so quickly forget - avoiding ‚Äúhappy when __‚Äù syndrome.</p>\n\n<p>As the week progressed and Baylor improved - I made a note to write down the lessons I learned that week. Far be it for me to remain reticent on any facet of my life, I decided to share what I more or less wrote down - the result of which you‚Äôre reading now.</p>\n\n<h3 id=\"where-we-think-happiness-is\">Where We Think Happiness Is</h3>\n<p>I often thought about how proud I‚Äôd be when I made an app that had any modicum of success. To top the charts, have it written about or have actual users - imagine that!</p>\n\n<p>And I was right‚Ä¶.<em>ish.</em> All of those are incredible. But I often forget what else they are - fleeting feelings, transient and mutable highs.</p>\n\n<p>An inconvenient inevitability about human nature is that we often convince ourselves that joy hangs within reach, but it‚Äôs <em>just</em> on the other side of something else we can see in the distance. And, when we do get there (often at the cost of other important things, like personal relationships, other hobbies - you name it) we get frustrated that the grass wasn‚Äôt greener after all.</p>\n\n<p>But! Certainly we will be happy when other things come to pass.</p>\n\n<p>I‚Äôll be <em>happy when</em> I‚Äôm out of debt.<br />\nI‚Äôll be <em>happy when</em> when kids are out of the crazy 2‚Äôs phase.<br />\nI‚Äôll be <em>happy when</em> I have more room or a new house.<br />\nI‚Äôll be <em>happy when</em> I have that new job.<br />\nI‚Äôll be <em>happy when</em> it‚Äôs the weekened.<br /></p>\n\n<p>And, as indies - the ‚Äúhappy whens‚Äù can have gasoline tossed on the fire:</p>\n\n<p>I‚Äôll be <em>happy when</em> when I top the charts.<br />\nI‚Äôll be <em>happy when</em> I actually make any money from my app.<br />\nI‚Äôll be <em>happy when</em> people use my app.<br />\nI‚Äôll be <em>happy when</em> someone cares at all about what I do.<br />\nI‚Äôll be <em>happy when</em> my app is featured.<br /></p>\n\n<p>None of those things I listed above are arbitrary - in fact, they all are quite personal. Those are all from my own life! Every single one.</p>\n\n<p>And for the most part, I‚Äôve achieved them all. Quite foolishly, some part of me thought it would result in some sort of sense of belonging that I hadn‚Äôt quite found beforehand.</p>\n\n<h3 id=\"where-happiness-actually-is\">Where Happiness Actually Is</h3>\n<p>The problem with banking on the ‚Äúhappy whens‚Äù is that there is always another one waiting for you after you achieve the one prior, promising some sort of satisfaction that the previous one denied you. As such, looking at your life as a series of goals to overcome is a fool‚Äôs errand.</p>\n\n<p>For example, my three kids under six deny me a lot of sleep. Surely, once they sleep through the night my life will improve! Ah - but then they will be older which brings a host of new issues. When they become wise enough to handle life and its complex situations, maybe then I can relax.</p>\n\n<p>Or, maybe your ‚Äúhappy when‚Äù is financial. Once that situation improves, or our new job appears - then, we can pay off things or save more money. Surely, things will be better then!</p>\n\n<p>The issue with this thinking is that we never arrive anywhere.</p>\n\n<p>We so often look to just beyond <em>where we are</em> as the cure-all destination, where we can finally give ourselves permission to be happy. This is doubly true as indie developers, where we are in a perennial state of working towards that next milestone - in a constant state of overcoming obstacles.</p>\n\n<p><strong>But the truth is, there is no better time to be happy other than right now.</strong></p>\n\n<p>That week in the hospital reminded me that I needed to adopt a new perspective on happiness. Happiness is a choice, and it‚Äôs the only way forward. Celebrate your success, but don‚Äôt let your success (or lack thereof) dictate much on your quality of life.</p>\n\n<p>Far better to enjoy life and its journey than struggle through it hoping that the next stage is better. These days, I do my best to keep that mindset.</p>\n\n<p><strong>My kids are crazy and wake me up all night?</strong><br />\nI‚Äôll look back at it fondly, because they‚Äôll be grown up before I know it.</p>\n\n<p><strong>Spend Stack didn‚Äôt sell much last week?</strong><br />\nThat‚Äôs fine, there‚Äôs a lesson in there on how to improve it, or its messaging.</p>\n\n<p><strong>No time to work on Spend Stack at all?</strong><br />\nGood, I could use more balance with how I spend my time.</p>\n\n<p>You get the idea. But, I don‚Äôt want to conflate my message here, either. Hard work and success are both wonderful things, and I hope you encounter both. But, let those things be contributors to your happiness, not a source. It helps to frame your thinking the right way - instead of thinking ‚ÄúI‚Äôll be happy when I top the charts!‚Äù, maybe try ‚ÄúI‚Äôll be proud when I achieve that!‚Äù.</p>\n\n<h3 id=\"final-thoughts\">Final Thoughts</h3>\n<p>Whether you are king of the mountain, just beginning to climb it or perhaps you‚Äôve been stuck halfway for years - enjoy each moment. All of these events aren‚Äôt obstacles leading to the next thing, or a segue to your spout of happiness you deserve. All of these obstacles are your life, and it would be a shame to not be happy while experiencing each of them.</p>\n\n<p>I truly believe that if you give yourself a second to take a step back and survey things, you may realize that the best time to happy and excited about the things you‚Äôve got going on - is now.</p>\n\n<p>And don‚Äôt be too hard on yourself. It‚Äôs normal to forget these lessons, I certainly do! But I‚Äôm trying to get better at coming back to them. No joke - indie development and its challenges are 70% mental, so don‚Äôt take things like this lightly.</p>\n\n<p>I think this quote by Dr.Souza summarizes things nicely:</p>\n\n<blockquote>\n\n  <p>‚ÄúFor a long time it had seemed to me that life was about to begin - real life. But there was always some obstacle in the way, something to be gotten through first, some unfinished business, time still to be served, or a debt to be paid. Then life would begin. At last it dawned on me that these obstacles were my life.‚Äù</p>\n</blockquote>\n\n<p>Until next time ‚úåÔ∏è.</p>",
            "summary": "Early this year, my youngest daughter was bed-ridden in the hospital. As her (already tiny) body tried to fight off some mysterious infection that nobody could quite peg, I just sat around anxiously feeling powerless. If you‚Äôre a parent, you know nothing comes close to your children being sick. It brings waves of emotions, worry and reflection.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2020-09-11T00:00:00-05:00",
            "date_modified": "2020-09-11T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["The Indie Dev Diaries"]},{
            "id": "http://localhost:4000/Spend-Stack-One-Year",
            "url": "http://localhost:4000/Spend-Stack-One-Year/",
            "title": "Spend Stack: Year One",
            "content_html": "<p>Spend Stack‚Äôs first year on the App Store hits on the 18th! It‚Äôs been a rewarding year, and I‚Äôm very proud of the app. Though, as most reading this will no doubt know, iOS 14 is around the corner too. I‚Äôm in it deep at the moment, getting Spend Stack all ready to go.</p>\n\n<p>So, instead of a large tell-all post, I‚Äôm going to do a rapid fire format that encompasses all my thoughts up to this point. Let‚Äôs roll!</p>\n\n<h3 id=\"numbers\">Numbers</h3>\n\n<ul>\n  <li><strong>Downloads:</strong> 4.3 thousand</li>\n  <li><strong>Earnings:</strong> $15.1 thousand</li>\n  <li><strong>Price:</strong> Currently $3.99. Ranged from $9.99 to $1.99 throughout the year.</li>\n  <li><strong>Largest Territory:</strong> United States, about ~60% of my sales.</li>\n  <li><strong>Devices:</strong> 70% iPhone and 30% iPad. Also, there is <em>one</em> iPod Touch User üòÜ.</li>\n</ul>\n\n<h3 id=\"cool-stuff-that-happened\">Cool Stuff That Happened</h3>\n\n<ul>\n  <li>Multiple App Store features.</li>\n  <li>Sweating <em>all year</em> over whether or not my header art would ever be used, and it finally happening nearly a year later:</li>\n</ul>\n\n<div class=\"jekyll-twitter-plugin\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Nearly a year later, they used the promo art ü§£üéâ! Woohoo, so glad to see it finally out there! <a href=\"https://t.co/LqJVH2EDPb\">pic.twitter.com/LqJVH2EDPb</a></p>&mdash; Jordan Morgan (@JordanMorgan10) <a href=\"https://twitter.com/JordanMorgan10/status/1266114101547347968?ref_src=twsrc%5Etfw\">May 28, 2020</a></blockquote>\n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div>\n<ul>\n  <li>Hitting #1 in Finance for multiple territories (where a lot of my revenue came from).</li>\n  <li>Being selected to participate in Apple‚Äôs <a href=\"http://localhost:4000/Creating-A-Retail-Demo\">retail demo program</a>.</li>\n  <li>Getting to share Spend Stack‚Äôs <a href=\"http://localhost:4000/Introducing-Spend-Stack\">origin story</a>.</li>\n  <li>Shipping a <a href=\"http://localhost:4000/The-Big-Update\">large, feature-rich update</a>. And learning the relationship between it, and paid up front apps.</li>\n  <li>It was covered by MacStories, 9to5 Mac, MacRumors, MacObserver and more.</li>\n  <li>Craig Federighi responding to my email about it:\n<img class=\"lozad rounded center-img\" data-src=\"../assets/images/hfo.jpg\" role=\"presentation\" srcset=\"../assets/images/hfo.jpg\" /></li>\n</ul>\n\n<h3 id=\"challenging-parts\">Challenging Parts</h3>\n\n<ul>\n  <li>Managing my own expectations. As an indie, some days you are your best advocate and another, your worst enemy.</li>\n  <li>Ensuring all of the feedback and product knowledge I get doesn‚Äôt get lost in translation.</li>\n  <li>Having the urge to make other apps, but not knowing if I could manage it alongside Spend Stack.</li>\n  <li>Knowing I will likely have to shift the product in another direction price wise.</li>\n  <li>Spend Stack has filled a lot of time I had to write on this very site before, and I do miss it.</li>\n  <li>Keeping the app simple and easy to understand, while adding new features. Those two notions feel at odds with each other, it‚Äôs certainly an art.</li>\n  <li>Finding the right tooling to manage everything. As you might‚Äôve seen, I‚Äôm building my own:</li>\n</ul>\n\n<div class=\"jekyll-twitter-plugin\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Hmmmmm it&#39;s almost like <a href=\"https://twitter.com/SpendStackApp?ref_src=twsrc%5Etfw\">@SpendStackApp</a> users are trying to tell me something ü§î?? <a href=\"https://twitter.com/hashtag/OkayIWillAddDateSupport?src=hash&amp;ref_src=twsrc%5Etfw\">#OkayIWillAddDateSupport</a> <a href=\"https://t.co/iZ1b3LbfxX\">pic.twitter.com/iZ1b3LbfxX</a></p>&mdash; Jordan Morgan (@JordanMorgan10) <a href=\"https://twitter.com/JordanMorgan10/status/1266372003084161027?ref_src=twsrc%5Etfw\">May 29, 2020</a></blockquote>\n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div>\n\n<h3 id=\"rewarding-parts\">Rewarding Parts</h3>\n\n<ul>\n  <li>Integrating Spend Stack into my life, and making just <em>enough</em> time for it.</li>\n  <li>Retention is very high. Those that use it, tend to really like it and not ‚Äútolerate‚Äù it.</li>\n  <li>Inspiring others to go for it, and ship their own app.</li>\n  <li>Being able to personally respond to every user email, and building a personal connection with them. Many of us are on a first name basis now, which is wonderful.</li>\n  <li>Several users asking how they can give me <em>more</em> money for the app.</li>\n  <li>Seeing it consistently chart.</li>\n  <li>I‚Äôm still having a blast a year later. Usually, I feel like this is the point where many fizzle out and lose interest. I‚Äôm still pumped!</li>\n  <li>The iOS community around indie development. Everyone wants everyone else to succeed, there are hardly any egos.</li>\n  <li>Many people really enjoy the design, which is something I worked (and continue to work) very hard on.</li>\n  <li>It‚Äôs on Apple‚Äôs radar now, and I‚Äôve finally got a few direct contacts from the App Store editorial team.</li>\n  <li>Getting the ‚Äúhuman‚Äù stories. Here are a few:\n    <ul>\n      <li>A daughter sharing a list with her mom to do chores with a price reward attached to each to save for a hamster.</li>\n      <li>A couple planning their wedding budget all in Spend Stack.</li>\n      <li>A construction worker planning his house.</li>\n      <li>And one of my own; Jansyn and I sharing our Christmas list for the kids.</li>\n    </ul>\n  </li>\n</ul>\n\n<h3 id=\"biggest-fails-\">Biggest Fail(s üòÖ)</h3>\n\n<ul>\n  <li>I had a buggy iOS 13 release, nearly all around notification center and multiple windows.</li>\n  <li>‚Ä¶which lead to a few one star reviews, where they still remain today üòñ.</li>\n  <li>Shipping a release without pushing my CloudKit schema changes.</li>\n  <li>Totally botching my press time line during my initial launch.</li>\n  <li>I‚Äôm having a hard time with ratings, but I‚Äôve loosened my code up a bit to ask for it quicker which has helped.</li>\n</ul>\n\n<h3 id=\"biggest-learnings\">Biggest Learnings</h3>\n\n<ul>\n  <li>I love Objective-C, but Swift is so clearly the future. I think this is the point in my career where I really have drawn a line in the sand, and can‚Äôt so much as justify starting new things in Objective-C, as much as I love it. You‚Äôve got ABI stability, SwiftUI, Combine‚Ä¶this list is only going to grow.</li>\n  <li>You have no idea how your app might look a year from now. It‚Äôs shifted from a grocery shopping app, to a running total list, to tracking expenses and now over to full-on budgeting alongside the expensing functions.</li>\n  <li>Being a bit naive about releasing something primarily for my own enjoyment, without realizing how it could potentially play an important role in someone else‚Äôs life. I think it‚Äôs mainly due to it being a finance app, and finances are an inherently sensitive, personal and important components to your life.</li>\n  <li>I have a fairly clear path and signals to explore to make Spend Stack go from a hobby, to a business. I‚Äôm unsure if I‚Äôll ever explore them in earnest. Of course, there‚Äôs zero guarantees any of them would work, but it‚Äôs good to be in a position where I see ‚ÄúOh, okay. I could do X and Y to make it grow‚Äù instead of ‚ÄúWell, I guess that‚Äôs it.‚Äù</li>\n  <li>Building things is so dang fun, nothing beats it.</li>\n  <li>You need to build relationships with the press.</li>\n</ul>\n\n<h3 id=\"random-stuff\">Random Stuff:</h3>\n\n<ul>\n  <li><strong>Things people liked the most:</strong> Tracking subscriptions.</li>\n  <li><strong>Things I think people don‚Äôt know about, but wish they did:</strong> All of the drag and drop functionality.</li>\n  <li><strong>Midnight Addition:</strong> Apple Card import, which ended up being a great driver for sales.</li>\n  <li><strong>Sharing is Caring:</strong> I love opening up about indie development - the good parts, the crap parts, the big sales days, the no sales days, the money making launches, the ‚Äúwhat am I doing this thing sucks‚Äù launches. I hope it encourages any other developer to know they can do this too, to an even greater degree of success. My ethos truly remains the same when it comes to this blog, Spend Stack, social media or whatever else in tech: I want to encourage other people, promote less ‚Äúlook at me!‚Äù mentalities and make some friends. I don‚Äôt always hit that mark, but I do try to.</li>\n  <li><strong>Indie Dev is Alive:</strong> Many assume it can‚Äôt be done anymore. That‚Äôs not true. I personally know other developers making a lot more than Spend Stack, and others who are making a lot less. And in almost each case, they‚Äôve geared their apps for that particular scenario (hobby versus a business).</li>\n  <li><strong>Time Wins:</strong> Along those lines, almost none of them won out of the gate. In fact, most have been at it for years until things clicked.</li>\n  <li><strong>Hits me in the feels:</strong> As some of you may know, the very first version of Spend Stack released in 2013 and quickly fizzled out:</li>\n</ul>\n\n<div class=\"jekyll-twitter-plugin\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Here&#39;s an important thing to remember if you&#39;re just following along: This thing was the 1st version of Spend Stack, &amp; it was downloaded *18* times. It was a complete failure.<br /><br />I&#39;m proud that I&#39;ve hit #1 paid for Finance, but it didn&#39;t start that way at all. Just kept iterating! <a href=\"https://t.co/w0UYD88Ppg\">pic.twitter.com/w0UYD88Ppg</a></p>&mdash; Jordan Morgan (@JordanMorgan10) <a href=\"https://twitter.com/JordanMorgan10/status/1265663472425205762?ref_src=twsrc%5Etfw\">May 27, 2020</a></blockquote>\n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div>\n\n<p>My wife wrote me a ‚Äúatta boy!‚Äù card 8 years ago when it first launched, which I‚Äôve always kept in my glove box:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/feels.png\" role=\"presentation\" srcset=\"../assets/images/feels.png\" /></p>\n\n<p>She always always been such a big supporter of me wanting to make something I‚Äôm truly proud of, and has always been there to encourage me when things suck, congratulate me when they are good and everything else in between.</p>\n\n<p>ILY Jan üòò.</p>\n\n<h3 id=\"my-master-plan\">My Master plan</h3>\n\n<ul>\n  <li>My main motivation for Spend Stack remains the same; I want it to fulfill my entire <a href=\"http://localhost:4000/A-Best-in-Class-App\">Best in Class</a> checklist with it.</li>\n  <li>Then, and only then, I‚Äôll explore making it into something more.</li>\n  <li>Feature wise: lean into pure budgeting features for the next year.</li>\n</ul>\n\n<h3 id=\"just-for-fun\">Just for Fun:</h3>\n\n<p>My kiddos on the launch day a year ago:\n<img class=\"lozad rounded center-img\" data-src=\"../assets/images/before2019.png\" role=\"presentation\" srcset=\"../assets/images/before2019.png\" /></p>\n\n<p>And my kiddos today:\n<img class=\"lozad rounded center-img\" data-src=\"../assets/images/after2020.png\" role=\"presentation\" srcset=\"../assets/images/after2020.png\" /></p>\n\n<h3 id=\"final-thoughts\">Final Thoughts</h3>\n\n<p>Spend Stack has brought me many memorable moments this year! I can only hope the same remains true a year from now. More than anything, building something and being able to put your name on it - you can‚Äôt beat it. Then, add in the fulfillment you get from people who use it and like it, it‚Äôs a fun cycle to be a part of.</p>\n\n<p>Perhaps what I should be most proud of is Spend Stack has been exactly what I set out for it to be a year ago: Something I can ship and put my name on that people will pay money for. A manageable side hustle. A playground to create my best in class app. By all measures, I‚Äôm happy how things have turned out.</p>\n\n<p>If there‚Äôs anything else you wanna know about it, feel free to ping me on Twitter and I‚Äôll do my best to answer!</p>\n\n<p>Until next time ‚úåÔ∏è.</p>",
            "summary": "Spend Stack‚Äôs first year on the App Store hits on the 18th! It‚Äôs been a rewarding year, and I‚Äôm very proud of the app. Though, as most reading this will no doubt know, iOS 14 is around the corner too. I‚Äôm in it deep at the moment, getting Spend Stack all ready to go.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2020-07-15T00:00:00-05:00",
            "date_modified": "2020-07-15T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["The Indie Dev Diaries"]},{
            "id": "http://localhost:4000/iOS-14-Notable-UIKit-Additions",
            "url": "http://localhost:4000/iOS-14-Notable-UIKit-Additions/",
            "title": "Ios 14 Notable Uikit Additions",
            "content_html": "<hr />\n<p>layout: post\ntags: [‚ÄúUIKit‚Äù]\ntitle: ‚ÄúiOS 14: Notable UIKit Additions‚Äù\nwrittenBy: Jordan Morgan\nwrittenByTwitter: ‚Äúhttps://www.twitter.com/jordanmorgan10‚Äù\ndescription: ‚ÄúIf you thought UIKit was getting pushed to the side with the rise of SwiftUI, you were wrong. There‚Äôs a lot that‚Äôs new, improved or revamped - let‚Äôs take a look.‚Äù\nimage: /assets/images/logo.png\n‚Äî</p>\n\n<p>During what was likely a WWDC to be remembered for years to come for several reasons, we got our look at what‚Äôs next in Apple‚Äôs world. iOS 14 is upon us, so let‚Äôs dive back into our favorite(?) user interface framework, UIKit.</p>\n\n<p>If you thought things were slowing down for UIKit in lieu of SwiftUI, well - that‚Äôs clearly not happening. There‚Äôs a lot to cover this year!</p>\n\n<p>If you want to catch up on this series first, view the <a href=\"http://localhost:4000/iOS-11-notable-uikit-additions\">iOS 11</a>, <a href=\"http://localhost:4000/iOS-12-notable-uikit-additions\">iOS 12</a>and <a href=\"http://localhost:4000/iOS-13-notable-uikit-additions\">iOS 13</a> versions of this article.</p>\n\n<p>For now, let‚Äôs chat UIKit and iOS 14 niceties!</p>\n\n<blockquote>\n  <p>If you want to take a peek at finer implementation details, check out Apple‚Äôs robust sample code cataloging a lot of UIKit changes shown in this article <a href=\"https://developer.apple.com/wwdc20/sample-code/\">right here</a>.</p>\n</blockquote>\n\n<h3 id=\"date-and-time-picker\">Date and Time Picker</h3>\n<p>First, let‚Äôs look at the free power ups. And nothing really embodies that more than the completely overhauled date picker. It went from serviceable to fully-featured.</p>\n\n<p>With just this code alone:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">picker</span> <span class=\"o\">=</span> <span class=\"kt\">UIDatePicker</span><span class=\"p\">(</span><span class=\"nv\">frame</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">zero</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>We went from this on iOS 13:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/iOS14_lamePicker.png\" role=\"presentation\" srcset=\"../assets/images/iOS14_lamePicker.png\" /></p>\n\n<p>To this:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/iOS14_juicedUpPicker.png\" role=\"presentation\" srcset=\"../assets/images/iOS14_juicedUpPicker.png\" /></p>\n\n<p>For the most part, you just leave <code class=\"language-plaintext highlighter-rouge\">UIDatePicker</code> alone and let it use the default style choice, <code class=\"language-plaintext highlighter-rouge\">.automatic</code>. Though, I do see value in checking out the trait collection to swap between that and the new <code class=\"language-plaintext highlighter-rouge\">.inline</code> style:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">traitCollectionDidChange</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">previousTraitCollection</span><span class=\"p\">:</span> <span class=\"kt\">UITraitCollection</span><span class=\"p\">?)</span> <span class=\"p\">{</span>\n    <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">traitCollectionDidChange</span><span class=\"p\">(</span><span class=\"n\">previousTraitCollection</span><span class=\"p\">)</span>\n    <span class=\"k\">let</span> <span class=\"nv\">isVerticallyCompact</span><span class=\"p\">:</span> <span class=\"kt\">Bool</span> <span class=\"o\">=</span> <span class=\"n\">traitCollection</span><span class=\"o\">.</span><span class=\"n\">verticalSizeClass</span> <span class=\"o\">==</span> <span class=\"o\">.</span><span class=\"n\">compact</span>\n    <span class=\"n\">datePicker</span><span class=\"o\">.</span><span class=\"n\">preferredDatePickerStyle</span> <span class=\"o\">=</span> <span class=\"n\">isVerticallyCompact</span> <span class=\"p\">?</span> <span class=\"o\">.</span><span class=\"nv\">compact</span> <span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">inline</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Regardless, if you‚Äôve got the <code class=\"language-plaintext highlighter-rouge\">.inline</code> display, the picker will still do this context-y menuish transition to the full style as seen here:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/iOS14_toggleDatePicker.gif\" role=\"presentation\" srcset=\"../assets/images/iOS14_toggleDatePicker.gif\" /></p>\n\n<p>The pretty package comes with some house keeping, though. If you were using a date picker before, you were likely doing so under the assumption that it would show as the wheel style. If that‚Äôs the case, it‚Äôs gonna look all kinds of crazy right now - so go check it out in your own apps and either tweak the style or the way you‚Äôre showing it.</p>\n\n<p>For example, I was using the wheel style in Spend Stack, which you can see in the picture above in this article. However, building against iOS 14 nets me this result (with the nice, fully fleshed out version showing when a user taps on it):</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/iOS14_datePickerBug.png\" role=\"presentation\" srcset=\"../assets/images/iOS14_datePickerBug.png\" /></p>\n\n<h3 id=\"color-picker\">Color picker</h3>\n<p>There isn‚Äôt so much to say here, other than <em>it‚Äôs simply about freakin‚Äô time</em>. Using a color picker is UIKit-101 fare. You present the view controller, set a delegate and move on with life:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">colorPicker</span> <span class=\"o\">=</span> <span class=\"kt\">UIColorPickerViewController</span><span class=\"p\">()</span>\n<span class=\"n\">colorPicker</span><span class=\"o\">.</span><span class=\"n\">delegate</span> <span class=\"o\">=</span> <span class=\"k\">self</span>\n<span class=\"n\">colorPicker</span><span class=\"o\">.</span><span class=\"n\">supportsAlpha</span> <span class=\"o\">=</span> <span class=\"kc\">true</span> <span class=\"c1\">// Use NO if you want only opaque colors</span>\n<span class=\"n\">colorPicker</span><span class=\"o\">.</span><span class=\"n\">selectedColor</span> <span class=\"o\">=</span> <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">purple</span>\n\n<span class=\"c1\">// Optional delegate functions</span>\n<span class=\"kd\">func</span> <span class=\"nf\">colorPickerViewControllerDidSelectColor</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">viewController</span><span class=\"p\">:</span> <span class=\"kt\">UIColorPickerViewController</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Check out .selectedColor property</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">colorPickerViewControllerDidFinish</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">viewController</span><span class=\"p\">:</span> <span class=\"kt\">UIColorPickerViewController</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// The delegate staple function, didFinish</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Which nets you this:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/iOS14_colorPicker.png\" role=\"presentation\" srcset=\"../assets/images/iOS14_colorPicker.png\" /></p>\n\n<p>But hey - the selected color is also <code class=\"language-plaintext highlighter-rouge\">.KVO</code> compliant, so why not mesh the old with the new and Combine it instead of using a lame delegate, amirite?</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">cancellable</span> <span class=\"o\">=</span> <span class=\"n\">colorPicker</span><span class=\"o\">.</span><span class=\"nf\">publisher</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"n\">selectedColor</span><span class=\"p\">)</span>\n<span class=\"o\">.</span><span class=\"nf\">sink</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"k\">weak</span> <span class=\"k\">self</span><span class=\"p\">]</span> <span class=\"n\">color</span> <span class=\"k\">in</span>\n    <span class=\"k\">self</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">backgroundColor</span> <span class=\"o\">=</span> <span class=\"n\">color</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"the-uiaction-revolution\">The UIAction Revolution</h3>\n<p>It seems Apple‚Äôs love affair with <code class=\"language-plaintext highlighter-rouge\">UIAction</code> has a pointed purpose - it‚Äôs simply used all over the joint now.</p>\n\n<p>Which is great, because you know what feels incredibly tedious to do in 2020? The target-action pattern.</p>\n\n<p>It was birthed in the days of yore and fits Objective-C‚Äôs message sending paradigm extremely well - but whether you love the dino or hate it there‚Äôs simply no denying Swift is where the puck is going.</p>\n\n<p>As such, we can go from this:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span>\n    <span class=\"k\">let</span> <span class=\"nv\">navItem</span> <span class=\"o\">=</span> <span class=\"kt\">UIBarButtonItem</span><span class=\"p\">(</span><span class=\"nv\">barButtonSystemItem</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">done</span><span class=\"p\">,</span> <span class=\"nv\">target</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">action</span><span class=\"p\">:</span> <span class=\"kd\">#selector(</span><span class=\"nf\">dismissController</span><span class=\"kd\">)</span><span class=\"p\">)</span>\n    <span class=\"n\">navigationItem</span><span class=\"o\">.</span><span class=\"n\">leftBarButtonItem</span> <span class=\"o\">=</span> <span class=\"n\">navItem</span>\n<span class=\"p\">}</span>\n    \n<span class=\"kd\">@objc</span> <span class=\"kd\">func</span> <span class=\"nf\">dismissController</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">dismiss</span><span class=\"p\">(</span><span class=\"nv\">animated</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>To this:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">dismiss</span> <span class=\"o\">=</span> <span class=\"kt\">UIAction</span><span class=\"p\">(</span><span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"k\">weak</span> <span class=\"k\">self</span><span class=\"p\">]</span> <span class=\"n\">action</span> <span class=\"k\">in</span>\n        <span class=\"k\">self</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"nf\">dismiss</span><span class=\"p\">(</span><span class=\"nv\">animated</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n        \n    <span class=\"k\">let</span> <span class=\"nv\">navItem</span> <span class=\"o\">=</span> <span class=\"kt\">UIBarButtonItem</span><span class=\"p\">(</span><span class=\"nv\">systemItem</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">done</span><span class=\"p\">,</span> <span class=\"nv\">primaryAction</span><span class=\"p\">:</span> <span class=\"n\">dismiss</span><span class=\"p\">)</span>\n    <span class=\"n\">navigationItem</span><span class=\"o\">.</span><span class=\"n\">leftBarButtonItem</span> <span class=\"o\">=</span> <span class=\"n\">navItem</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>It‚Äôs hard for me to overstate how much better this approach feels. In some ways, it reminds of when the alert controller started supporting its block based approach as well. It‚Äôs chef‚Äôs kiss.</p>\n\n<p>Anyways, you don‚Äôt need to look far for UIKit controls that take <code class=\"language-plaintext highlighter-rouge\">UIAction</code> in its initializers (pull down menus, contextual menus, bar button items, switches, etc).</p>\n\n<p>Speaking of bar button items - they now accept menus as well:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">tbMenu</span> <span class=\"o\">=</span> <span class=\"kt\">UIMenu</span><span class=\"p\">(</span><span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"s\">\"\"</span><span class=\"p\">,</span> <span class=\"nv\">children</span><span class=\"p\">:</span> <span class=\"cm\">/* UIActions */</span><span class=\"p\">)</span>\n<span class=\"k\">return</span> <span class=\"kt\">UIBarButtonItem</span><span class=\"p\">(</span><span class=\"nv\">image</span><span class=\"p\">:</span> <span class=\"kt\">UIImage</span><span class=\"p\">(</span><span class=\"nv\">systemName</span><span class=\"p\">:</span> <span class=\"s\">\"list.number\"</span><span class=\"p\">),</span> <span class=\"nv\">menu</span><span class=\"p\">:</span> <span class=\"n\">buttonMenu</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>This means it‚Äôs now trivial to make the following UX demoed in the UIKIt Catalog for its toolbars:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/iOS14_toolbar.png\" role=\"presentation\" srcset=\"../assets/images/iOS14_toolbar.png\" /></p>\n\n<p>Which is a good thing, because that type of thing seems to be pushed in favor of action sheets. In fact, you can pretty much toss a <code class=\"language-plaintext highlighter-rouge\">UIMenu</code> or <code class=\"language-plaintext highlighter-rouge\">UIAction</code> in just about anything in UIKit such as buttons:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">menu</span> <span class=\"o\">=</span> <span class=\"kt\">UIMenu</span><span class=\"p\">(</span><span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"s\">\"\"</span><span class=\"p\">,</span> <span class=\"nv\">children</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">UIAction</span><span class=\"p\">(</span><span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"s\">\"Trash It\"</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">handler</span> <span class=\"k\">in</span> <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Sup\"</span><span class=\"p\">)}])</span>\n \n<span class=\"k\">let</span> <span class=\"nv\">button</span> <span class=\"o\">=</span> <span class=\"kt\">UIButton</span><span class=\"p\">(</span><span class=\"nv\">frame</span><span class=\"p\">:</span> <span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">44</span><span class=\"p\">))</span>\n<span class=\"n\">button</span><span class=\"o\">.</span><span class=\"nf\">setImage</span><span class=\"p\">(</span><span class=\"kt\">UIImage</span><span class=\"p\">(</span><span class=\"nv\">systemName</span><span class=\"p\">:</span> <span class=\"s\">\"trash\"</span><span class=\"p\">),</span> <span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">)</span>\n<span class=\"n\">button</span><span class=\"o\">.</span><span class=\"n\">role</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">normal</span>\n<span class=\"n\">button</span><span class=\"o\">.</span><span class=\"n\">menu</span> <span class=\"o\">=</span> <span class=\"n\">menu</span>\n\n<span class=\"c1\">// If you don't set this, the button either fires via Target/Action or the UIAction it got</span>\n<span class=\"n\">button</span><span class=\"o\">.</span><span class=\"n\">showsMenuAsPrimaryAction</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n\n<span class=\"n\">view</span><span class=\"o\">.</span><span class=\"nf\">addSubview</span><span class=\"p\">(</span><span class=\"n\">button</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Now, the button will toss up the ol‚Äô menu:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/iOS14_buttonMenu.gif\" role=\"presentation\" srcset=\"../assets/images/iOS14_buttonMenu.gif\" /></p>\n\n<h3 id=\"uilistcontentview\">UIListContentView</h3>\n<p>There is a whole new way to configure what are now called ‚Äúlists‚Äù. For example, you can make what‚Äôs basically a table view with a content list:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span>\n        \n    <span class=\"k\">var</span> <span class=\"nv\">config</span><span class=\"p\">:</span><span class=\"kt\">UIListContentConfiguration</span> <span class=\"o\">=</span> <span class=\"kt\">UIListContentConfiguration</span><span class=\"o\">.</span><span class=\"nf\">subtitleCell</span><span class=\"p\">()</span>\n    <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s\">\"Test Cell\"</span>\n    <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">secondaryText</span> <span class=\"o\">=</span> <span class=\"s\">\"Subtitle\"</span>\n        \n    <span class=\"k\">let</span> <span class=\"nv\">list</span><span class=\"p\">:</span><span class=\"kt\">UIListContentView</span> <span class=\"o\">=</span> <span class=\"kt\">UIListContentView</span><span class=\"p\">(</span><span class=\"nv\">configuration</span><span class=\"p\">:</span> <span class=\"n\">config</span><span class=\"p\">)</span>\n    <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"n\">frame</span> <span class=\"o\">=</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">bounds</span>\n        \n    <span class=\"k\">let</span> <span class=\"nv\">stackView</span> <span class=\"o\">=</span> <span class=\"kt\">UIStackView</span><span class=\"p\">(</span><span class=\"nv\">frame</span><span class=\"p\">:</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">bounds</span><span class=\"p\">)</span>\n    <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"nf\">addSubview</span><span class=\"p\">(</span><span class=\"n\">stackView</span><span class=\"p\">)</span>\n    <span class=\"n\">stackView</span><span class=\"o\">.</span><span class=\"nf\">addArrangedSubview</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/iOS14_contentList.png\" role=\"presentation\" srcset=\"../assets/images/iOS14_contentList.png\" /></p>\n\n<p>There‚Äôs a new <code class=\"language-plaintext highlighter-rouge\">UIViewConfigurationState</code> which, in turn, a <code class=\"language-plaintext highlighter-rouge\">UICellConfigurationState</code> inherits from. These all play a part in the updates to how you can setup cells in both collection and table views, which I suspect will be the main topic in ‚Äú<a href=\"https://developer.apple.com/videos/play/wwdc2020/10027/\">Modern Cell Configuration</a>‚Äù</p>\n\n<h3 id=\"sidebars\">Sidebars</h3>\n<p>Look, <code class=\"language-plaintext highlighter-rouge\">UISplitViewController</code> went absolutely nuts in this release. Just look at the diff:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/iOS14_diffSplit.png\" role=\"presentation\" srcset=\"../assets/images/iOS14_diffSplit.png\" /></p>\n\n<p>One reason why? Due to the new <code class=\"language-plaintext highlighter-rouge\">.sidebar</code> stuff which allows for a three column layout. You see this all over in iOS 14 - for example Mail and Notes. And now, we‚Äôve also got the whole new list thing going on in collection view. That‚Äôs used heavily in the sidebar world.</p>\n\n<p>But how do we handle all of that collapsing tomfoolery? Won‚Äôt <em>that</em> be a nightmare, even with diffable datasource?</p>\n\n<p>No, of course it won‚Äôt. You can diff things section by section now:\n<img class=\"lozad rounded center-img\" data-src=\"../assets/images/iOS14_diffDiff.png\" role=\"presentation\" srcset=\"../assets/images/iOS14_diffDiff.png\" /></p>\n\n<p>You put it all together, and collection view with split view controller just became a go-to choice for many app‚Äôs UX.</p>\n\n<h3 id=\"uiscribbleinteraction\">UIScribbleInteraction</h3>\n<p>Much like drag and drop and cursor effects work, there‚Äôs a new interaction for the scribble mechanisms found on iPadOS. The good thing is that you don‚Äôt need to do much of anything - as stock UIKit controls get the scribble stuff for free.</p>\n\n<p>But, if you‚Äôve got something more custom or need to have more control due to your own situation - doing so is easy enough:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">TestViewController</span><span class=\"p\">:</span> <span class=\"kt\">UIViewController</span><span class=\"p\">,</span> <span class=\"kt\">UIScribbleInteractionDelegate</span> <span class=\"p\">{</span>    \n    <span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span>\n        \n        <span class=\"k\">let</span> <span class=\"nv\">nosScribble</span> <span class=\"o\">=</span> <span class=\"kt\">UIScribbleInteraction</span><span class=\"p\">(</span><span class=\"nv\">delegate</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"p\">)</span>\n        <span class=\"k\">let</span> <span class=\"nv\">text</span> <span class=\"o\">=</span> <span class=\"kt\">UITextField</span><span class=\"p\">(</span><span class=\"nv\">frame</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">zero</span><span class=\"p\">)</span>\n        <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"nf\">addInteraction</span><span class=\"p\">(</span><span class=\"n\">nosScribble</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"kd\">func</span> <span class=\"nf\">scribbleInteraction</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">interaction</span><span class=\"p\">:</span> <span class=\"kt\">UIScribbleInteraction</span><span class=\"p\">,</span> <span class=\"n\">shouldBeginAt</span> <span class=\"nv\">location</span><span class=\"p\">:</span> <span class=\"kt\">CGPoint</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Bool</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// You thought you could scribble and you.were.wrong.</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>It‚Äôs great to see Apple leverage similar API across the board now with these interaction delegates and <code class=\"language-plaintext highlighter-rouge\">UIAction</code> being used across the board. If you figure out how one works, discovering the rest is easy.</p>\n\n<h3 id=\"bonus-round\">Bonus Round</h3>\n<ul>\n  <li>Nice little user interface idiom off of <code class=\"language-plaintext highlighter-rouge\">UIDevice</code> - <code class=\"language-plaintext highlighter-rouge\">.mac</code>. Though I will say the header is worded very specifically:\n    <div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"kd\">@available</span><span class=\"p\">(</span><span class=\"n\">iOS</span> <span class=\"mf\">14.0</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">)</span>\n <span class=\"k\">case</span> <span class=\"n\">mac</span> <span class=\"o\">=</span> <span class=\"mi\">5</span> <span class=\"c1\">// Optimized for Mac UI</span>\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<p>Optimized <em>for</em> mac? That doesn‚Äôt outright say it <em>is</em> a mac app. As more releases follow, I suspect the lines will only get more blurred as to what a mac app is anymore.</p>\n\n<ul>\n  <li>The added <code class=\"language-plaintext highlighter-rouge\">.automatic</code> style for a lot of controls. Basically, it allows for Catalyst apps to be macOS-y when they are on macOS, and iOS-y when they aren‚Äôt.</li>\n  <li>Pointer lock states are here, and are yet another thing to manage on a controller instance. You override <code class=\"language-plaintext highlighter-rouge\">prefersPointerLocked</code> to return what you prefer, but like with the home indicator there‚Äôs a chance it may not be honored. Also like the home indicator, status bar and other similar view controller things - you can request an update for this value:</li>\n</ul>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">setNeedsUpdateOfPrefersPointerLocked</span><span class=\"p\">()</span>\n</code></pre></div></div>\n<ul>\n  <li>There‚Äôs a <code class=\"language-plaintext highlighter-rouge\">title</code> property on <code class=\"language-plaintext highlighter-rouge\">UISwitch</code> but I couldn‚Äôt get it do anything on iOS. I assume this is respected only on macOS.</li>\n  <li>There‚Äôs a list layout for collection view now!</li>\n</ul>\n\n<h3 id=\"final-thoughts\">Final Thoughts</h3>\n<p>UIKit got some serious juice in this release. I suspect it will for a long time, as SwiftUI is simply putting similar controls under its own wings in a declarative way without even needing a representable instance for a lot of these things.</p>\n\n<p>Plus - my wish came true. Catalyst apps built on UIKit look better already on macOS by virtue of Apple‚Äôs new design language that bring the two closely together. I‚Äôm down! As always, it‚Äôs been my pleasure diving into UIKit‚Äôs diffs on an annual basis. There‚Äôs a lot to love here.</p>\n\n<p>Until next time ‚úåÔ∏è.</p>",
            "summary": "layout: post tags: [‚ÄúUIKit‚Äù] title: ‚ÄúiOS 14: Notable UIKit Additions‚Äù writtenBy: Jordan Morgan writtenByTwitter: ‚Äúhttps://www.twitter.com/jordanmorgan10‚Äù description: ‚ÄúIf you thought UIKit was getting pushed to the side with the rise of SwiftUI, you were wrong. There‚Äôs a lot that‚Äôs new, improved or revamped - let‚Äôs take a look.‚Äù image: /assets/images/logo.png ‚Äî",
            "date_published": "2020-06-23T00:00:00-05:00",
            "date_modified": "2020-06-23T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": []},{
            "id": "http://localhost:4000/WWDC-2020-The-Pregame-Quiz",
            "url": "http://localhost:4000/WWDC-2020-The-Pregame-Quiz/",
            "title": "WWDC 2020: The Pregame Quiz",
            "content_html": "<p>The very first virtual dub dub is coming in hot one week from today! Will we get a juiced up version of Catalyst, a shot of stability to SwiftUI or will UIKit dark horse the whole show and get a mountain of new goodies?</p>\n\n<p>We‚Äôll know soon in seven days, but until then let‚Äôs gear up with the sixth annual Swiftjective-C WWDC Pregame Quiz!</p>\n\n<p>If you‚Äôd like a quick primer on how this all works or how it got started, check out the first five quizzes from <a href=\"http://localhost:4000/WWDC-2015-The-Pregame-Quiz\">2015</a> ,<a href=\"http://localhost:4000/WWDC-2016-The-Pregame-Quiz\">2016</a>, <a href=\"http://localhost:4000/WWDC-2017-The-Pregame-Quiz\">2017</a> ,<a href=\"http://localhost:4000/WWDC-2018-The-Pregame-Quiz\">2018</a> and <a href=\"http://localhost:4000/WWDC-2019-The-Pregame-Quiz\">2019</a>.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">Now</span> <span class=\"p\">{</span>\n   <span class=\"kt\">Lets</span><span class=\"p\">()</span>\n      <span class=\"o\">.</span><span class=\"nf\">start</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"ground-rules\">Ground Rules</h3>\n\n<p>There are three rounds, and the point break down is as follows:</p>\n\n<ul>\n  <li><strong>Round 1</strong> ‚Äì 1 point each answer</li>\n  <li><strong>Round 2</strong> - 2 points each answer</li>\n  <li><strong>Round 3</strong> - 3 points each answer</li>\n</ul>\n\n<p>The last question of each round is an optional wildcard question. Get it right, and your team gets <strong>4</strong> <strong>points</strong>, <em>but</em> miss it and the team will be <strong>deducted 2 points</strong>.</p>\n\n<h3 id=\"round-1xcode-xtras\">Round 1‚Ää‚Äî‚ÄäXcode Xtras</h3>\n\n<p><strong>Question 1:</strong><br />\nOur defacto I.D.E. for Apple development shipped its 1.0 release in fall 2003. What previous I.D.E. was it initially based on, developed by NeXT?</p>\n\n<p><strong>Question 2:</strong><br />\nWe all savor the utility of Xcode‚Äôs debugging back end, LLDB - but we didn‚Äôt always have it. Starting with Xcode 5.0, LLDB took over as the primary debugging back end over which previous technology?</p>\n\n<p><strong>Question 3:</strong><br />\nBelieve it or not, Xcode used to be a paid download. It wasn‚Äôt until after 4.1 it was made free - what was its last sticker price before doing so?</p>\n\n<p><strong>Question 4:</strong> <br />\nLet‚Äôs go more recent. Which major version of Xcode was the first to be released with support for Swift - 4, 5, 6 or 7?</p>\n\n<p><strong>Wildcard:</strong><br />\nSwift Playgrounds was initially launched integrated into Xcode, but later took on its own life on iPadOS. Aimed at teaching newcomers code through fun, colorful tutorials based around controlling playful monsters on an island - what were the names of the three monsters included in the initial lessons?</p>\n\n<h3 id=\"round-2swiftui-stumpers\">Round 2‚Ää‚Äî‚ÄäSwiftUI Stumpers</h3>\n\n<p><strong>Question 1:</strong><br />\nOne of SwiftUI‚Äôs main draws is the live previewing canvas, ever updating as we type. As we make edits, Xcode compiles the SwiftUI <code class=\"language-plaintext highlighter-rouge\">View</code> exclusively from the rest of the project.</p>\n\n<p>When it does, it injects the new implementation back into the running application using what Swift language feature?</p>\n\n<p><strong>Question 2:</strong><br />\nAt first glance, one might assume SwiftUI‚Äôs <code class=\"language-plaintext highlighter-rouge\">View</code> type accepts variadic generics within its <code class=\"language-plaintext highlighter-rouge\">Viewuilder</code> implementation:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kt\">HStack</span> <span class=\"p\">{</span>\n        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Sup\"</span><span class=\"p\">)</span>\n        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Hi\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kt\">VStack</span> <span class=\"p\">{</span>\n        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Sup\"</span><span class=\"p\">)</span>\n        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Hi\"</span><span class=\"p\">)</span>\n        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Yo\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>But it‚Äôs actually powered via extensions, with how many different <code class=\"language-plaintext highlighter-rouge\">buildBlock</code> implementations allowing up to X views to be included?</p>\n\n<p><strong>Question 3:</strong><br />\nSwiftUI was said to be called Amber internally at Apple, but to obfuscate it within the O.S. they put it under a framework named what?</p>\n\n<p><strong>Question 4:</strong> <br />\nSwiftUI simply wouldn‚Äôt be possible without Swift 5.1‚Äôs feature set. What four core pieces of API added in that release make SwiftUI syntax like this possible?</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Hello World\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><strong>Wildcard:</strong><br />\nSwiftUI uses bindings and state property wrappers liberally to control tree diffs and UI updates. A common data type to represent progress is either a Double or Float.</p>\n\n<p>If you were to write:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">progress</span> <span class=\"o\">=</span> <span class=\"mf\">1.2</span>\n</code></pre></div></div>\n\n<p>What the Swift compiler default this type to - a Double or a Float?</p>\n\n<h3 id=\"round-3dub-dub-venues-and-history\">Round 3‚Ää‚Äî‚ÄäDub Dub Venues and History</h3>\n\n<p><strong>Question 1:</strong><br />\nThe first WWDC took place in Santa Clara in what year?</p>\n\n<p><strong>Question 2:</strong><br />\nDub Dub has been officially held in three different locations, all starting with ‚ÄúSan‚Äù - can you name them all?</p>\n\n<p><strong>Question 3:</strong><br />\nWhich of these bands <em>hasn‚Äôt</em> performed at a WWDC bash?</p>\n\n<p><strong>A:</strong> The Barenaked Ladies<br />\n<strong>B:</strong> Good Charlotte<br />\n<strong>C:</strong> Fall Out Boy<br />\n<strong>D:</strong> Paramore<br /></p>\n\n<p><strong>Question 4:</strong> <br />\nAt WWDC 2008, what product was announced that has since been labeled by Yahoo! News as ‚Äúone of the biggest PR disasters in Apple history‚Äù and was officially discontinued in 2012?</p>\n\n<p><strong>Wildcard:</strong><br />\nPaper badges were the norm for WWDC badges for much of its history. Can you name the year they finally made the switch to plastic badges for the first time?</p>\n\n<h3 id=\"answer-key\">Answer Key</h3>\n<p><b>Round 1:</b></p>\n<ol>\n  <li><a href=\"https://en.wikipedia.org/wiki/Project_Builder\">Project Builder, or PBX</a></li>\n  <li><a href=\"https://en.wikipedia.org/wiki/GNU_Debugger\">The GNU Debugger, or GDB</a></li>\n  <li><a href=\"http://appleinsider.com/articles/11/07/20/apple_makes_xcode_free_to_all_with_release_of_4_1_on_mac_app_store.html\">$4.99. Not bad for an entire development suite.</a></li>\n  <li>6.0</li>\n  <li>Wildcard: Byte, Blue and Hopper!</li>\n</ol>\n\n<p><b>Round 2:</b></p>\n<ol>\n  <li><a href=\"https://forums.swift.org/t/how-does-the-hot-reloading-work-in-xcode11/25312/5\">Dynamic Method Replacement</a></li>\n  <li><a href=\"https://twitter.com/rockbruno_/status/1194225536949792769?s=20\">10</a></li>\n  <li><a href=\"https://twitter.com/_inside/status/1141758374285103111?s=20\">TimerSupport</a></li>\n  <li>Function Builders, Opaque Return Types, Implicit Return Statements and Property Wrappers. I wrote about this <a href=\"https://www.swiftjectivec.com/swiftui-what-just-happened/\">here</a>.</li>\n  <li>Wildcard: A Double.</li>\n</ol>\n\n<p><b>Round 3:</b></p>\n<ol>\n  <li>1987, making dub dub a good 33 years old.</li>\n  <li>Santa Clara, San Francisco and San Jose.</li>\n  <li>D, Paramore.</li>\n  <li>MobileMe</li>\n  <li>Wildcard: 2009</li>\n</ol>",
            "summary": "The very first virtual dub dub is coming in hot one week from today! Will we get a juiced up version of Catalyst, a shot of stability to SwiftUI or will UIKit dark horse the whole show and get a mountain of new goodies?",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2020-06-15T00:00:00-05:00",
            "date_modified": "2020-06-15T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Trivia"]},{
            "id": "http://localhost:4000/The-Big-Update",
            "url": "http://localhost:4000/The-Big-Update/",
            "title": "The Big Update",
            "content_html": "<p>Part of living life as the proud owner of a P.U.F. (paid up front) app is the reality of the bell curve. You‚Äôve seen this if you‚Äôve looked at anyone‚Äôs numbers who makes these kinds of apps. It‚Äôs a product cycle of ups and downs.</p>\n\n<p>Regardless of your pricing scheme, you likely live life on a bell curve too. But with P.U.F. apps, that cycle is somewhat exacerbated. As such, you live <strong>with</strong> the dog days of trickle-in downloads and live <strong>for</strong> the big breaks that come when sales sky rocket.</p>\n\n<p>A lot was riding on Spend Stack‚Äôs 1.2 update. Thankfully, it went well and topped the charts in several countries in the Finance category. Let‚Äôs dig in!</p>\n\n<h3 id=\"the-result\">The Result</h3>\n<p>If you follow me on Twitter, you already have an idea of how things went sales wise:</p>\n\n<div class=\"jekyll-twitter-plugin\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Here&#39;s coming in close to year 1. I wanted to write about this *a lot* more in-depth but I&#39;m in the middle of building a house and my writing time is very minimal.<br /><br />Takeways:<br /><br />1) I believe you *can* make a living on the App Store.<br />2) I&#39;ve learned a ton about product+marketing <a href=\"https://t.co/oVrgt4vcR3\">https://t.co/oVrgt4vcR3</a> <a href=\"https://t.co/MEtFblkhla\">pic.twitter.com/MEtFblkhla</a></p>&mdash; Jordan Morgan (@JordanMorgan10) <a href=\"https://twitter.com/JordanMorgan10/status/1269629494052237316?ref_src=twsrc%5Etfw\">June 7, 2020</a></blockquote>\n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div>\n\n<p>I have acquired a large chunk of my revenue from this update alone. It‚Äôs like a launch in several ways, in that you get the initial spike and then ride the wave down. The thing I was most interested in, though, was what kind of numbers I‚Äôd need for this to happen:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/chartIpad.png\" role=\"presentation\" srcset=\"../assets/images/chartIpad.png\" /></p>\n\n<blockquote>\n  <p>Also recall that charting on the iPad and iPhone are different. It also charted #1 on the iPhone in several countries (U.S. included) but the landscape screenshot of the iPad looked nicer ‚ú®.</p>\n</blockquote>\n\n<p>I‚Äôve long wondered what kind of numbers I‚Äôd need to chart #1 in Finance, and I seemingly got my answer around mid-afternoon on May 25th. It was just a bit short of a 1,000 downloads. Though, the next day I saw almost half of those numbers at 500 and change and still remained atop the list. By the third day I bumped down, oscillating between #3-#7 at 300ish downloads.</p>\n\n<p>So, what did it? Was it solely the update?</p>\n\n<p>No - it was absolutely all because of the press. I finally have corrected the biggest mistake I pointed out regarding my <a href=\"http://localhost:4000/On-Launching-Your-Indie-App\">launch</a>.</p>\n\n<h3 id=\"timeline\">Timeline</h3>\n<p>I kind of happened upon this big update. I started by rewriting some of the core parts of the app in Swift. Beforehand, Spend Stack was previously all Objective-C, a symptom of starting it so many years ago when Swift was still the wild west and changed how it split strings every other Tuesday.</p>\n\n<p>Then, Apple announced the support for exporting Apple Card statements. So I hopped on that. Meanwhile, I was already adding multiple currencies. So I‚Äôm doing this - and then I check my inbox and see another pile of emails asking for recurring pricing. ‚ÄúScrew it‚Äù, I say, ‚ÄúYou‚Äôre already in neck deep - what‚Äôs another feature at this point?‚Äù</p>\n\n<p>This is what the thinkpieces on Medium tell you <em>not</em> to do.</p>\n\n<p>Luckily, I never read those. And mostly because I can‚Äôt due to the 48 modals they show as soon as you load an article. But I‚Äôm glad I took my time, because moving to Swift has paid off in many ways. I‚Äôve tweeted here and there about some of the things it opened up:</p>\n\n<p><strong>SwiftUI for modal popups</strong><br /></p>\n\n<div class=\"jekyll-twitter-plugin\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Got most of Spend Stack&#39;s cursor support done last night ‚ú® The context menu&#39;s originating from the cursor coordinates is so so üòçüòçüòç Apple did such a great job with the execution. <a href=\"https://t.co/RSooDdyRnH\">pic.twitter.com/RSooDdyRnH</a></p>&mdash; Jordan Morgan (@JordanMorgan10) <a href=\"https://twitter.com/JordanMorgan10/status/1252292541720014848?ref_src=twsrc%5Etfw\">April 20, 2020</a></blockquote>\n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div>\n\n<p><strong>Combine for, like, everything</strong><br /></p>\n\n<div class=\"jekyll-twitter-plugin\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">In other news....<br /><br />Combine + Diffable Data Source = üòç <br /><br />Multiple window support is waaaaay easier now! <a href=\"https://t.co/M3klj0IqPN\">pic.twitter.com/M3klj0IqPN</a></p>&mdash; Jordan Morgan (@JordanMorgan10) <a href=\"https://twitter.com/JordanMorgan10/status/1220514774880071680?ref_src=twsrc%5Etfw\">January 24, 2020</a></blockquote>\n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div>\n\n<p>But putting the tech discussion aside, I eventually came up with a plan for all of the work I was doing. I figured since I was already investing a lot of time into this update, I should shoot for my ideal press timeline. The magic number for me and large updates?</p>\n\n<p><strong>Six weeks</strong>, just like Apple asks for.</p>\n\n<p>Once the beta was feature completed, I decided that I would at the same time:</p>\n\n<ul>\n  <li>Open a public beta and,</li>\n  <li>Reach out to the press and Apple on that same day.</li>\n</ul>\n\n<p>I used Things 3 to keep it all on track:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/thingsUpdate.png\" role=\"presentation\" srcset=\"../assets/images/thingsUpdate.png\" /></p>\n\n<p>Essentially the flow was something like this:</p>\n\n<ul>\n  <li>Get development done.</li>\n  <li>Get blog posts and marketing assets finished.</li>\n  <li>Announce a beta.</li>\n  <li>Reach out to the press (as mentioned above).</li>\n  <li>Experiment with some form of paid advertising.</li>\n</ul>\n\n<p>In the end it worked out as good as it could‚Äôve. <a href=\"https://www.macstories.net/reviews/spend-stack-adds-apple-card-import-recurring-costs-per-list-currencies-ipad-improvements-and-more/\">MacStories</a>, <a href=\"https://podcasts.apple.com/us/podcast/macstories-perspective-icons-big-spend-stack-update/id1510451759?i=1000476190744\">Unwind</a>, <a href=\"https://9to5mac.com/2020/05/25/spend-stack-apple-card-more/\">9to5 Mac</a>, <a href=\"https://forums.macrumors.com/threads/app-recap-magnet-parcel-unfold-and-major-app-updates.2239187/\">MacRumors</a> and a few others  covered it. Then, Thursday came around Apple featured it (where it still is today):</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/featureIphone.png\" role=\"presentation\" srcset=\"../assets/images/featureIphone.png\" /></p>\n\n<p>That last point about experimenting with paid advertising is another blog post, and an important one as I think a lot indies simply overlook it. But I‚Äôll sum up what I‚Äôve experienced so far:</p>\n\n<ul>\n  <li>Twitter: Boosting posts is worthless.</li>\n  <li>Twitter: Setting up a real campaign had a good R.O.I.</li>\n  <li>Reddit: Extremely hit and miss.</li>\n</ul>\n\n<p>But this all firms up what I‚Äôve always known: If you want the numbers, you need the press. The man at the top of the mountain didn‚Äôt fall there, he had press that rocket launched him to the top.</p>\n\n<blockquote>\n  <p>The other sales bump I had this year was when Andy made Spend Stack his Pick of the Week on <a href=\"https://twit.tv/shows/macbreak-weekly/episodes/702?autostart=false\">Macbreak</a>.</p>\n</blockquote>\n\n<p>You might think this bit of the post is entirely frustrating. I get it, of course press helps. You don‚Äôt need an MBA to figure that out.</p>\n\n<p>But know this - I‚Äôve launched things with zero press, zero returned emails, zero retweets or likes and zero downloads. It takes time and relationship building. In a way, I feel like I‚Äôm in a good spot to talk about it because I‚Äôve lived on both sides of the fence. It‚Äôs quite a topic, and I may or may not be writing a book on the side dealing with things like this ü§´.</p>\n\n<h3 id=\"beta\">Beta</h3>\n<p>Running a beta was such a great experience, it only made me feel remorse that I hadn‚Äôt done it in the first place. If anything, this release gave me a case of the what-ifs:</p>\n\n<ul>\n  <li>What <em>if</em> I had reached the press correctly on my initial launch?</li>\n  <li>What <em>if</em> I had done a public beta first before launching?</li>\n  <li>What <em>if</em> I experimented with advertising long ago?</li>\n</ul>\n\n<p>Ah, but hindsight bats 1.000. After all, experience is what you need long after you finally have it. But I‚Äôve got lessons to take forward from here.</p>\n\n<p>All told, the beta capped at 615 users. My goal was 500, and for a three week period, that was something I was happy with. I learned a lot about how people think about the app and how they use it. The conversations I had with users is directing where I‚Äôm taking things next.</p>\n\n<p>I think for whenever I make another app, the process will look like this:</p>\n\n<ul>\n  <li>Work on the app, define a lean MVP.</li>\n  <li>Update everyone in a thread (S.T.S. did this masterfully with <a href=\"https://twitter.com/stroughtonsmith/status/1270405385816625152?s=20\">Pastel</a>).</li>\n  <li>Beta it when it‚Äôs beta-able.</li>\n  <li>Follow my 6 week timeline again.</li>\n</ul>\n\n<h3 id=\"backwards-momentum\">Backwards Momentum</h3>\n<p>Perhaps you‚Äôre already aware of Spend Stack‚Äôs history. Or, maybe you just stumbled in here. As I hinted at above, events leading up to chart toppin‚Äô was a very long, winding, complicated and grating road.</p>\n\n<p>It took five years to get here!</p>\n\n<p>I‚Äôve worked on Spend Stack for a long time. In fact, I had previously released a version of it in 2012 which flopped gloriously:</p>\n\n<div class=\"jekyll-twitter-plugin\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Here&#39;s an important thing to remember if you&#39;re just following along: This thing was the 1st version of Spend Stack, &amp; it was downloaded *18* times. It was a complete failure.<br /><br />I&#39;m proud that I&#39;ve hit #1 paid for Finance, but it didn&#39;t start that way at all. Just kept iterating! <a href=\"https://t.co/w0UYD88Ppg\">pic.twitter.com/w0UYD88Ppg</a></p>&mdash; Jordan Morgan (@JordanMorgan10) <a href=\"https://twitter.com/JordanMorgan10/status/1265663472425205762?ref_src=twsrc%5Etfw\">May 27, 2020</a></blockquote>\n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div>\n\n<p>Look, I‚Äôm not out in the streets in a Lamborghini wearing rock star shades bumping my beats while the money pours in wearing a shirt that says ‚ÄúI MAD$ IT‚Äù. But, I‚Äôm also <em>not</em> putting out something that gets no traction and that‚Äôs not by accident.</p>\n\n<p>What we do often overlook is that any form of success takes time. People want to be some incarnation of an indie, but rarely face the reality of having to work on your product for five years before you hit momentum.</p>\n\n<p>This goes against almost all of the product advice you hear on the Internet. If your thing doesn‚Äôt work, you need to give up on the thing, right?</p>\n\n<p>But why?</p>\n\n<p>Well, I think it‚Äôs because almost all of those texts deal with software as a service, and most of the time our projects in the indie space don‚Äôt fit into that mold. We don‚Äôt have V.C.‚Äôs to report to, a board wanting results or really any stakeholders needing returns. We get to do our own thing, and that‚Äôs what‚Äôs so thrilling about the App Store to me.</p>\n\n<p>We‚Äôre quick to say the gold rush is over, and that may be true - but the fun of it all sure isn‚Äôt.</p>\n\n<p>So, we can‚Äôt look for advice in the same exact ways, but we can take some of the good bits of their thoughts and apply it. The App Store economics are not the same as other storefronts. It‚Äôs really a matter of building something quality and tweaking it as you go. After all, Spend Stack started out as a grocery list app. It <em>can</em> be used for that still, but that‚Äôs no longer its identity. Also, it has a lot less pink üôà.</p>\n\n<h3 id=\"invaluable-insight\">Invaluable Insight</h3>\n<p>The amount I‚Äôve learned about what people think Spend Stack is, what they use it for and what they <em>want</em> to use it for has been the best part of this. If I want to take it to the next level, I‚Äôve got a lot of validated data points that light the path I would need to take.</p>\n\n<p>We make these apps to solve our own problems, and when we sell them it‚Äôs easy to forget that you are now being paid to solve everyone else‚Äôs, too. That‚Äôs not to say you should follow each thread you get and run with it - but you should definitely listen.</p>\n\n<p>Learning about how to do the product thing is new to me, but I‚Äôm starting to get the ropes. Spend Stack is a budgeting and expense tracking app, and I‚Äôll be leaning into that more and more.</p>\n\n<p>The biggest thing for me right now is to make it clear about the value proposition Spend Stack brings, show people how to use it and make sure I cut down on misplaced expectations.</p>\n\n<h3 id=\"some-random-takeaways\">Some Random Takeaways</h3>\n<p>To round things out, here‚Äôs some other random thoughts:</p>\n\n<ul>\n  <li>Praise be, Apple finally used my promo art! #TookAlmostAYear</li>\n  <li>Visibility/ASO wins, crappy apps can and will blow you out of the water sales wise if they‚Äôve been out for years and rank high.</li>\n  <li>It takes time - this is truly a marathon.</li>\n  <li>If you‚Äôre not building relationships with the press, you should have started yesterday.</li>\n  <li>And if you do reach out, give them plenty of time. They need to use your app, form thoughts and then write over it. It takes a lot, and they were already doing a lot when you emailed them.</li>\n  <li>Am I happy going P.U.F.? I think so, but there‚Äôs no question Spend Stack would be a few orders of magnitude larger if I hadn‚Äôt. But so would the time commitment, and I quite like my day job that sends me to WWDC and around the world for free, has flexible hours, fun problems and good pay. So, if I can do both - then why not?</li>\n</ul>\n\n<p>Lastly, as mentioned in the lead, livin‚Äô that P.U.F. life takes you a bell curve product cycle. I also noted a few of the ‚Äúups‚Äù that I‚Äôve had so far in the first ten months:</p>\n\n<div class=\"jekyll-twitter-plugin\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">In my first 10 months &gt;<br /><br />1) Initial launch <br />2) Retail demo<br />3) App Store preview video; search ads went from 1-10 week to 75<br />4) 1.2 Update (~30% of my total numbers) <a href=\"https://t.co/7XczP8TU8l\">https://t.co/7XczP8TU8l</a></p>&mdash; Jordan Morgan (@JordanMorgan10) <a href=\"https://twitter.com/JordanMorgan10/status/1269647593614827525?ref_src=twsrc%5Etfw\">June 7, 2020</a></blockquote>\n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div>\n\n<h3 id=\"final-thoughts\">Final Thoughts</h3>\n<p>I‚Äôve been lucky to have some exciting releases and features with Spend Stack so far in its first 10 months on the  market. There‚Äôs been so much learning taking place. The App Store is a fickle beast, ever changing its inner workings on how features work, the search algorithm ranks or apps are shown on a whim. Selling on such a store front is a bit like building a house whose core ideas remain the same, but the foundation keeps changing out from under you half way through construction.</p>\n\n<p>No matter - I hope more than anything this just demonstrates that getting downloads on the App Store is factor of a few core things that you absolutely can work towards as mentioned above. You truly get to make your own luck. One day you make enough to cover a latte, the next week you make enough to buy everyone a steak dinner. Woot woot!</p>\n\n<p>Until next time ‚úåÔ∏è.</p>",
            "summary": "Part of living life as the proud owner of a P.U.F. (paid up front) app is the reality of the bell curve. You‚Äôve seen this if you‚Äôve looked at anyone‚Äôs numbers who makes these kinds of apps. It‚Äôs a product cycle of ups and downs.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2020-06-10T00:00:00-05:00",
            "date_modified": "2020-06-10T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["The Indie Dev Diaries"]},{
            "id": "http://localhost:4000/How-a-Feature-Ships",
            "url": "http://localhost:4000/How-a-Feature-Ships/",
            "title": "How a Feature Ships",
            "content_html": "<p>Ah yes, the feature.</p>\n\n<p>A core tenet of both software development and startup life, their existence commands as much mental processing as it does actual coding and manpower. While we each claim to follow our own heuristics that lead us to the ever moving target of being ‚Äúfeature complete‚Äù, I‚Äôve come to appreciate the process and I thought I‚Äôd document what it looks like for me from a recent example.</p>\n\n<p>The feature in question for Spend Stack? The tent pole ‚Äúnice to have‚Äù, and incredibly fun, feature in any iOS app: <strong>custom icons</strong>.</p>\n\n<p>What follows is a mental scribble of how the process takes place for me.</p>\n\n<h3 id=\"the-validation\">The Validation</h3>\n<p>The first lesson I‚Äôve learned in terms of product development is this: Ask some validation questions early and often.</p>\n\n<p>Do you really need to do this? Does it help you achieve a better product, higher quality app or a more entertaining game?</p>\n\n<p>And custom icons is a great example. Why? Because a gillion great, high quality apps exist that don‚Äôt leverage the feature at all. But, what custom icons does bring to the table, it brings very well. It‚Äôs something that many apps overlook or are simply ignorant to - and that is the simple act of bringing about joy in our software.</p>\n\n<p>That‚Äôs right, it‚Äôs about to get all Marie Kondo up in here.</p>\n\n<p>But unlike the undisputed organizational people‚Äôs champ, here we bring joy by simply being <em>fun</em>. And no matter what your app‚Äôs voice is (another blog post in of itself), it can pay to tactfully elicit joy. And that mental thread is what gave me the ‚Äúgo ahead‚Äù to spend time creating such a feature.</p>\n\n<p>So, we validated the thing we want to add. What‚Äôs next?</p>\n\n<h3 id=\"thedesign\">The‚Ä¶Design?</h3>\n<p>Arguably the most challenging part of the entire process isn‚Äôt writing the code or arguing your stance to make the thing, it‚Äôs without question designing said thing. Here is where most of us find ourselves getting lost, losing motivation or simply berating our own work to the point of leaving it behind altogether.</p>\n\n<p>Put simply, we start with a pile of junk. Let‚Äôs call it like it is, our first drafts usually suck. I know that‚Äôs true for me, and probably for most of you reading this. As I mentioned in another <a href=\"http://localhost:4000/Can-You-Learn-Design\">post</a>:</p>\n\n<blockquote>\n  <p>‚Ä¶The common indie dev learned all about retain cycles and pointers instead of color theory and typography‚Ä¶</p>\n</blockquote>\n\n<p>Put simply, design isn‚Äôt natural for a lot of us. So, here‚Äôs what I‚Äôve come to do:</p>\n\n<ol>\n  <li>Find Apple‚Äôs, or other apps you respect, who‚Äôve made what you‚Äôre trying to make.</li>\n  <li>Write down why you enjoy the example you‚Äôve found.</li>\n  <li>If there is no example, question if you‚Äôre really making something that‚Äôs needed.\n    <ul>\n      <li>3a: If you are - great! You‚Äôre charting new territory, perhaps you‚Äôre onto a new innovation in your field and you‚Äôll be the first.</li>\n      <li>3b: Plus, even if your design totally bombs, it‚Äôll be the only design that exists - so at the same time it will also be the best- win, win!</li>\n    </ul>\n  </li>\n  <li>Sketch things out in a way you can move quickly using notes from step 2.</li>\n  <li>Iterate, but don‚Äôt dwell.</li>\n</ol>\n\n<p>This list is fairly easy to grok, but I‚Äôll say a few words about points four and five.</p>\n\n<p><strong>Sketching Things Out</strong><br />\nI‚Äôve found a ton of value in just getting some ideas out quickly. Sketch or Figma are usually what seasoned designers crack open, and that makes sense for them. It‚Äôs their wheelhouse, their Xcode. But for me, I still stumble around in those apps for a bit until I get where I need to be.</p>\n\n<p>So, to that end - I just simply draw. And, half the time, I never even open a high fidelity program to map things out more. Heck, I usually turn to SwiftUI before I do that (both a massive compliment and damning condemnation since I don‚Äôt end up shipping with that work). These days, I‚Äôm using a wonderful to-the-point infinite canvas app, aptly named <a href=\"https://www.scratch-paper.app\">Scratch Paper</a> to do the job:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/crappyDrawing.png\" role=\"presentation\" srcset=\"../assets/images/crappyDrawing.png\" /></p>\n\n<p>Yes, my drawings truly are that terrible. But what they do is help me discover problems early. And here, that dreadful display of my artistic capabilities uncovered the following truths:</p>\n\n<ul>\n  <li>Room for text would be tricky in a grid UI.</li>\n  <li>A grid does allow for more display density, but at a cost.</li>\n  <li>If lines of text didn‚Äôt line up column per column, the varying heights would bother me. A list of row won‚Äôt really have this quirk.</li>\n</ul>\n\n<p><strong>Iterating versus Dwelling</strong><br />\nMaybe it‚Äôs just me, but if I stick on a feature too long I begin to convince myself it‚Äôs straight trash. This is doubly true if you‚Äôve already shipped, because as the features mount you‚Äôre forced to stretch not only your design muscles, but your UX thought process as well. Tough stuff.</p>\n\n<p>So it is, at this point I try not to overthink it. I tend to make it as ‚Äúdumb‚Äù and as simple as it could possibly be. For me, this typically looks like:</p>\n\n<ul>\n  <li>Removing some gratuitous animations. <br /></li>\n  <li>Taking a flow from three taps to one or two. <br /></li>\n  <li>Or, even adding taps if the current flow requires too much preconceived ‚Äúknow how‚Äù bias I might‚Äôve baked in. For example, other devs on Twitter would know to double tap here, or long press there - but my mom wouldn‚Äôt. So, maybe one extra tap and a label explaining what an element does is worth it.</li>\n</ul>\n\n<p>It pays to remember that at this point, the entire planet pretty much uses an iPhone. Your barber, your doctor, your old college professor, your grandparents - it‚Äôs much more than just ‚Äúus‚Äù. So, if your flow is new or people have a chance of getting lost - dial it back. No need to put hot sauce on a jalapeno.</p>\n\n<p>A good design connotes simplicity - nearly 100% of the time. Over the years I‚Äôve come up with a complex flow chart to help remind me of this:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/superDiagram.jpeg\" role=\"presentation\" srcset=\"../assets/images/superDiagram.jpeg\" /></p>\n\n<h3 id=\"creating-the-base-mvp\">Creating the Base MVP</h3>\n<p>This is one of my favorite parts, because for me - I just feel like I can freakin‚Äô build anything, you know? And I bet you can too! Most of the indie developers I interact with (as I alluded to above) are programmers by trade. So, once we‚Äôve done the part that comes <em>least</em> naturally to us, it‚Äôs time to do the part that comes <em>most</em> naturally to us: the coding!</p>\n\n<blockquote>\n  <p>Sidebar: Reading this post back, I could see how this ordering might seem counterintuitive. You need to know a set of requirements before you can design anything. So, here I‚Äôm assuming you‚Äôve done that - this section speaks to defining a ‚Äúshippable MVP‚Äù that you‚Äôre ready to develop. A set of requirements has to be laid down already before you‚Äôd even know what to design.</p>\n</blockquote>\n\n<p>Before we do, though - let‚Äôs lay down what an MVP for this looks like. This is a permutation of the feature that maybe doesn‚Äôt have all that you wanted or envisioned, but it could ship if it had to.</p>\n\n<blockquote>\n  <p>For Spend Stack, this was Siri Shortcuts. It hurt not to launch with them, it hurts more they still aren‚Äôt there. But these are the choices we have to make as indies (for the record, hell or high water, shortcuts are coming).</p>\n</blockquote>\n\n<p>For this feature, my MVP looked like this:</p>\n\n<p><strong>The MVP</strong><br /></p>\n<ul>\n  <li>Assets for, well - new icons.</li>\n  <li>A new view to display icons.</li>\n  <li>A reconfigured settings view to make room for this new option, and a table row to take users there.</li>\n</ul>\n\n<p>And if I shipped with those things, it still would‚Äôve been a success for me and probably would have looked like this:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/basicB.png\" role=\"presentation\" srcset=\"../assets/images/basicB.png\" /></p>\n\n<p>Ah, but lest we stop there.</p>\n\n<h2 id=\"the-sauce\">The Sauce</h2>\n<p>At this point, I could‚Äôve shipped if I had to. But I had more time.</p>\n\n<p>As such, now we get to some of the good stuff. What makes your app stand out? I try to ask myself that critically all the time, and it‚Äôs no different even for something like custom icons. To that end, here‚Äôs what I wanted to really make the experience great:</p>\n\n<ul>\n  <li>A toggle for dark and light icons.</li>\n  <li>An ‚ÄúHD‚Äù preview of the icons, with a custom controller transition.</li>\n  <li>A link to the designer‚Äôs Twitter account.</li>\n</ul>\n\n<p>As you can see, when you mix this with the MVP it‚Äôs clear that all of these things are what are commonly referred to as ‚Äúnice to haves‚Äù. But, these are also little bits that users will notice and likely help foster goodwill among your community.</p>\n\n<p>If you‚Äôve used the Spend Stack beta, there‚Äôs not much to say here because it shipped with these features mentioned above:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/iconsDone.png\" role=\"presentation\" srcset=\"../assets/images/iconsDone.png\" /></p>\n\n<h3 id=\"the-best-in-class-additions\">The Best in Class Additions</h3>\n<p>Lastly, we have to give a feature the fit and finish it truly deserves. This is very different from ‚Äúthe sauce‚Äù above. The sauce (by the way, I feel so weird typing ‚Äúthe sauce‚Äù over and over but I‚Äôll solider on) is what makes your app stand out, be fun or have competitive advantages.</p>\n\n<p>On the other hand, Best in Class Additions are what make an app feel great, show what the platform can be or what software on it should feel like. These are things I believe <em>every</em> app should be doing, or at least aspire to be like.</p>\n\n<p>For custom icons, here was my list:</p>\n\n<ul>\n  <li>Don‚Äôt use <code class=\"language-plaintext highlighter-rouge\">reloadData</code> on the icon table view, batch reload it.</li>\n  <li>Use a slide out animation for the notice table row, but a fade animation for batch reloads (the slides were much too busy looking).</li>\n  <li>iPadOS Cursor Support.</li>\n  <li>Full accessibility and voice over support.</li>\n</ul>\n\n<p>For a quick example of the kind of impacts these things have, consider dismissing this little ‚Äúhint‚Äù using a full reload:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/bad.gif\" role=\"presentation\" srcset=\"../assets/images/bad.gif\" /></p>\n\n<p>Versus a smooth batching animation:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/good.gif\" role=\"presentation\" srcset=\"../assets/images/good.gif\" /></p>\n\n<p>And, here‚Äôs showing an icon with a standard presentation flow which feels a little off:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/noFun.gif\" role=\"presentation\" srcset=\"../assets/images/noFun.gif\" /></p>\n\n<p>And, here‚Äôs with the custom transition. You can‚Äôt really tell due to the .gif quality, but the icon‚Äôs corner radius also animates to its original value alongside the interactive drag dismiss:</p>\n\n<p><img class=\"lozad rounded center-img\" data-src=\"../assets/images/fun.gif\" role=\"presentation\" srcset=\"../assets/images/fun.gif\" /></p>\n\n<p>These are the things that add up over time, and make your app feel ‚Äú<a href=\"https://daringfireball.net/linked/2020/03/20/nnw-5-ios\">iOS-y</a>‚Äù</p>\n\n<p>Also, here are the things I consider best in class but I wasn‚Äôt able to get in:</p>\n\n<ul>\n  <li>Full keyboard support (I‚Äôm currently rewriting all of this logic, so it made sense to wait).</li>\n  <li>Some fun drag and drop options (i.e. drag an icon as an <code class=\"language-plaintext highlighter-rouge\">UIImage</code> payload).</li>\n</ul>\n\n<p>At this point, custom icons was finished and ready to be tested on the beta. The response was great, and I was happy to get it out. To recap, when I make a feature I tend to follow this flow:</p>\n\n<ol>\n  <li>Validate I should actually make the feature.</li>\n  <li>Get a list of what the feature is, roughly sketch it out.</li>\n  <li>From that list and sketch, define a ‚Äúshippable MVP‚Äù.</li>\n  <li>Time permitting - add in sprinkles of awesome.</li>\n  <li>Put in ‚ÄúBest in Class‚Äù additions.</li>\n  <li>Ship it and be proud of yourself.</li>\n  <li>Learn from user feedback, tweak it continually.</li>\n</ol>\n\n<p>On, and don‚Äôt forget step 8 - it‚Äôs always a good thing to tell others about your work!</p>\n\n<div class=\"jekyll-twitter-plugin\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Went overboard with adding icons to <a href=\"https://twitter.com/SpendStackApp?ref_src=twsrc%5Etfw\">@SpendStackApp</a> üòé<br /><br />üåìToggle between dark or regular icons <br />üé®Check out the talented designers on Twitter <br />üì∏ These icons have some stellar details - so tap on one to view it in HD <br /><br />Rolling out ~today ~on the beta üëâ <a href=\"https://t.co/3CZBLXiE5S\">https://t.co/3CZBLXiE5S</a> <a href=\"https://t.co/xcUQeRW5LO\">pic.twitter.com/xcUQeRW5LO</a></p>&mdash; Jordan Morgan (@JordanMorgan10) <a href=\"https://twitter.com/JordanMorgan10/status/1260670081048199168?ref_src=twsrc%5Etfw\">May 13, 2020</a></blockquote>\n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div>\n\n<h3 id=\"final-thoughts\">Final Thoughts</h3>\n<p>And that‚Äôs how it happens! When creating a feature for your own app, try to find the flows that help you do the most important thing: ship. There‚Äôs a middle ground between everything I‚Äôve listed here and where the reality of actually shipping things lies.</p>\n\n<p>For example, I want to ship every single feature with my ideal flow as I was able to this time: get the MVP done, add in ‚Äúthe sauce‚Äù and make sure you‚Äôve considered any best in class additions. But it doesn‚Äôt always work that way, and what doesn‚Äôt ship today can always ship tomorrow. Thus, my unofficial tour of how Spend Stack becomes the proud parent of a new feature concludes!</p>\n\n<p>Until next time ‚úåÔ∏è.</p>",
            "summary": "Ah yes, the feature.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2020-05-19T00:00:00-05:00",
            "date_modified": "2020-05-19T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["The Indie Dev Diaries"]},{
            "id": "http://localhost:4000/Exploring-Closures-With-Futures",
            "url": "http://localhost:4000/Exploring-Closures-With-Futures/",
            "title": "Exploring Futures over Closures",
            "content_html": "<p>One of the challenges I have faced with Combine is simply not knowing what all the framework can do, and when it should be doing it. The nascent vocabulary of its pieces combined (sorry) with my few dalliances with reactive programming has led to a steep learning curve. Even so, I‚Äôve replaced <code class=\"language-plaintext highlighter-rouge\">NotificationCenter</code> code with its built in Combine publisher, and I‚Äôve enjoyed the experience quite a lot. Operators are more concise, and clarity at the point of definition is a good way to foster a readable codebase.</p>\n\n<p>And yet.</p>\n\n<p>What more am I missing with Combine? I‚Äôve yet to author my own Publisher type, or know when the situation would call for one. I still struggle to maintain the mental model a passthrough subject affords, other than that it acts as both publisher and receiver.</p>\n\n<p>Thankfully, Apple pumped out a number of freshly minted Combine documentation, one of which led me to utilizing futures in place of closures and delegates. Personally, the benefit for me is that we harness Combine‚Äôs Swiss army knife operators in lieu of boilerplate code usually found within closures and delegate patterns.</p>\n\n<p>While working on <a href=\"https://twitter.com/JordanMorgan10/status/1250532684641775623?s=20\">Apple Card import</a> for Spend Stack, I had the following code:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">AppleCardImportViewController</span><span class=\"p\">:</span> <span class=\"kt\">SSBaseViewController</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">onImport</span><span class=\"p\">:(([</span><span class=\"kt\">AppleCardLineItem</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"p\">(</span><span class=\"kt\">Void</span><span class=\"p\">))?</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">func</span> <span class=\"nf\">importItems</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nf\">parse</span><span class=\"p\">(</span><span class=\"nv\">csv</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">csv</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"k\">weak</span> <span class=\"k\">self</span><span class=\"p\">]</span> <span class=\"n\">items</span> <span class=\"k\">in</span> \n            <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">handler</span> <span class=\"o\">=</span> <span class=\"k\">self</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">onImport</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"p\">}</span>\n\n            <span class=\"k\">guard</span> <span class=\"o\">!</span><span class=\"n\">items</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> <span class=\"k\">else</span> <span class=\"p\">{</span> \n                <span class=\"nf\">handler</span><span class=\"p\">([])</span>\n                <span class=\"k\">return</span> \n            <span class=\"p\">}</span>\n    \n            <span class=\"k\">let</span> <span class=\"nv\">purchases</span> <span class=\"o\">=</span> <span class=\"n\">items</span><span class=\"o\">.</span><span class=\"n\">filter</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">itemType</span> <span class=\"o\">!=</span> <span class=\"o\">.</span><span class=\"n\">payment</span> <span class=\"p\">}</span>\n            <span class=\"k\">let</span> <span class=\"nv\">translatedTags</span> <span class=\"o\">=</span> <span class=\"n\">purchases</span><span class=\"o\">.</span><span class=\"n\">filter</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">category</span> <span class=\"o\">!=</span> <span class=\"s\">\"Other\"</span> <span class=\"p\">}</span>\n                                 <span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"kt\">SSListTag</span><span class=\"p\">(</span><span class=\"nv\">fromAppleTag</span><span class=\"p\">:</span> <span class=\"nv\">$0</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n\n            <span class=\"k\">let</span> <span class=\"nv\">listItems</span> <span class=\"o\">=</span> <span class=\"n\">purchases</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"kt\">SSListItem</span><span class=\"p\">(</span><span class=\"nv\">fromAppleCardItem</span><span class=\"p\">:</span> <span class=\"nv\">$0</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n            <span class=\"n\">listItems</span><span class=\"o\">.</span><span class=\"n\">forEach</span> <span class=\"p\">{</span> \n                <span class=\"k\">let</span> <span class=\"nv\">translatedTag</span> <span class=\"o\">=</span> <span class=\"n\">translatedTags</span><span class=\"o\">.</span><span class=\"n\">first</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"p\">}</span>\n                <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">match</span> <span class=\"o\">=</span> <span class=\"n\">translatedTag</span> <span class=\"p\">{</span>\n                    <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"nf\">attach</span><span class=\"p\">(</span><span class=\"nv\">tag</span><span class=\"p\">:</span> <span class=\"n\">match</span><span class=\"p\">)</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"nf\">saveAsync</span><span class=\"p\">()</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"nf\">handler</span><span class=\"p\">([</span><span class=\"n\">items</span><span class=\"p\">])</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Later on...</span>\n<span class=\"k\">let</span> <span class=\"nv\">importController</span> <span class=\"o\">=</span> <span class=\"kt\">AppleCardImportViewController</span><span class=\"p\">(</span><span class=\"nv\">source</span><span class=\"p\">:</span><span class=\"n\">appleCardStatement</span><span class=\"p\">)</span>\n<span class=\"n\">importController</span><span class=\"o\">.</span><span class=\"n\">onImport</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nv\">items</span><span class=\"p\">:[</span><span class=\"kt\">SSListItem</span><span class=\"p\">]</span> <span class=\"k\">in</span> \n    <span class=\"c1\">// Apply to table view and local data models</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>While it certainly works, and I don‚Äôt typically advocate rewriting what is stable - this bit of code is unreleased, so I gave myself a pass. Obviously, I‚Äôve learned nothing from Spend Stack‚Äôs five year development cycle ü§†.</p>\n\n<p>Here‚Äôs what I came up with using a Future:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">AppleCardImportViewController</span><span class=\"p\">:</span> <span class=\"kt\">SSBaseViewController</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">performImport</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Future</span> <span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">AppleCardItem</span><span class=\"p\">],</span> <span class=\"kt\">Never</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"kt\">Future</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">promise</span> <span class=\"k\">in</span>\n            <span class=\"nf\">parse</span><span class=\"p\">(</span><span class=\"nv\">csv</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">csv</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">items</span> <span class=\"k\">in</span>\n                <span class=\"nf\">promise</span><span class=\"p\">(</span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">))</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// From the caller</span>\n<span class=\"k\">let</span> <span class=\"nv\">importVC</span> <span class=\"o\">=</span> <span class=\"kt\">AppleCardImportViewController</span><span class=\"p\">(</span><span class=\"nv\">withCSV</span><span class=\"p\">:</span> <span class=\"n\">csvData</span><span class=\"p\">)</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">importCancellable</span> <span class=\"o\">=</span> \n<span class=\"n\">importVC</span><span class=\"o\">.</span><span class=\"nf\">performImport</span><span class=\"p\">()</span>\n        <span class=\"o\">.</span><span class=\"n\">filter</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">itemType</span> <span class=\"o\">!=</span> <span class=\"o\">.</span><span class=\"n\">payment</span> <span class=\"p\">}</span>\n        <span class=\"o\">.</span><span class=\"nf\">sink</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">purchases</span> <span class=\"k\">in</span> \n            <span class=\"k\">let</span> <span class=\"nv\">translatedTags</span> <span class=\"o\">=</span> <span class=\"n\">purchases</span><span class=\"o\">.</span><span class=\"n\">filter</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">category</span> <span class=\"o\">!=</span> <span class=\"s\">\"Other\"</span> <span class=\"p\">}</span>\n            <span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"kt\">SSListTag</span><span class=\"p\">(</span><span class=\"nv\">fromAppleTag</span><span class=\"p\">:</span> <span class=\"nv\">$0</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n\n            <span class=\"k\">let</span> <span class=\"nv\">listItems</span> <span class=\"o\">=</span> <span class=\"n\">purchases</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"kt\">SSListItem</span><span class=\"p\">(</span><span class=\"nv\">fromAppleCardItem</span><span class=\"p\">:</span> <span class=\"nv\">$0</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n            <span class=\"n\">listItems</span><span class=\"o\">.</span><span class=\"n\">forEach</span> <span class=\"p\">{</span> \n                <span class=\"k\">let</span> <span class=\"nv\">translatedTag</span> <span class=\"o\">=</span> <span class=\"n\">translatedTags</span><span class=\"o\">.</span><span class=\"n\">first</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"p\">}</span>\n                <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">match</span> <span class=\"o\">=</span> <span class=\"n\">translatedTag</span> <span class=\"p\">{</span>\n                    <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"nf\">attach</span><span class=\"p\">(</span><span class=\"nv\">tag</span><span class=\"p\">:</span> <span class=\"n\">match</span><span class=\"p\">)</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"nf\">saveAsync</span><span class=\"p\">()</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"c1\">// Apply to table view</span>\n        <span class=\"p\">}</span>\n</code></pre></div></div>\n<p>A few things were reconsidered, namely that I might want all Apple Card items in the future so I removed the payment versus purchase filtering. I also opted for a less strict importing function, and it does much less.</p>\n\n<p>Another implementation point I waffled on was how many operators to utilize. For example, the <code class=\"language-plaintext highlighter-rouge\">sink</code> above could do nothing more than apply things to a table view, allowing for the <code class=\"language-plaintext highlighter-rouge\">map</code> operator to do more of the heavy lifting. I‚Äôm not sure which I‚Äôd prefer. With Combine, there seems to be a natural tension between how much work a publisher should abstract away and then emit, versus how much of that work the subscriber should shoulder when receiving it. In a way, it speaks to the framework‚Äôs utility that engineers even have the choice to begin with.</p>\n\n<p>More than anything, this was a learning exercise. I‚Äôm not quite sure how I feel about supplying the publisher via a function call, which is then chained off of. Maybe it‚Äôs my old Objective-C ‚Äúget off my lawn‚Äù ways, I‚Äôm just not sure if that‚Äôs widely accepted or not. Patterns will emerge, though, and I‚Äôm apt to take Apple at their word and sample code.</p>\n\n<p>If you‚Äôd like some weekend reading, be sure to check the aforementioned sample documentation here:</p>\n\n<ul>\n  <li><a href=\"https://developer.apple.com/documentation/combine/using_combine_for_your_app_s_asynchronous_code\">Using Combine for Your App‚Äôs Asynchronous Code</a></li>\n  <li><a href=\"https://developer.apple.com/documentation/combine/routing_notifications_to_combine_subscribers\">Routing Notifications to Combine Subscribers</a></li>\n  <li><a href=\"https://developer.apple.com/documentation/combine/replacing_foundation_timers_with_timer_publishers\">Replacing Foundation Timers with Timer Publishers</a></li>\n  <li><a href=\"https://developer.apple.com/documentation/combine/performing_key-value_observing_with_combine\">Performing Key-Value Observing with Combine</a></li>\n</ul>\n\n<p>Until next time ‚úåÔ∏è.</p>",
            "summary": "One of the challenges I have faced with Combine is simply not knowing what all the framework can do, and when it should be doing it. The nascent vocabulary of its pieces combined (sorry) with my few dalliances with reactive programming has led to a steep learning curve. Even so, I‚Äôve replaced NotificationCenter code with its built in Combine publisher, and I‚Äôve enjoyed the experience quite a lot. Operators are more concise, and clarity at the point of definition is a good way to foster a readable codebase.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2020-04-17T00:00:00-05:00",
            "date_modified": "2020-04-17T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Tech Notes"]},{
            "id": "http://localhost:4000/Its-Okay-To-Do-Nothing",
            "url": "http://localhost:4000/Its-Okay-To-Do-Nothing/",
            "title": "It‚Äôs Okay to Do Nothing",
            "content_html": "<p>If there is one thing I don‚Äôt like doing - it‚Äôs nothing.</p>\n\n<p>I‚Äôve never been good at it. While I‚Äôm miles away from the ‚Äúhustle porn‚Äù ways that are unfortunately pervasive within the tech industry, I‚Äôve always had a natural work ethic and a desire to do more. My near-anathema towards inaction, no goals being set forth or something to solve has served me well in my career.</p>\n\n<p>But right now, I just can‚Äôt. And if you can‚Äôt either, you should know that you don‚Äôt have to.</p>\n\n<p>It‚Äôs something I‚Äôve been having to remind myself. Not even a few hours ago, I retreated to my bathroom, closed the door and buried my head in my hands. I felt defeated - it was 9:00 a.m. and <em>just couldn‚Äôt get anything started</em>.</p>\n\n<p>Typically, my work day would‚Äôve started hours ago. But between (literally) spilled milk, a diaper change, breaking up a fight over a kickball, making another bowl of cereal because a sibling got jealous his brother had one and he didn‚Äôt while also getting myself dressed and somewhat fed - I found no ounce of down time.</p>\n\n<h3 id=\"detour\">Detour</h3>\n\n<p>When I look at my goals for the year, they stick out like a sore thumb and, now, produce a stark juxtaposition of priorities and unrealistic expectations when faced with the current world wide pandemic. I‚Äôm dutifully staying home, as I‚Äôm sure most of you are, and within these walls are my entire life:</p>\n\n<p>My wife, Bennett (age 6), Remy (age 3) and Baylor (1 year old).</p>\n\n<p>Our days are spent almost entirely spent in our 1100 square foot home with three bedrooms. In many ways, I feel thankful and lucky to have this extra time with the people I care most about it.</p>\n\n<p>But when it comes to work, and getting things done - I nearly can‚Äôt. And it bothers me, but I‚Äôve come to accept that this is simply where things are at. Even more so, it‚Äôs the definition of ‚Äúout of my control‚Äù. Either Remy is banging on my bedroom door screaming because he doesn‚Äôt understand why I can‚Äôt come out to play, or Bennett wants help with school work or Baylor wants me to hold her - I‚Äôve come to realize that parenthood doesn‚Äôt give you a pass just because the world is on fire.</p>\n\n<p>So, I‚Äôm doing the best that I can. And some days, it‚Äôs nearly nothing. On those days, I continually count my blessings to offset my mood. I work for an amazing company and team who truly are sympathetic to not only my situation, but everyone across the team. They‚Äôve got my back, and I‚Äôm truly grateful for it. My wife, who does this every day (pandemic or not) keeps us all together and chugging along.</p>\n\n<p>And, in between these moments, I find time to write code. And someday (who knows when) I‚Äôll have time to write more of it.</p>\n\n<p>But right now, Xcode is getting a breather more often than not. And while it does, I‚Äôm going to take my own deep breath, be a great Dad and husband - and give my employer all I can, when I can. Some days that‚Äôs not a lot, some days it‚Äôs a little bit more than yesterday and very rarely it‚Äôs quite a bit.</p>\n\n<p>So if your productivity is  taking a hit, and you‚Äôre a little stressed about it - please know that there are many of us feeling that burn along with you. Spend Stack can wait, blog posts can wait, learning new things can wait - it all can wait. Your employer will hopefully know that some work will have to wait, too. But taking care of myself, my kids and wife cannot.</p>\n\n<p>This is nothing that Twitter hasn‚Äôt already said, but maybe you needed a reminder today. We will put COVID-19 in our rear view mirror someday. Humanity has defeated several forms of sickness before, and we will do it again. But this is not normal, and your throughput won‚Äôt be normal.</p>\n\n<h3 id=\"final-thoughts\">Final Thoughts</h3>\n<p>Just a take a breather, know that better days are on the way and please remember; it‚Äôs OK to do nothing. Right now, some days it‚Äôs all you can do.</p>\n\n<p>Until next time ‚úåÔ∏è.</p>",
            "summary": "If there is one thing I don‚Äôt like doing - it‚Äôs nothing.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2020-04-10T00:00:00-05:00",
            "date_modified": "2020-04-10T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["The Indie Dev Diaries"]},{
            "id": "http://localhost:4000/Keyboard-and-Combine",
            "url": "http://localhost:4000/Keyboard-and-Combine/",
            "title": "Keyboard and Combine",
            "content_html": "<p>While toiling about with some keyboard handling code in Spend Stack, I started to remember one import choice I made several months ago:</p>\n\n<p>Spend Stack‚Äôs minimum build target is iOS 13.</p>\n\n<p>Which means my cup runneth over with Combine. So, today I‚Äôm sharing a little utility I wrote which brings the convenience of Combine into the world of <code class=\"language-plaintext highlighter-rouge\">UIKeyboard</code>.</p>\n\n<p>Normally, the flow to handle the keyboard looks a little like this, give or take:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">keyboardNotifications</span><span class=\"p\">:[</span><span class=\"kt\">NSNotification</span><span class=\"o\">.</span><span class=\"kt\">Name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"n\">keyboardWillShowNotification</span><span class=\"p\">,</span>\n<span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"n\">keyboardDidShowNotification</span><span class=\"p\">,</span>\n<span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"n\">keyboardWillHideNotification</span><span class=\"p\">,</span>\n<span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"n\">keyboardDidHideNotification</span><span class=\"p\">]</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">kbSelector</span> <span class=\"o\">=</span> <span class=\"kd\">#selector(</span><span class=\"nf\">receivedKeyboardNotification(notification:)</span><span class=\"kd\">)</span>\n<span class=\"n\">keyboardNotifications</span><span class=\"o\">.</span><span class=\"n\">forEach</span> <span class=\"p\">{</span>\n    <span class=\"kt\">NotificationCenter</span><span class=\"o\">.</span><span class=\"k\">default</span><span class=\"o\">.</span><span class=\"nf\">addObserver</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"p\">,</span>\n                                           <span class=\"nv\">selector</span><span class=\"p\">:</span> <span class=\"n\">kbSelector</span><span class=\"p\">,</span>\n                                           <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"nv\">$0</span><span class=\"p\">,</span>\n                                           <span class=\"nv\">object</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">@objc</span> <span class=\"kd\">func</span> <span class=\"nf\">receivedKeyboardNotification</span><span class=\"p\">(</span><span class=\"nv\">notification</span><span class=\"p\">:</span> <span class=\"kt\">Notification</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Get animation curve, rect or whatever else...</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The two things I wanted to clean up were that:</p>\n\n<p><strong>1)</strong> That‚Äôs a lot of code to just know when the keyboard is doing stuff and <br />\n<strong>2)</strong> It would be nice to centralize getting all of the information about what‚Äôs going on out of the <code class=\"language-plaintext highlighter-rouge\">userInfo</code> dictionary into something tidier.</p>\n\n<h3 id=\"unify-keyboard-information\">Unify Keyboard Information</h3>\n<p>The latter part is easy enough. A little struct can go a long ways here:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">enum</span> <span class=\"kt\">KeyboardTransitionState</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">unset</span><span class=\"p\">,</span> <span class=\"n\">willShow</span><span class=\"p\">,</span> <span class=\"n\">didShow</span><span class=\"p\">,</span> <span class=\"n\">willHide</span><span class=\"p\">,</span> <span class=\"n\">didHide</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">struct</span> <span class=\"kt\">KeyboardState</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">state</span><span class=\"p\">:</span><span class=\"kt\">KeyboardTransitionState</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">unset</span>\n    <span class=\"k\">var</span> <span class=\"nv\">height</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n    <span class=\"k\">var</span> <span class=\"nv\">isVisible</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n    <span class=\"k\">var</span> <span class=\"nv\">frame</span><span class=\"p\">:</span><span class=\"kt\">CGRect</span> <span class=\"o\">=</span> <span class=\"kt\">CGRect</span><span class=\"o\">.</span><span class=\"n\">zero</span>\n    <span class=\"k\">var</span> <span class=\"nv\">animationDuration</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n\n    <span class=\"c1\">// MARK: Private </span>\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">frameEnd</span> <span class=\"o\">=</span> <span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"n\">keyboardFrameEndUserInfoKey</span>\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">animEnd</span> <span class=\"o\">=</span> <span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"n\">keyboardAnimationDurationUserInfoKey</span>\n\n    <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">with</span> <span class=\"nv\">note</span><span class=\"p\">:</span><span class=\"kt\">Notification</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">switch</span> <span class=\"n\">note</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"nv\">keyboardWillShowNotification</span><span class=\"p\">:</span>\n            <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">willShow</span>\n            <span class=\"k\">let</span> <span class=\"nv\">keyboardEndFrame</span> <span class=\"o\">=</span> <span class=\"n\">note</span><span class=\"o\">.</span><span class=\"n\">userInfo</span><span class=\"p\">?[</span><span class=\"n\">frameEnd</span><span class=\"p\">]</span> <span class=\"k\">as!</span> <span class=\"kt\">CGRect</span>\n            <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"kt\">Double</span><span class=\"p\">(</span><span class=\"n\">keyboardEndFrame</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">)</span>\n            \n            <span class=\"k\">let</span> <span class=\"nv\">animationDurationValue</span> <span class=\"o\">=</span> <span class=\"n\">note</span><span class=\"o\">.</span><span class=\"n\">userInfo</span><span class=\"p\">?[</span><span class=\"n\">animEnd</span><span class=\"p\">]</span> <span class=\"k\">as!</span> <span class=\"kt\">NSNumber</span>\n            <span class=\"n\">animationDuration</span> <span class=\"o\">=</span> <span class=\"n\">animationDurationValue</span><span class=\"o\">.</span><span class=\"n\">doubleValue</span>\n        <span class=\"k\">break</span>\n        <span class=\"k\">case</span> <span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"nv\">keyboardDidShowNotification</span><span class=\"p\">:</span>\n            <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">didShow</span>\n            <span class=\"n\">isVisible</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n            \n            <span class=\"k\">let</span> <span class=\"nv\">keyboardEndFrame</span> <span class=\"o\">=</span> <span class=\"n\">note</span><span class=\"o\">.</span><span class=\"n\">userInfo</span><span class=\"p\">?[</span><span class=\"n\">frameEnd</span><span class=\"p\">]</span> <span class=\"k\">as!</span> <span class=\"kt\">CGRect</span>\n            <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"kt\">Double</span><span class=\"p\">(</span><span class=\"n\">keyboardEndFrame</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">)</span>\n        <span class=\"k\">break</span>\n        <span class=\"k\">case</span> <span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"nv\">keyboardWillHideNotification</span><span class=\"p\">:</span>\n            <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">willHide</span>\n            <span class=\"k\">let</span> <span class=\"nv\">animationDurationValue</span> <span class=\"o\">=</span> <span class=\"n\">note</span><span class=\"o\">.</span><span class=\"n\">userInfo</span><span class=\"p\">?[</span><span class=\"n\">animEnd</span><span class=\"p\">]</span> <span class=\"k\">as!</span> <span class=\"kt\">NSNumber</span>\n            <span class=\"n\">animationDuration</span> <span class=\"o\">=</span> <span class=\"n\">animationDurationValue</span><span class=\"o\">.</span><span class=\"n\">doubleValue</span>\n        <span class=\"k\">break</span>\n        <span class=\"k\">case</span> <span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"nv\">keyboardDidHideNotification</span><span class=\"p\">:</span>\n            <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">didHide</span>\n        <span class=\"k\">break</span>\n        <span class=\"k\">default</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</code></pre></div></div>\n\n<p>It‚Äôs a smidge dirty and needs a bit of refactoring, but it‚Äôs more than enough to try out a new approach with Combine.</p>\n\n<h3 id=\"combine-it\">Combine It</h3>\n<p>In what‚Äôs become a weekly practice for me, I had a problem and threw Combine at it. I‚Äôm not sure if that‚Äôs a great sign or malpractice, regardless - here‚Äôs how it shaped up (with a backport option for iOS 12):</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">KeyboardHandler</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">onChange</span><span class=\"p\">:((</span><span class=\"kt\">KeyboardState</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)</span>\n    <span class=\"kd\">private(set)</span> <span class=\"k\">var</span> <span class=\"nv\">currentState</span><span class=\"p\">:</span><span class=\"kt\">KeyboardState</span><span class=\"p\">?</span>\n    \n    <span class=\"kd\">@available</span><span class=\"p\">(</span><span class=\"n\">iOS</span> <span class=\"mf\">13.0</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">)</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">lazy</span> <span class=\"k\">var</span> <span class=\"nv\">kbSub</span><span class=\"p\">:</span><span class=\"kt\">AnyCancellable</span><span class=\"p\">?</span> <span class=\"o\">=</span> <span class=\"kt\">AnyCancellable</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">keyboardNotifications</span><span class=\"p\">:[</span><span class=\"kt\">NSNotification</span><span class=\"o\">.</span><span class=\"kt\">Name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"n\">keyboardWillShowNotification</span><span class=\"p\">,</span>\n        <span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"n\">keyboardDidShowNotification</span><span class=\"p\">,</span>\n        <span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"n\">keyboardWillHideNotification</span><span class=\"p\">,</span>\n        <span class=\"kt\">UIResponder</span><span class=\"o\">.</span><span class=\"n\">keyboardDidHideNotification</span><span class=\"p\">]</span>\n    \n    <span class=\"c1\">// MARK: Initializer</span>\n\n    <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">with</span> <span class=\"nv\">changeHandler</span><span class=\"p\">:</span><span class=\"kd\">@escaping</span> <span class=\"p\">((</span><span class=\"kt\">KeyboardState</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"n\">onChange</span> <span class=\"o\">=</span> <span class=\"n\">changeHandler</span>\n        \n        <span class=\"k\">if</span> <span class=\"kd\">#available(iOS 13.0, *)</span> <span class=\"p\">{</span>\n            <span class=\"k\">let</span> <span class=\"nv\">nc</span> <span class=\"o\">=</span> <span class=\"kt\">NotificationCenter</span><span class=\"o\">.</span><span class=\"k\">default</span>\n            <span class=\"n\">kbSub</span> <span class=\"o\">=</span> <span class=\"kt\">Publishers</span><span class=\"o\">.</span><span class=\"kt\">MergeMany</span><span class=\"p\">(</span>\n                <span class=\"n\">keyboardNotifications</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"n\">nc</span><span class=\"o\">.</span><span class=\"nf\">publisher</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"nv\">$0</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n            <span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">sink</span><span class=\"p\">(</span><span class=\"nv\">receiveValue</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">note</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">currentState</span> <span class=\"o\">=</span> <span class=\"kt\">KeyboardState</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">note</span><span class=\"p\">)</span>\n                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">onChange</span><span class=\"p\">(</span><span class=\"kt\">KeyboardState</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">note</span><span class=\"p\">))</span>\n            <span class=\"p\">})</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">let</span> <span class=\"nv\">kbSelector</span> <span class=\"o\">=</span> <span class=\"kd\">#selector(</span><span class=\"nf\">receivedKeyboardNotification(notification:)</span><span class=\"kd\">)</span>\n            <span class=\"n\">keyboardNotifications</span><span class=\"o\">.</span><span class=\"n\">forEach</span> <span class=\"p\">{</span>\n                <span class=\"kt\">NotificationCenter</span><span class=\"o\">.</span><span class=\"k\">default</span><span class=\"o\">.</span><span class=\"nf\">addObserver</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"p\">,</span>\n                                                       <span class=\"nv\">selector</span><span class=\"p\">:</span> <span class=\"err\">#</span><span class=\"n\">kbSelector</span><span class=\"p\">,</span>\n                                                       <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"nv\">$0</span><span class=\"p\">,</span>\n                                                       <span class=\"nv\">object</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"kd\">func</span> <span class=\"nf\">unsubscribe</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"kd\">#available(iOS 13.0, *)</span> <span class=\"p\">{</span>\n            <span class=\"n\">kbSub</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"nf\">cancel</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"kt\">NotificationCenter</span><span class=\"o\">.</span><span class=\"k\">default</span><span class=\"o\">.</span><span class=\"nf\">removeObserver</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"c1\">//MARK: Private Functions</span>\n\n    <span class=\"kd\">@objc</span> <span class=\"kd\">func</span> <span class=\"nf\">receivedKeyboardNotification</span><span class=\"p\">(</span><span class=\"nv\">notification</span><span class=\"p\">:</span> <span class=\"kt\">Notification</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">currentState</span> <span class=\"o\">=</span> <span class=\"kt\">KeyboardState</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">notification</span><span class=\"p\">)</span>\n        <span class=\"nf\">onChange</span><span class=\"p\">(</span><span class=\"kt\">KeyboardState</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">notification</span><span class=\"p\">))</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>There‚Äôs likely a prettier path to merging all of the notifications, but I accepted my Combine na√Øvet√© and moved on. Further, one might not need all of em‚Äô either.</p>\n\n<blockquote>\n  <p>Update: Thanks to <a href=\"https://www.twitter.com/jasdev\">Jasdev Singh</a> for suggesting <code class=\"language-plaintext highlighter-rouge\">mergeMany</code>.</p>\n</blockquote>\n\n<h3 id=\"in-practice\">In Practice</h3>\n<p>So what‚Äôs that leave us with? Well, a tidy little object that‚Äôll hide the messiness of keyboard handling away in a simple package:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">kbHandler</span><span class=\"p\">:</span><span class=\"kt\">KeyboardHandler</span><span class=\"p\">?</span>\n\n<span class=\"c1\">// Later on in viewDidLoad, or wherever appropriate...</span>\n<span class=\"n\">kbHandler</span> <span class=\"o\">=</span> <span class=\"kt\">KeyboardHandler</span> <span class=\"p\">{</span> <span class=\"n\">state</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"nv\">duration</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">animationDuration</span>\n    <span class=\"kt\">UIView</span><span class=\"o\">.</span><span class=\"nf\">animate</span><span class=\"p\">(</span><span class=\"nv\">withDuration</span><span class=\"p\">:</span> <span class=\"n\">duration</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Change table view offsets or whatever</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>What‚Äôs ironic is that after I had written this, I realized I could‚Äôve done this approach years ago. In fact, Combine is abstracted away entirely to the caller.</p>\n\n<p>But, it‚Äôs just another example of how new API can make you look at age old problems in a new light. A problem well stated is a problem half solved I suppose.</p>\n\n<p>Until next time ‚úåÔ∏è.</p>",
            "summary": "While toiling about with some keyboard handling code in Spend Stack, I started to remember one import choice I made several months ago:",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2020-03-22T00:00:00-05:00",
            "date_modified": "2020-03-22T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Tech Notes"]}]
}